// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#include "user.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_user_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Chat_user_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_History_user_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Invitation_user_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lombric_user_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rankInfo_user_2eproto;
class UserConnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserConnect> _instance;
} _UserConnect_default_instance_;
class ChatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Chat> _instance;
} _Chat_default_instance_;
class Chat_rDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Chat_r> _instance;
} _Chat_r_default_instance_;
class convo_sDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<convo_s> _instance;
} _convo_s_default_instance_;
class InvitationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Invitation> _instance;
} _Invitation_default_instance_;
class Invitation_rDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Invitation_r> _instance;
} _Invitation_r_default_instance_;
class JoinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Join> _instance;
} _Join_default_instance_;
class Lomb_rDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lomb_r> _instance;
} _Lomb_r_default_instance_;
class Lomb_modDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lomb_mod> _instance;
} _Lomb_mod_default_instance_;
class Usr_addDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Usr_add> _instance;
} _Usr_add_default_instance_;
class Map_modDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map_mod> _instance;
} _Map_mod_default_instance_;
class Time_modDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Time_mod> _instance;
} _Time_mod_default_instance_;
class Time_round_modDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Time_round_mod> _instance;
} _Time_round_mod_default_instance_;
class Nbr_lomb_modDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Nbr_lomb_mod> _instance;
} _Nbr_lomb_mod_default_instance_;
class Join_groupe_sDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Join_groupe_s> _instance;
} _Join_groupe_s_default_instance_;
class Join_groupe_rDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Join_groupe_r> _instance;
} _Join_groupe_r_default_instance_;
class Get_historyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Get_history> _instance;
} _Get_history_default_instance_;
class HistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<History> _instance;
} _History_default_instance_;
class History_rDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<History_r> _instance;
} _History_r_default_instance_;
class Get_rankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Get_rank> _instance;
} _Get_rank_default_instance_;
class rankInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<rankInfo> _instance;
} _rankInfo_default_instance_;
class Rank_rDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rank_r> _instance;
} _Rank_r_default_instance_;
class Fri_addDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fri_add> _instance;
} _Fri_add_default_instance_;
class Fri_rcvDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fri_rcv> _instance;
} _Fri_rcv_default_instance_;
class Fri_acceptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fri_accept> _instance;
} _Fri_accept_default_instance_;
class Fri_rmvDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fri_rmv> _instance;
} _Fri_rmv_default_instance_;
class Fri_ls_rDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fri_ls_r> _instance;
} _Fri_ls_r_default_instance_;
class Lomb_posDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lomb_pos> _instance;
} _Lomb_pos_default_instance_;
class TirDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tir> _instance;
} _Tir_default_instance_;
class LombricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lombric> _instance;
} _Lombric_default_instance_;
class End_tourDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<End_tour> _instance;
} _End_tour_default_instance_;
class Next_lombricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Next_lombric> _instance;
} _Next_lombric_default_instance_;
class infoPartie_pDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<infoPartie_p> _instance;
} _infoPartie_p_default_instance_;
class Create_roomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Create_room> _instance;
} _Create_room_default_instance_;
static void InitDefaultsscc_info_Chat_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Chat_default_instance_;
    new (ptr) ::Chat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Chat_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Chat_user_2eproto}, {}};

static void InitDefaultsscc_info_Chat_r_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Chat_r_default_instance_;
    new (ptr) ::Chat_r();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat_r::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Chat_r_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Chat_r_user_2eproto}, {
      &scc_info_Chat_user_2eproto.base,}};

static void InitDefaultsscc_info_Create_room_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Create_room_default_instance_;
    new (ptr) ::Create_room();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Create_room::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Create_room_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Create_room_user_2eproto}, {}};

static void InitDefaultsscc_info_End_tour_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_End_tour_default_instance_;
    new (ptr) ::End_tour();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::End_tour::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_End_tour_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_End_tour_user_2eproto}, {}};

static void InitDefaultsscc_info_Fri_accept_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Fri_accept_default_instance_;
    new (ptr) ::Fri_accept();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Fri_accept::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fri_accept_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Fri_accept_user_2eproto}, {}};

static void InitDefaultsscc_info_Fri_add_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Fri_add_default_instance_;
    new (ptr) ::Fri_add();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Fri_add::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fri_add_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Fri_add_user_2eproto}, {}};

static void InitDefaultsscc_info_Fri_ls_r_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Fri_ls_r_default_instance_;
    new (ptr) ::Fri_ls_r();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Fri_ls_r::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fri_ls_r_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Fri_ls_r_user_2eproto}, {}};

static void InitDefaultsscc_info_Fri_rcv_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Fri_rcv_default_instance_;
    new (ptr) ::Fri_rcv();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Fri_rcv::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fri_rcv_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Fri_rcv_user_2eproto}, {}};

static void InitDefaultsscc_info_Fri_rmv_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Fri_rmv_default_instance_;
    new (ptr) ::Fri_rmv();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Fri_rmv::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fri_rmv_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Fri_rmv_user_2eproto}, {}};

static void InitDefaultsscc_info_Get_history_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Get_history_default_instance_;
    new (ptr) ::Get_history();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Get_history::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Get_history_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Get_history_user_2eproto}, {}};

static void InitDefaultsscc_info_Get_rank_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Get_rank_default_instance_;
    new (ptr) ::Get_rank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Get_rank::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Get_rank_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Get_rank_user_2eproto}, {}};

static void InitDefaultsscc_info_History_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_History_default_instance_;
    new (ptr) ::History();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::History::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_History_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_History_user_2eproto}, {}};

static void InitDefaultsscc_info_History_r_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_History_r_default_instance_;
    new (ptr) ::History_r();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::History_r::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_History_r_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_History_r_user_2eproto}, {
      &scc_info_History_user_2eproto.base,}};

static void InitDefaultsscc_info_Invitation_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Invitation_default_instance_;
    new (ptr) ::Invitation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Invitation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Invitation_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Invitation_user_2eproto}, {}};

static void InitDefaultsscc_info_Invitation_r_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Invitation_r_default_instance_;
    new (ptr) ::Invitation_r();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Invitation_r::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Invitation_r_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Invitation_r_user_2eproto}, {
      &scc_info_Invitation_user_2eproto.base,}};

static void InitDefaultsscc_info_Join_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Join_default_instance_;
    new (ptr) ::Join();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Join::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Join_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Join_user_2eproto}, {}};

static void InitDefaultsscc_info_Join_groupe_r_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Join_groupe_r_default_instance_;
    new (ptr) ::Join_groupe_r();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Join_groupe_r::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Join_groupe_r_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Join_groupe_r_user_2eproto}, {}};

static void InitDefaultsscc_info_Join_groupe_s_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Join_groupe_s_default_instance_;
    new (ptr) ::Join_groupe_s();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Join_groupe_s::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Join_groupe_s_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Join_groupe_s_user_2eproto}, {}};

static void InitDefaultsscc_info_Lomb_mod_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Lomb_mod_default_instance_;
    new (ptr) ::Lomb_mod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lomb_mod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lomb_mod_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Lomb_mod_user_2eproto}, {}};

static void InitDefaultsscc_info_Lomb_pos_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Lomb_pos_default_instance_;
    new (ptr) ::Lomb_pos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lomb_pos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lomb_pos_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Lomb_pos_user_2eproto}, {}};

static void InitDefaultsscc_info_Lomb_r_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Lomb_r_default_instance_;
    new (ptr) ::Lomb_r();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lomb_r::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lomb_r_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Lomb_r_user_2eproto}, {}};

static void InitDefaultsscc_info_Lombric_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Lombric_default_instance_;
    new (ptr) ::Lombric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lombric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lombric_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Lombric_user_2eproto}, {}};

static void InitDefaultsscc_info_Map_mod_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Map_mod_default_instance_;
    new (ptr) ::Map_mod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Map_mod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Map_mod_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Map_mod_user_2eproto}, {}};

static void InitDefaultsscc_info_Nbr_lomb_mod_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Nbr_lomb_mod_default_instance_;
    new (ptr) ::Nbr_lomb_mod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nbr_lomb_mod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Nbr_lomb_mod_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Nbr_lomb_mod_user_2eproto}, {}};

static void InitDefaultsscc_info_Next_lombric_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Next_lombric_default_instance_;
    new (ptr) ::Next_lombric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Next_lombric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Next_lombric_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Next_lombric_user_2eproto}, {}};

static void InitDefaultsscc_info_Rank_r_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rank_r_default_instance_;
    new (ptr) ::Rank_r();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rank_r::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rank_r_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Rank_r_user_2eproto}, {
      &scc_info_rankInfo_user_2eproto.base,}};

static void InitDefaultsscc_info_Time_mod_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Time_mod_default_instance_;
    new (ptr) ::Time_mod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Time_mod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_mod_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Time_mod_user_2eproto}, {}};

static void InitDefaultsscc_info_Time_round_mod_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Time_round_mod_default_instance_;
    new (ptr) ::Time_round_mod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Time_round_mod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_round_mod_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Time_round_mod_user_2eproto}, {}};

static void InitDefaultsscc_info_Tir_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Tir_default_instance_;
    new (ptr) ::Tir();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tir::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tir_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Tir_user_2eproto}, {}};

static void InitDefaultsscc_info_UserConnect_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UserConnect_default_instance_;
    new (ptr) ::UserConnect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserConnect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserConnect_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserConnect_user_2eproto}, {}};

static void InitDefaultsscc_info_Usr_add_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Usr_add_default_instance_;
    new (ptr) ::Usr_add();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Usr_add::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Usr_add_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Usr_add_user_2eproto}, {}};

static void InitDefaultsscc_info_convo_s_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_convo_s_default_instance_;
    new (ptr) ::convo_s();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::convo_s::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_convo_s_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_convo_s_user_2eproto}, {}};

static void InitDefaultsscc_info_infoPartie_p_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_infoPartie_p_default_instance_;
    new (ptr) ::infoPartie_p();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoPartie_p::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_infoPartie_p_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_infoPartie_p_user_2eproto}, {
      &scc_info_Lombric_user_2eproto.base,}};

static void InitDefaultsscc_info_rankInfo_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_rankInfo_default_instance_;
    new (ptr) ::rankInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rankInfo_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_rankInfo_user_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_user_2eproto[34];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_user_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_user_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_user_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserConnect, isregister_),
  PROTOBUF_FIELD_OFFSET(::UserConnect, pseudo_),
  PROTOBUF_FIELD_OFFSET(::UserConnect, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat, pseudo_),
  PROTOBUF_FIELD_OFFSET(::Chat, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Chat_r, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat_r, msgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::convo_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::convo_s, pseudo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Invitation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Invitation, pseudo_),
  PROTOBUF_FIELD_OFFSET(::Invitation, type_),
  PROTOBUF_FIELD_OFFSET(::Invitation, game_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Invitation_r, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Invitation_r, invits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Join, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Join, pseudo_),
  PROTOBUF_FIELD_OFFSET(::Join, accept_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lomb_r, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lomb_r, lombs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lomb_mod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lomb_mod, id_lomb_),
  PROTOBUF_FIELD_OFFSET(::Lomb_mod, name_lomb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Usr_add, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Usr_add, pseudo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Map_mod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Map_mod, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Time_mod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Time_mod, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Time_round_mod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Time_round_mod, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nbr_lomb_mod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nbr_lomb_mod, nbr_lomb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Join_groupe_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Join_groupe_s, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Join_groupe_r, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Join_groupe_r, pseudo_),
  PROTOBUF_FIELD_OFFSET(::Join_groupe_r, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Get_history, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Get_history, pseudo_),
  PROTOBUF_FIELD_OFFSET(::Get_history, first_game_),
  PROTOBUF_FIELD_OFFSET(::Get_history, nbr_game_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::History, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::History, pseudo_1_),
  PROTOBUF_FIELD_OFFSET(::History, pseudo_2_),
  PROTOBUF_FIELD_OFFSET(::History, pseudo_3_),
  PROTOBUF_FIELD_OFFSET(::History, pseudo_4_),
  PROTOBUF_FIELD_OFFSET(::History, point_1_),
  PROTOBUF_FIELD_OFFSET(::History, point_2_),
  PROTOBUF_FIELD_OFFSET(::History, point_3_),
  PROTOBUF_FIELD_OFFSET(::History, point_4_),
  PROTOBUF_FIELD_OFFSET(::History, date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::History_r, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::History_r, history_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Get_rank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Get_rank, first_player_),
  PROTOBUF_FIELD_OFFSET(::Get_rank, nbr_player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rankInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankInfo, user_),
  PROTOBUF_FIELD_OFFSET(::rankInfo, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rank_r, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rank_r, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Fri_add, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Fri_add, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Fri_rcv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Fri_rcv, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Fri_accept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Fri_accept, accept_),
  PROTOBUF_FIELD_OFFSET(::Fri_accept, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Fri_rmv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Fri_rmv, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Fri_ls_r, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Fri_ls_r, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lomb_pos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lomb_pos, id_lomb_),
  PROTOBUF_FIELD_OFFSET(::Lomb_pos, pos_x_),
  PROTOBUF_FIELD_OFFSET(::Lomb_pos, pos_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tir, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Tir, id_arme_),
  PROTOBUF_FIELD_OFFSET(::Tir, force_),
  PROTOBUF_FIELD_OFFSET(::Tir, angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lombric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lombric, id_lomb_),
  PROTOBUF_FIELD_OFFSET(::Lombric, pos_x_),
  PROTOBUF_FIELD_OFFSET(::Lombric, pos_y_),
  PROTOBUF_FIELD_OFFSET(::Lombric, vie_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::End_tour, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::End_tour, id_lomb_mort_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Next_lombric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Next_lombric, id_lomb_),
  PROTOBUF_FIELD_OFFSET(::Next_lombric, is_yours_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::infoPartie_p, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoPartie_p, lomb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Create_room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Create_room, pseudo_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::UserConnect)},
  { 8, -1, sizeof(::Chat)},
  { 15, -1, sizeof(::Chat_r)},
  { 21, -1, sizeof(::convo_s)},
  { 27, -1, sizeof(::Invitation)},
  { 35, -1, sizeof(::Invitation_r)},
  { 41, -1, sizeof(::Join)},
  { 48, -1, sizeof(::Lomb_r)},
  { 54, -1, sizeof(::Lomb_mod)},
  { 61, -1, sizeof(::Usr_add)},
  { 67, -1, sizeof(::Map_mod)},
  { 73, -1, sizeof(::Time_mod)},
  { 79, -1, sizeof(::Time_round_mod)},
  { 85, -1, sizeof(::Nbr_lomb_mod)},
  { 91, -1, sizeof(::Join_groupe_s)},
  { 97, -1, sizeof(::Join_groupe_r)},
  { 104, -1, sizeof(::Get_history)},
  { 112, -1, sizeof(::History)},
  { 126, -1, sizeof(::History_r)},
  { 132, -1, sizeof(::Get_rank)},
  { 139, -1, sizeof(::rankInfo)},
  { 146, -1, sizeof(::Rank_r)},
  { 152, -1, sizeof(::Fri_add)},
  { 158, -1, sizeof(::Fri_rcv)},
  { 164, -1, sizeof(::Fri_accept)},
  { 171, -1, sizeof(::Fri_rmv)},
  { 177, -1, sizeof(::Fri_ls_r)},
  { 183, -1, sizeof(::Lomb_pos)},
  { 191, -1, sizeof(::Tir)},
  { 199, -1, sizeof(::Lombric)},
  { 208, -1, sizeof(::End_tour)},
  { 214, -1, sizeof(::Next_lombric)},
  { 221, -1, sizeof(::infoPartie_p)},
  { 227, -1, sizeof(::Create_room)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UserConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Chat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Chat_r_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_convo_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Invitation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Invitation_r_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Join_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Lomb_r_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Lomb_mod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Usr_add_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Map_mod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Time_mod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Time_round_mod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Nbr_lomb_mod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Join_groupe_s_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Join_groupe_r_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Get_history_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_History_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_History_r_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Get_rank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_rankInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Rank_r_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Fri_add_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Fri_rcv_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Fri_accept_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Fri_rmv_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Fri_ls_r_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Lomb_pos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Tir_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Lombric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_End_tour_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Next_lombric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_infoPartie_p_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Create_room_default_instance_),
};

const char descriptor_table_protodef_user_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nuser.proto\"C\n\013UserConnect\022\022\n\nisregiste"
  "r\030\001 \001(\010\022\016\n\006pseudo\030\002 \001(\t\022\020\n\010password\030\003 \001("
  "\t\"#\n\004Chat\022\016\n\006pseudo\030\001 \001(\t\022\013\n\003msg\030\002 \001(\t\"\035"
  "\n\006Chat_r\022\023\n\004msgs\030\001 \003(\0132\005.Chat\"\031\n\007convo_s"
  "\022\016\n\006pseudo\030\001 \001(\t\";\n\nInvitation\022\016\n\006pseudo"
  "\030\001 \001(\t\022\014\n\004type\030\002 \001(\010\022\017\n\007game_id\030\003 \001(\r\"+\n"
  "\014Invitation_r\022\033\n\006invits\030\001 \003(\0132\013.Invitati"
  "on\"&\n\004Join\022\016\n\006pseudo\030\001 \001(\t\022\016\n\006accept\030\002 \001"
  "(\010\"\027\n\006Lomb_r\022\r\n\005Lombs\030\001 \003(\t\".\n\010Lomb_mod\022"
  "\017\n\007id_lomb\030\001 \001(\r\022\021\n\tname_Lomb\030\002 \001(\t\"\031\n\007U"
  "sr_add\022\016\n\006pseudo\030\001 \001(\t\"\025\n\007Map_mod\022\n\n\002id\030"
  "\001 \001(\r\"\030\n\010Time_mod\022\014\n\004time\030\001 \001(\r\"\036\n\016Time_"
  "round_mod\022\014\n\004time\030\001 \001(\r\" \n\014Nbr_lomb_mod\022"
  "\020\n\010nbr_lomb\030\001 \001(\r\"\033\n\rJoin_groupe_s\022\n\n\002id"
  "\030\001 \001(\r\"+\n\rJoin_groupe_r\022\016\n\006pseudo\030\001 \001(\t\022"
  "\n\n\002id\030\002 \001(\r\"C\n\013Get_history\022\016\n\006pseudo\030\001 \001"
  "(\t\022\022\n\nfirst_game\030\002 \001(\r\022\020\n\010nbr_game\030\003 \001(\r"
  "\"\243\001\n\007History\022\020\n\010pseudo_1\030\001 \001(\t\022\020\n\010pseudo"
  "_2\030\002 \001(\t\022\020\n\010pseudo_3\030\003 \001(\t\022\020\n\010pseudo_4\030\004"
  " \001(\t\022\017\n\007point_1\030\005 \001(\r\022\017\n\007point_2\030\006 \001(\r\022\017"
  "\n\007point_3\030\007 \001(\r\022\017\n\007point_4\030\010 \001(\r\022\014\n\004date"
  "\030\t \001(\r\"&\n\tHistory_r\022\031\n\007history\030\001 \003(\0132\010.H"
  "istory\"4\n\010Get_rank\022\024\n\014first_player\030\001 \001(\r"
  "\022\022\n\nnbr_player\030\002 \001(\r\"\'\n\010rankInfo\022\014\n\004user"
  "\030\001 \001(\t\022\r\n\005point\030\002 \001(\r\"$\n\006Rank_r\022\032\n\007playe"
  "rs\030\001 \003(\0132\t.rankInfo\"\027\n\007Fri_add\022\014\n\004user\030\001"
  " \001(\t\"\027\n\007Fri_rcv\022\014\n\004user\030\001 \001(\t\"*\n\nFri_acc"
  "ept\022\016\n\006accept\030\001 \001(\010\022\014\n\004user\030\002 \001(\t\"\027\n\007Fri"
  "_rmv\022\014\n\004user\030\001 \001(\t\"\030\n\010Fri_ls_r\022\014\n\004user\030\001"
  " \003(\t\"9\n\010Lomb_pos\022\017\n\007id_lomb\030\001 \001(\r\022\r\n\005pos"
  "_x\030\002 \001(\r\022\r\n\005pos_y\030\003 \001(\r\"4\n\003Tir\022\017\n\007id_arm"
  "e\030\001 \001(\r\022\r\n\005force\030\002 \001(\r\022\r\n\005angle\030\003 \001(\001\"E\n"
  "\007Lombric\022\017\n\007id_lomb\030\001 \001(\r\022\r\n\005pos_x\030\002 \001(\r"
  "\022\r\n\005pos_y\030\003 \001(\r\022\013\n\003vie\030\004 \001(\r\" \n\010End_tour"
  "\022\024\n\014id_lomb_mort\030\001 \003(\r\"1\n\014Next_lombric\022\017"
  "\n\007id_lomb\030\001 \001(\r\022\020\n\010is_yours\030\002 \001(\010\"&\n\014inf"
  "oPartie_p\022\026\n\004lomb\030\001 \003(\0132\010.Lombric\"\035\n\013Cre"
  "ate_room\022\016\n\006pseudo\030\001 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_user_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_user_2eproto_sccs[34] = {
  &scc_info_Chat_user_2eproto.base,
  &scc_info_Chat_r_user_2eproto.base,
  &scc_info_Create_room_user_2eproto.base,
  &scc_info_End_tour_user_2eproto.base,
  &scc_info_Fri_accept_user_2eproto.base,
  &scc_info_Fri_add_user_2eproto.base,
  &scc_info_Fri_ls_r_user_2eproto.base,
  &scc_info_Fri_rcv_user_2eproto.base,
  &scc_info_Fri_rmv_user_2eproto.base,
  &scc_info_Get_history_user_2eproto.base,
  &scc_info_Get_rank_user_2eproto.base,
  &scc_info_History_user_2eproto.base,
  &scc_info_History_r_user_2eproto.base,
  &scc_info_Invitation_user_2eproto.base,
  &scc_info_Invitation_r_user_2eproto.base,
  &scc_info_Join_user_2eproto.base,
  &scc_info_Join_groupe_r_user_2eproto.base,
  &scc_info_Join_groupe_s_user_2eproto.base,
  &scc_info_Lomb_mod_user_2eproto.base,
  &scc_info_Lomb_pos_user_2eproto.base,
  &scc_info_Lomb_r_user_2eproto.base,
  &scc_info_Lombric_user_2eproto.base,
  &scc_info_Map_mod_user_2eproto.base,
  &scc_info_Nbr_lomb_mod_user_2eproto.base,
  &scc_info_Next_lombric_user_2eproto.base,
  &scc_info_Rank_r_user_2eproto.base,
  &scc_info_Time_mod_user_2eproto.base,
  &scc_info_Time_round_mod_user_2eproto.base,
  &scc_info_Tir_user_2eproto.base,
  &scc_info_UserConnect_user_2eproto.base,
  &scc_info_Usr_add_user_2eproto.base,
  &scc_info_convo_s_user_2eproto.base,
  &scc_info_infoPartie_p_user_2eproto.base,
  &scc_info_rankInfo_user_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_user_2eproto_once;
static bool descriptor_table_user_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_2eproto = {
  &descriptor_table_user_2eproto_initialized, descriptor_table_protodef_user_2eproto, "user.proto", 1512,
  &descriptor_table_user_2eproto_once, descriptor_table_user_2eproto_sccs, descriptor_table_user_2eproto_deps, 34, 0,
  schemas, file_default_instances, TableStruct_user_2eproto::offsets,
  file_level_metadata_user_2eproto, 34, file_level_enum_descriptors_user_2eproto, file_level_service_descriptors_user_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_user_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_user_2eproto), true);

// ===================================================================

void UserConnect::InitAsDefaultInstance() {
}
class UserConnect::_Internal {
 public:
};

UserConnect::UserConnect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserConnect)
}
UserConnect::UserConnect(const UserConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pseudo().empty()) {
    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  isregister_ = from.isregister_;
  // @@protoc_insertion_point(copy_constructor:UserConnect)
}

void UserConnect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserConnect_user_2eproto.base);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isregister_ = false;
}

UserConnect::~UserConnect() {
  // @@protoc_insertion_point(destructor:UserConnect)
  SharedDtor();
}

void UserConnect::SharedDtor() {
  pseudo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserConnect& UserConnect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserConnect_user_2eproto.base);
  return *internal_default_instance();
}


void UserConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:UserConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isregister_ = false;
  _internal_metadata_.Clear();
}

const char* UserConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isregister = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isregister_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pseudo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pseudo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserConnect.pseudo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserConnect.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserConnect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isregister = 1;
  if (this->isregister() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isregister(), target);
  }

  // string pseudo = 2;
  if (this->pseudo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pseudo().data(), static_cast<int>(this->_internal_pseudo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserConnect.pseudo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pseudo(), target);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserConnect.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserConnect)
  return target;
}

size_t UserConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserConnect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pseudo = 2;
  if (this->pseudo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pseudo());
  }

  // string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // bool isregister = 1;
  if (this->isregister() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserConnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const UserConnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserConnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserConnect)
    MergeFrom(*source);
  }
}

void UserConnect::MergeFrom(const UserConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pseudo().size() > 0) {

    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.isregister() != 0) {
    _internal_set_isregister(from._internal_isregister());
  }
}

void UserConnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserConnect::CopyFrom(const UserConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserConnect::IsInitialized() const {
  return true;
}

void UserConnect::InternalSwap(UserConnect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pseudo_.Swap(&other->pseudo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(isregister_, other->isregister_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserConnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Chat::InitAsDefaultInstance() {
}
class Chat::_Internal {
 public:
};

Chat::Chat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat)
}
Chat::Chat(const Chat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pseudo().empty()) {
    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:Chat)
}

void Chat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Chat_user_2eproto.base);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Chat::~Chat() {
  // @@protoc_insertion_point(destructor:Chat)
  SharedDtor();
}

void Chat::SharedDtor() {
  pseudo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Chat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chat& Chat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Chat_user_2eproto.base);
  return *internal_default_instance();
}


void Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Chat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pseudo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pseudo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Chat.pseudo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Chat.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pseudo = 1;
  if (this->pseudo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pseudo().data(), static_cast<int>(this->_internal_pseudo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Chat.pseudo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pseudo(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Chat.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat)
  return target;
}

size_t Chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pseudo = 1;
  if (this->pseudo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pseudo());
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat)
  GOOGLE_DCHECK_NE(&from, this);
  const Chat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat)
    MergeFrom(*source);
  }
}

void Chat::MergeFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pseudo().size() > 0) {

    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void Chat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chat::CopyFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat::IsInitialized() const {
  return true;
}

void Chat::InternalSwap(Chat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pseudo_.Swap(&other->pseudo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Chat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Chat_r::InitAsDefaultInstance() {
}
class Chat_r::_Internal {
 public:
};

Chat_r::Chat_r()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat_r)
}
Chat_r::Chat_r(const Chat_r& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      msgs_(from.msgs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Chat_r)
}

void Chat_r::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Chat_r_user_2eproto.base);
}

Chat_r::~Chat_r() {
  // @@protoc_insertion_point(destructor:Chat_r)
  SharedDtor();
}

void Chat_r::SharedDtor() {
}

void Chat_r::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chat_r& Chat_r::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Chat_r_user_2eproto.base);
  return *internal_default_instance();
}


void Chat_r::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat_r)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  _internal_metadata_.Clear();
}

const char* Chat_r::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Chat msgs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chat_r::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat_r)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Chat msgs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_msgs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat_r)
  return target;
}

size_t Chat_r::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat_r)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Chat msgs = 1;
  total_size += 1UL * this->_internal_msgs_size();
  for (const auto& msg : this->msgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chat_r::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat_r)
  GOOGLE_DCHECK_NE(&from, this);
  const Chat_r* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chat_r>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat_r)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat_r)
    MergeFrom(*source);
  }
}

void Chat_r::MergeFrom(const Chat_r& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat_r)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
}

void Chat_r::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chat_r::CopyFrom(const Chat_r& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat_r::IsInitialized() const {
  return true;
}

void Chat_r::InternalSwap(Chat_r* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msgs_.InternalSwap(&other->msgs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chat_r::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void convo_s::InitAsDefaultInstance() {
}
class convo_s::_Internal {
 public:
};

convo_s::convo_s()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:convo_s)
}
convo_s::convo_s(const convo_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pseudo().empty()) {
    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
  // @@protoc_insertion_point(copy_constructor:convo_s)
}

void convo_s::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_convo_s_user_2eproto.base);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

convo_s::~convo_s() {
  // @@protoc_insertion_point(destructor:convo_s)
  SharedDtor();
}

void convo_s::SharedDtor() {
  pseudo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void convo_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const convo_s& convo_s::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_convo_s_user_2eproto.base);
  return *internal_default_instance();
}


void convo_s::Clear() {
// @@protoc_insertion_point(message_clear_start:convo_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* convo_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pseudo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pseudo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "convo_s.pseudo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* convo_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:convo_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pseudo = 1;
  if (this->pseudo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pseudo().data(), static_cast<int>(this->_internal_pseudo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "convo_s.pseudo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pseudo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:convo_s)
  return target;
}

size_t convo_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:convo_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pseudo = 1;
  if (this->pseudo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pseudo());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void convo_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:convo_s)
  GOOGLE_DCHECK_NE(&from, this);
  const convo_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<convo_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:convo_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:convo_s)
    MergeFrom(*source);
  }
}

void convo_s::MergeFrom(const convo_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:convo_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pseudo().size() > 0) {

    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
}

void convo_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:convo_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void convo_s::CopyFrom(const convo_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:convo_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool convo_s::IsInitialized() const {
  return true;
}

void convo_s::InternalSwap(convo_s* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pseudo_.Swap(&other->pseudo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata convo_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Invitation::InitAsDefaultInstance() {
}
class Invitation::_Internal {
 public:
};

Invitation::Invitation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Invitation)
}
Invitation::Invitation(const Invitation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pseudo().empty()) {
    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:Invitation)
}

void Invitation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Invitation_user_2eproto.base);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(game_id_));
}

Invitation::~Invitation() {
  // @@protoc_insertion_point(destructor:Invitation)
  SharedDtor();
}

void Invitation::SharedDtor() {
  pseudo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Invitation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Invitation& Invitation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Invitation_user_2eproto.base);
  return *internal_default_instance();
}


void Invitation::Clear() {
// @@protoc_insertion_point(message_clear_start:Invitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(game_id_));
  _internal_metadata_.Clear();
}

const char* Invitation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pseudo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pseudo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Invitation.pseudo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 game_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Invitation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Invitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pseudo = 1;
  if (this->pseudo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pseudo().data(), static_cast<int>(this->_internal_pseudo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Invitation.pseudo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pseudo(), target);
  }

  // bool type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_type(), target);
  }

  // uint32 game_id = 3;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Invitation)
  return target;
}

size_t Invitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Invitation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pseudo = 1;
  if (this->pseudo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pseudo());
  }

  // bool type = 2;
  if (this->type() != 0) {
    total_size += 1 + 1;
  }

  // uint32 game_id = 3;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Invitation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Invitation)
  GOOGLE_DCHECK_NE(&from, this);
  const Invitation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Invitation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Invitation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Invitation)
    MergeFrom(*source);
  }
}

void Invitation::MergeFrom(const Invitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Invitation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pseudo().size() > 0) {

    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void Invitation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Invitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Invitation::CopyFrom(const Invitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Invitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invitation::IsInitialized() const {
  return true;
}

void Invitation::InternalSwap(Invitation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pseudo_.Swap(&other->pseudo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Invitation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Invitation_r::InitAsDefaultInstance() {
}
class Invitation_r::_Internal {
 public:
};

Invitation_r::Invitation_r()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Invitation_r)
}
Invitation_r::Invitation_r(const Invitation_r& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      invits_(from.invits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Invitation_r)
}

void Invitation_r::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Invitation_r_user_2eproto.base);
}

Invitation_r::~Invitation_r() {
  // @@protoc_insertion_point(destructor:Invitation_r)
  SharedDtor();
}

void Invitation_r::SharedDtor() {
}

void Invitation_r::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Invitation_r& Invitation_r::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Invitation_r_user_2eproto.base);
  return *internal_default_instance();
}


void Invitation_r::Clear() {
// @@protoc_insertion_point(message_clear_start:Invitation_r)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invits_.Clear();
  _internal_metadata_.Clear();
}

const char* Invitation_r::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Invitation invits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Invitation_r::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Invitation_r)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Invitation invits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_invits(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Invitation_r)
  return target;
}

size_t Invitation_r::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Invitation_r)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Invitation invits = 1;
  total_size += 1UL * this->_internal_invits_size();
  for (const auto& msg : this->invits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Invitation_r::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Invitation_r)
  GOOGLE_DCHECK_NE(&from, this);
  const Invitation_r* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Invitation_r>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Invitation_r)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Invitation_r)
    MergeFrom(*source);
  }
}

void Invitation_r::MergeFrom(const Invitation_r& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Invitation_r)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invits_.MergeFrom(from.invits_);
}

void Invitation_r::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Invitation_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Invitation_r::CopyFrom(const Invitation_r& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Invitation_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invitation_r::IsInitialized() const {
  return true;
}

void Invitation_r::InternalSwap(Invitation_r* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  invits_.InternalSwap(&other->invits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Invitation_r::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Join::InitAsDefaultInstance() {
}
class Join::_Internal {
 public:
};

Join::Join()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Join)
}
Join::Join(const Join& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pseudo().empty()) {
    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
  accept_ = from.accept_;
  // @@protoc_insertion_point(copy_constructor:Join)
}

void Join::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Join_user_2eproto.base);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accept_ = false;
}

Join::~Join() {
  // @@protoc_insertion_point(destructor:Join)
  SharedDtor();
}

void Join::SharedDtor() {
  pseudo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Join::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Join& Join::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Join_user_2eproto.base);
  return *internal_default_instance();
}


void Join::Clear() {
// @@protoc_insertion_point(message_clear_start:Join)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accept_ = false;
  _internal_metadata_.Clear();
}

const char* Join::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pseudo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pseudo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Join.pseudo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Join::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Join)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pseudo = 1;
  if (this->pseudo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pseudo().data(), static_cast<int>(this->_internal_pseudo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Join.pseudo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pseudo(), target);
  }

  // bool accept = 2;
  if (this->accept() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_accept(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Join)
  return target;
}

size_t Join::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Join)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pseudo = 1;
  if (this->pseudo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pseudo());
  }

  // bool accept = 2;
  if (this->accept() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Join::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Join)
  GOOGLE_DCHECK_NE(&from, this);
  const Join* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Join>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Join)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Join)
    MergeFrom(*source);
  }
}

void Join::MergeFrom(const Join& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Join)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pseudo().size() > 0) {

    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
  if (from.accept() != 0) {
    _internal_set_accept(from._internal_accept());
  }
}

void Join::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Join::CopyFrom(const Join& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Join::IsInitialized() const {
  return true;
}

void Join::InternalSwap(Join* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pseudo_.Swap(&other->pseudo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accept_, other->accept_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Join::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Lomb_r::InitAsDefaultInstance() {
}
class Lomb_r::_Internal {
 public:
};

Lomb_r::Lomb_r()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lomb_r)
}
Lomb_r::Lomb_r(const Lomb_r& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lombs_(from.lombs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Lomb_r)
}

void Lomb_r::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Lomb_r_user_2eproto.base);
}

Lomb_r::~Lomb_r() {
  // @@protoc_insertion_point(destructor:Lomb_r)
  SharedDtor();
}

void Lomb_r::SharedDtor() {
}

void Lomb_r::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lomb_r& Lomb_r::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lomb_r_user_2eproto.base);
  return *internal_default_instance();
}


void Lomb_r::Clear() {
// @@protoc_insertion_point(message_clear_start:Lomb_r)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lombs_.Clear();
  _internal_metadata_.Clear();
}

const char* Lomb_r::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string Lombs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lombs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Lomb_r.Lombs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lomb_r::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lomb_r)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string Lombs = 1;
  for (int i = 0, n = this->_internal_lombs_size(); i < n; i++) {
    const auto& s = this->_internal_lombs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Lomb_r.Lombs");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lomb_r)
  return target;
}

size_t Lomb_r::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lomb_r)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Lombs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(lombs_.size());
  for (int i = 0, n = lombs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      lombs_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lomb_r::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lomb_r)
  GOOGLE_DCHECK_NE(&from, this);
  const Lomb_r* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lomb_r>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lomb_r)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lomb_r)
    MergeFrom(*source);
  }
}

void Lomb_r::MergeFrom(const Lomb_r& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lomb_r)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lombs_.MergeFrom(from.lombs_);
}

void Lomb_r::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lomb_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lomb_r::CopyFrom(const Lomb_r& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lomb_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lomb_r::IsInitialized() const {
  return true;
}

void Lomb_r::InternalSwap(Lomb_r* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lombs_.InternalSwap(&other->lombs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lomb_r::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Lomb_mod::InitAsDefaultInstance() {
}
class Lomb_mod::_Internal {
 public:
};

Lomb_mod::Lomb_mod()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lomb_mod)
}
Lomb_mod::Lomb_mod(const Lomb_mod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_lomb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_lomb().empty()) {
    name_lomb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_lomb_);
  }
  id_lomb_ = from.id_lomb_;
  // @@protoc_insertion_point(copy_constructor:Lomb_mod)
}

void Lomb_mod::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Lomb_mod_user_2eproto.base);
  name_lomb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_lomb_ = 0u;
}

Lomb_mod::~Lomb_mod() {
  // @@protoc_insertion_point(destructor:Lomb_mod)
  SharedDtor();
}

void Lomb_mod::SharedDtor() {
  name_lomb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Lomb_mod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lomb_mod& Lomb_mod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lomb_mod_user_2eproto.base);
  return *internal_default_instance();
}


void Lomb_mod::Clear() {
// @@protoc_insertion_point(message_clear_start:Lomb_mod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_lomb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_lomb_ = 0u;
  _internal_metadata_.Clear();
}

const char* Lomb_mod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id_lomb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_lomb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name_Lomb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name_lomb();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Lomb_mod.name_Lomb"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lomb_mod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lomb_mod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id_lomb = 1;
  if (this->id_lomb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id_lomb(), target);
  }

  // string name_Lomb = 2;
  if (this->name_lomb().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_lomb().data(), static_cast<int>(this->_internal_name_lomb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Lomb_mod.name_Lomb");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name_lomb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lomb_mod)
  return target;
}

size_t Lomb_mod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lomb_mod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name_Lomb = 2;
  if (this->name_lomb().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_lomb());
  }

  // uint32 id_lomb = 1;
  if (this->id_lomb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id_lomb());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lomb_mod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lomb_mod)
  GOOGLE_DCHECK_NE(&from, this);
  const Lomb_mod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lomb_mod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lomb_mod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lomb_mod)
    MergeFrom(*source);
  }
}

void Lomb_mod::MergeFrom(const Lomb_mod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lomb_mod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name_lomb().size() > 0) {

    name_lomb_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_lomb_);
  }
  if (from.id_lomb() != 0) {
    _internal_set_id_lomb(from._internal_id_lomb());
  }
}

void Lomb_mod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lomb_mod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lomb_mod::CopyFrom(const Lomb_mod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lomb_mod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lomb_mod::IsInitialized() const {
  return true;
}

void Lomb_mod::InternalSwap(Lomb_mod* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_lomb_.Swap(&other->name_lomb_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_lomb_, other->id_lomb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lomb_mod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Usr_add::InitAsDefaultInstance() {
}
class Usr_add::_Internal {
 public:
};

Usr_add::Usr_add()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Usr_add)
}
Usr_add::Usr_add(const Usr_add& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pseudo().empty()) {
    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
  // @@protoc_insertion_point(copy_constructor:Usr_add)
}

void Usr_add::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Usr_add_user_2eproto.base);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Usr_add::~Usr_add() {
  // @@protoc_insertion_point(destructor:Usr_add)
  SharedDtor();
}

void Usr_add::SharedDtor() {
  pseudo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Usr_add::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Usr_add& Usr_add::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Usr_add_user_2eproto.base);
  return *internal_default_instance();
}


void Usr_add::Clear() {
// @@protoc_insertion_point(message_clear_start:Usr_add)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Usr_add::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pseudo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pseudo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Usr_add.pseudo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Usr_add::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Usr_add)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pseudo = 1;
  if (this->pseudo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pseudo().data(), static_cast<int>(this->_internal_pseudo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Usr_add.pseudo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pseudo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Usr_add)
  return target;
}

size_t Usr_add::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Usr_add)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pseudo = 1;
  if (this->pseudo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pseudo());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Usr_add::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Usr_add)
  GOOGLE_DCHECK_NE(&from, this);
  const Usr_add* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Usr_add>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Usr_add)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Usr_add)
    MergeFrom(*source);
  }
}

void Usr_add::MergeFrom(const Usr_add& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Usr_add)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pseudo().size() > 0) {

    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
}

void Usr_add::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Usr_add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Usr_add::CopyFrom(const Usr_add& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Usr_add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Usr_add::IsInitialized() const {
  return true;
}

void Usr_add::InternalSwap(Usr_add* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pseudo_.Swap(&other->pseudo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Usr_add::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Map_mod::InitAsDefaultInstance() {
}
class Map_mod::_Internal {
 public:
};

Map_mod::Map_mod()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Map_mod)
}
Map_mod::Map_mod(const Map_mod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Map_mod)
}

void Map_mod::SharedCtor() {
  id_ = 0u;
}

Map_mod::~Map_mod() {
  // @@protoc_insertion_point(destructor:Map_mod)
  SharedDtor();
}

void Map_mod::SharedDtor() {
}

void Map_mod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Map_mod& Map_mod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Map_mod_user_2eproto.base);
  return *internal_default_instance();
}


void Map_mod::Clear() {
// @@protoc_insertion_point(message_clear_start:Map_mod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* Map_mod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Map_mod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Map_mod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Map_mod)
  return target;
}

size_t Map_mod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Map_mod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map_mod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Map_mod)
  GOOGLE_DCHECK_NE(&from, this);
  const Map_mod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Map_mod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Map_mod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Map_mod)
    MergeFrom(*source);
  }
}

void Map_mod::MergeFrom(const Map_mod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Map_mod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Map_mod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Map_mod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map_mod::CopyFrom(const Map_mod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Map_mod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map_mod::IsInitialized() const {
  return true;
}

void Map_mod::InternalSwap(Map_mod* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Map_mod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Time_mod::InitAsDefaultInstance() {
}
class Time_mod::_Internal {
 public:
};

Time_mod::Time_mod()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Time_mod)
}
Time_mod::Time_mod(const Time_mod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:Time_mod)
}

void Time_mod::SharedCtor() {
  time_ = 0u;
}

Time_mod::~Time_mod() {
  // @@protoc_insertion_point(destructor:Time_mod)
  SharedDtor();
}

void Time_mod::SharedDtor() {
}

void Time_mod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Time_mod& Time_mod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Time_mod_user_2eproto.base);
  return *internal_default_instance();
}


void Time_mod::Clear() {
// @@protoc_insertion_point(message_clear_start:Time_mod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_ = 0u;
  _internal_metadata_.Clear();
}

const char* Time_mod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Time_mod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Time_mod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Time_mod)
  return target;
}

size_t Time_mod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Time_mod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Time_mod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Time_mod)
  GOOGLE_DCHECK_NE(&from, this);
  const Time_mod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Time_mod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Time_mod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Time_mod)
    MergeFrom(*source);
  }
}

void Time_mod::MergeFrom(const Time_mod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Time_mod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void Time_mod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Time_mod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time_mod::CopyFrom(const Time_mod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Time_mod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time_mod::IsInitialized() const {
  return true;
}

void Time_mod::InternalSwap(Time_mod* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Time_mod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Time_round_mod::InitAsDefaultInstance() {
}
class Time_round_mod::_Internal {
 public:
};

Time_round_mod::Time_round_mod()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Time_round_mod)
}
Time_round_mod::Time_round_mod(const Time_round_mod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:Time_round_mod)
}

void Time_round_mod::SharedCtor() {
  time_ = 0u;
}

Time_round_mod::~Time_round_mod() {
  // @@protoc_insertion_point(destructor:Time_round_mod)
  SharedDtor();
}

void Time_round_mod::SharedDtor() {
}

void Time_round_mod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Time_round_mod& Time_round_mod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Time_round_mod_user_2eproto.base);
  return *internal_default_instance();
}


void Time_round_mod::Clear() {
// @@protoc_insertion_point(message_clear_start:Time_round_mod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_ = 0u;
  _internal_metadata_.Clear();
}

const char* Time_round_mod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Time_round_mod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Time_round_mod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Time_round_mod)
  return target;
}

size_t Time_round_mod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Time_round_mod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Time_round_mod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Time_round_mod)
  GOOGLE_DCHECK_NE(&from, this);
  const Time_round_mod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Time_round_mod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Time_round_mod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Time_round_mod)
    MergeFrom(*source);
  }
}

void Time_round_mod::MergeFrom(const Time_round_mod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Time_round_mod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void Time_round_mod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Time_round_mod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time_round_mod::CopyFrom(const Time_round_mod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Time_round_mod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time_round_mod::IsInitialized() const {
  return true;
}

void Time_round_mod::InternalSwap(Time_round_mod* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Time_round_mod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Nbr_lomb_mod::InitAsDefaultInstance() {
}
class Nbr_lomb_mod::_Internal {
 public:
};

Nbr_lomb_mod::Nbr_lomb_mod()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nbr_lomb_mod)
}
Nbr_lomb_mod::Nbr_lomb_mod(const Nbr_lomb_mod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nbr_lomb_ = from.nbr_lomb_;
  // @@protoc_insertion_point(copy_constructor:Nbr_lomb_mod)
}

void Nbr_lomb_mod::SharedCtor() {
  nbr_lomb_ = 0u;
}

Nbr_lomb_mod::~Nbr_lomb_mod() {
  // @@protoc_insertion_point(destructor:Nbr_lomb_mod)
  SharedDtor();
}

void Nbr_lomb_mod::SharedDtor() {
}

void Nbr_lomb_mod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Nbr_lomb_mod& Nbr_lomb_mod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Nbr_lomb_mod_user_2eproto.base);
  return *internal_default_instance();
}


void Nbr_lomb_mod::Clear() {
// @@protoc_insertion_point(message_clear_start:Nbr_lomb_mod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nbr_lomb_ = 0u;
  _internal_metadata_.Clear();
}

const char* Nbr_lomb_mod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 nbr_lomb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nbr_lomb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Nbr_lomb_mod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nbr_lomb_mod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nbr_lomb = 1;
  if (this->nbr_lomb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nbr_lomb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nbr_lomb_mod)
  return target;
}

size_t Nbr_lomb_mod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nbr_lomb_mod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 nbr_lomb = 1;
  if (this->nbr_lomb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nbr_lomb());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Nbr_lomb_mod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nbr_lomb_mod)
  GOOGLE_DCHECK_NE(&from, this);
  const Nbr_lomb_mod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Nbr_lomb_mod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nbr_lomb_mod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nbr_lomb_mod)
    MergeFrom(*source);
  }
}

void Nbr_lomb_mod::MergeFrom(const Nbr_lomb_mod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nbr_lomb_mod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nbr_lomb() != 0) {
    _internal_set_nbr_lomb(from._internal_nbr_lomb());
  }
}

void Nbr_lomb_mod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nbr_lomb_mod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nbr_lomb_mod::CopyFrom(const Nbr_lomb_mod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nbr_lomb_mod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nbr_lomb_mod::IsInitialized() const {
  return true;
}

void Nbr_lomb_mod::InternalSwap(Nbr_lomb_mod* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(nbr_lomb_, other->nbr_lomb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Nbr_lomb_mod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Join_groupe_s::InitAsDefaultInstance() {
}
class Join_groupe_s::_Internal {
 public:
};

Join_groupe_s::Join_groupe_s()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Join_groupe_s)
}
Join_groupe_s::Join_groupe_s(const Join_groupe_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Join_groupe_s)
}

void Join_groupe_s::SharedCtor() {
  id_ = 0u;
}

Join_groupe_s::~Join_groupe_s() {
  // @@protoc_insertion_point(destructor:Join_groupe_s)
  SharedDtor();
}

void Join_groupe_s::SharedDtor() {
}

void Join_groupe_s::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Join_groupe_s& Join_groupe_s::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Join_groupe_s_user_2eproto.base);
  return *internal_default_instance();
}


void Join_groupe_s::Clear() {
// @@protoc_insertion_point(message_clear_start:Join_groupe_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* Join_groupe_s::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Join_groupe_s::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Join_groupe_s)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Join_groupe_s)
  return target;
}

size_t Join_groupe_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Join_groupe_s)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Join_groupe_s::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Join_groupe_s)
  GOOGLE_DCHECK_NE(&from, this);
  const Join_groupe_s* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Join_groupe_s>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Join_groupe_s)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Join_groupe_s)
    MergeFrom(*source);
  }
}

void Join_groupe_s::MergeFrom(const Join_groupe_s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Join_groupe_s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Join_groupe_s::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Join_groupe_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Join_groupe_s::CopyFrom(const Join_groupe_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Join_groupe_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Join_groupe_s::IsInitialized() const {
  return true;
}

void Join_groupe_s::InternalSwap(Join_groupe_s* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Join_groupe_s::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Join_groupe_r::InitAsDefaultInstance() {
}
class Join_groupe_r::_Internal {
 public:
};

Join_groupe_r::Join_groupe_r()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Join_groupe_r)
}
Join_groupe_r::Join_groupe_r(const Join_groupe_r& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pseudo().empty()) {
    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Join_groupe_r)
}

void Join_groupe_r::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Join_groupe_r_user_2eproto.base);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

Join_groupe_r::~Join_groupe_r() {
  // @@protoc_insertion_point(destructor:Join_groupe_r)
  SharedDtor();
}

void Join_groupe_r::SharedDtor() {
  pseudo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Join_groupe_r::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Join_groupe_r& Join_groupe_r::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Join_groupe_r_user_2eproto.base);
  return *internal_default_instance();
}


void Join_groupe_r::Clear() {
// @@protoc_insertion_point(message_clear_start:Join_groupe_r)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* Join_groupe_r::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pseudo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pseudo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Join_groupe_r.pseudo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Join_groupe_r::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Join_groupe_r)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pseudo = 1;
  if (this->pseudo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pseudo().data(), static_cast<int>(this->_internal_pseudo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Join_groupe_r.pseudo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pseudo(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Join_groupe_r)
  return target;
}

size_t Join_groupe_r::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Join_groupe_r)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pseudo = 1;
  if (this->pseudo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pseudo());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Join_groupe_r::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Join_groupe_r)
  GOOGLE_DCHECK_NE(&from, this);
  const Join_groupe_r* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Join_groupe_r>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Join_groupe_r)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Join_groupe_r)
    MergeFrom(*source);
  }
}

void Join_groupe_r::MergeFrom(const Join_groupe_r& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Join_groupe_r)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pseudo().size() > 0) {

    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Join_groupe_r::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Join_groupe_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Join_groupe_r::CopyFrom(const Join_groupe_r& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Join_groupe_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Join_groupe_r::IsInitialized() const {
  return true;
}

void Join_groupe_r::InternalSwap(Join_groupe_r* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pseudo_.Swap(&other->pseudo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Join_groupe_r::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Get_history::InitAsDefaultInstance() {
}
class Get_history::_Internal {
 public:
};

Get_history::Get_history()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Get_history)
}
Get_history::Get_history(const Get_history& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pseudo().empty()) {
    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
  ::memcpy(&first_game_, &from.first_game_,
    static_cast<size_t>(reinterpret_cast<char*>(&nbr_game_) -
    reinterpret_cast<char*>(&first_game_)) + sizeof(nbr_game_));
  // @@protoc_insertion_point(copy_constructor:Get_history)
}

void Get_history::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Get_history_user_2eproto.base);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&first_game_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nbr_game_) -
      reinterpret_cast<char*>(&first_game_)) + sizeof(nbr_game_));
}

Get_history::~Get_history() {
  // @@protoc_insertion_point(destructor:Get_history)
  SharedDtor();
}

void Get_history::SharedDtor() {
  pseudo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Get_history::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Get_history& Get_history::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Get_history_user_2eproto.base);
  return *internal_default_instance();
}


void Get_history::Clear() {
// @@protoc_insertion_point(message_clear_start:Get_history)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&first_game_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nbr_game_) -
      reinterpret_cast<char*>(&first_game_)) + sizeof(nbr_game_));
  _internal_metadata_.Clear();
}

const char* Get_history::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pseudo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pseudo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Get_history.pseudo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 first_game = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          first_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nbr_game = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nbr_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Get_history::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Get_history)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pseudo = 1;
  if (this->pseudo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pseudo().data(), static_cast<int>(this->_internal_pseudo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Get_history.pseudo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pseudo(), target);
  }

  // uint32 first_game = 2;
  if (this->first_game() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_first_game(), target);
  }

  // uint32 nbr_game = 3;
  if (this->nbr_game() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nbr_game(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Get_history)
  return target;
}

size_t Get_history::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Get_history)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pseudo = 1;
  if (this->pseudo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pseudo());
  }

  // uint32 first_game = 2;
  if (this->first_game() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_first_game());
  }

  // uint32 nbr_game = 3;
  if (this->nbr_game() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nbr_game());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Get_history::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Get_history)
  GOOGLE_DCHECK_NE(&from, this);
  const Get_history* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Get_history>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Get_history)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Get_history)
    MergeFrom(*source);
  }
}

void Get_history::MergeFrom(const Get_history& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Get_history)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pseudo().size() > 0) {

    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
  if (from.first_game() != 0) {
    _internal_set_first_game(from._internal_first_game());
  }
  if (from.nbr_game() != 0) {
    _internal_set_nbr_game(from._internal_nbr_game());
  }
}

void Get_history::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Get_history)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Get_history::CopyFrom(const Get_history& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Get_history)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Get_history::IsInitialized() const {
  return true;
}

void Get_history::InternalSwap(Get_history* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pseudo_.Swap(&other->pseudo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(first_game_, other->first_game_);
  swap(nbr_game_, other->nbr_game_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Get_history::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void History::InitAsDefaultInstance() {
}
class History::_Internal {
 public:
};

History::History()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:History)
}
History::History(const History& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pseudo_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pseudo_1().empty()) {
    pseudo_1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_1_);
  }
  pseudo_2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pseudo_2().empty()) {
    pseudo_2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_2_);
  }
  pseudo_3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pseudo_3().empty()) {
    pseudo_3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_3_);
  }
  pseudo_4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pseudo_4().empty()) {
    pseudo_4_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_4_);
  }
  ::memcpy(&point_1_, &from.point_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&point_1_)) + sizeof(date_));
  // @@protoc_insertion_point(copy_constructor:History)
}

void History::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_History_user_2eproto.base);
  pseudo_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&point_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_) -
      reinterpret_cast<char*>(&point_1_)) + sizeof(date_));
}

History::~History() {
  // @@protoc_insertion_point(destructor:History)
  SharedDtor();
}

void History::SharedDtor() {
  pseudo_1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void History::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const History& History::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_History_user_2eproto.base);
  return *internal_default_instance();
}


void History::Clear() {
// @@protoc_insertion_point(message_clear_start:History)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pseudo_1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pseudo_4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&point_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_) -
      reinterpret_cast<char*>(&point_1_)) + sizeof(date_));
  _internal_metadata_.Clear();
}

const char* History::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pseudo_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pseudo_1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "History.pseudo_1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pseudo_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pseudo_2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "History.pseudo_2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pseudo_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pseudo_3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "History.pseudo_3"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pseudo_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pseudo_4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "History.pseudo_4"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 point_1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          point_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 point_2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          point_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 point_3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          point_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 point_4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          point_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* History::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:History)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pseudo_1 = 1;
  if (this->pseudo_1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pseudo_1().data(), static_cast<int>(this->_internal_pseudo_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "History.pseudo_1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pseudo_1(), target);
  }

  // string pseudo_2 = 2;
  if (this->pseudo_2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pseudo_2().data(), static_cast<int>(this->_internal_pseudo_2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "History.pseudo_2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pseudo_2(), target);
  }

  // string pseudo_3 = 3;
  if (this->pseudo_3().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pseudo_3().data(), static_cast<int>(this->_internal_pseudo_3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "History.pseudo_3");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pseudo_3(), target);
  }

  // string pseudo_4 = 4;
  if (this->pseudo_4().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pseudo_4().data(), static_cast<int>(this->_internal_pseudo_4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "History.pseudo_4");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pseudo_4(), target);
  }

  // uint32 point_1 = 5;
  if (this->point_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_point_1(), target);
  }

  // uint32 point_2 = 6;
  if (this->point_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_point_2(), target);
  }

  // uint32 point_3 = 7;
  if (this->point_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_point_3(), target);
  }

  // uint32 point_4 = 8;
  if (this->point_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_point_4(), target);
  }

  // uint32 date = 9;
  if (this->date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:History)
  return target;
}

size_t History::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:History)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pseudo_1 = 1;
  if (this->pseudo_1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pseudo_1());
  }

  // string pseudo_2 = 2;
  if (this->pseudo_2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pseudo_2());
  }

  // string pseudo_3 = 3;
  if (this->pseudo_3().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pseudo_3());
  }

  // string pseudo_4 = 4;
  if (this->pseudo_4().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pseudo_4());
  }

  // uint32 point_1 = 5;
  if (this->point_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_point_1());
  }

  // uint32 point_2 = 6;
  if (this->point_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_point_2());
  }

  // uint32 point_3 = 7;
  if (this->point_3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_point_3());
  }

  // uint32 point_4 = 8;
  if (this->point_4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_point_4());
  }

  // uint32 date = 9;
  if (this->date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void History::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:History)
  GOOGLE_DCHECK_NE(&from, this);
  const History* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<History>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:History)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:History)
    MergeFrom(*source);
  }
}

void History::MergeFrom(const History& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:History)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pseudo_1().size() > 0) {

    pseudo_1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_1_);
  }
  if (from.pseudo_2().size() > 0) {

    pseudo_2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_2_);
  }
  if (from.pseudo_3().size() > 0) {

    pseudo_3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_3_);
  }
  if (from.pseudo_4().size() > 0) {

    pseudo_4_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_4_);
  }
  if (from.point_1() != 0) {
    _internal_set_point_1(from._internal_point_1());
  }
  if (from.point_2() != 0) {
    _internal_set_point_2(from._internal_point_2());
  }
  if (from.point_3() != 0) {
    _internal_set_point_3(from._internal_point_3());
  }
  if (from.point_4() != 0) {
    _internal_set_point_4(from._internal_point_4());
  }
  if (from.date() != 0) {
    _internal_set_date(from._internal_date());
  }
}

void History::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:History)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void History::CopyFrom(const History& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:History)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool History::IsInitialized() const {
  return true;
}

void History::InternalSwap(History* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pseudo_1_.Swap(&other->pseudo_1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pseudo_2_.Swap(&other->pseudo_2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pseudo_3_.Swap(&other->pseudo_3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pseudo_4_.Swap(&other->pseudo_4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(point_1_, other->point_1_);
  swap(point_2_, other->point_2_);
  swap(point_3_, other->point_3_);
  swap(point_4_, other->point_4_);
  swap(date_, other->date_);
}

::PROTOBUF_NAMESPACE_ID::Metadata History::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void History_r::InitAsDefaultInstance() {
}
class History_r::_Internal {
 public:
};

History_r::History_r()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:History_r)
}
History_r::History_r(const History_r& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      history_(from.history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:History_r)
}

void History_r::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_History_r_user_2eproto.base);
}

History_r::~History_r() {
  // @@protoc_insertion_point(destructor:History_r)
  SharedDtor();
}

void History_r::SharedDtor() {
}

void History_r::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const History_r& History_r::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_History_r_user_2eproto.base);
  return *internal_default_instance();
}


void History_r::Clear() {
// @@protoc_insertion_point(message_clear_start:History_r)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_.Clear();
  _internal_metadata_.Clear();
}

const char* History_r::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .History history = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* History_r::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:History_r)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .History history = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_history(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:History_r)
  return target;
}

size_t History_r::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:History_r)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .History history = 1;
  total_size += 1UL * this->_internal_history_size();
  for (const auto& msg : this->history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void History_r::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:History_r)
  GOOGLE_DCHECK_NE(&from, this);
  const History_r* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<History_r>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:History_r)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:History_r)
    MergeFrom(*source);
  }
}

void History_r::MergeFrom(const History_r& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:History_r)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_.MergeFrom(from.history_);
}

void History_r::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:History_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void History_r::CopyFrom(const History_r& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:History_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool History_r::IsInitialized() const {
  return true;
}

void History_r::InternalSwap(History_r* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  history_.InternalSwap(&other->history_);
}

::PROTOBUF_NAMESPACE_ID::Metadata History_r::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Get_rank::InitAsDefaultInstance() {
}
class Get_rank::_Internal {
 public:
};

Get_rank::Get_rank()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Get_rank)
}
Get_rank::Get_rank(const Get_rank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&first_player_, &from.first_player_,
    static_cast<size_t>(reinterpret_cast<char*>(&nbr_player_) -
    reinterpret_cast<char*>(&first_player_)) + sizeof(nbr_player_));
  // @@protoc_insertion_point(copy_constructor:Get_rank)
}

void Get_rank::SharedCtor() {
  ::memset(&first_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nbr_player_) -
      reinterpret_cast<char*>(&first_player_)) + sizeof(nbr_player_));
}

Get_rank::~Get_rank() {
  // @@protoc_insertion_point(destructor:Get_rank)
  SharedDtor();
}

void Get_rank::SharedDtor() {
}

void Get_rank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Get_rank& Get_rank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Get_rank_user_2eproto.base);
  return *internal_default_instance();
}


void Get_rank::Clear() {
// @@protoc_insertion_point(message_clear_start:Get_rank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&first_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nbr_player_) -
      reinterpret_cast<char*>(&first_player_)) + sizeof(nbr_player_));
  _internal_metadata_.Clear();
}

const char* Get_rank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 first_player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          first_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nbr_player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nbr_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Get_rank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Get_rank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 first_player = 1;
  if (this->first_player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_first_player(), target);
  }

  // uint32 nbr_player = 2;
  if (this->nbr_player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nbr_player(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Get_rank)
  return target;
}

size_t Get_rank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Get_rank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 first_player = 1;
  if (this->first_player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_first_player());
  }

  // uint32 nbr_player = 2;
  if (this->nbr_player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nbr_player());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Get_rank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Get_rank)
  GOOGLE_DCHECK_NE(&from, this);
  const Get_rank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Get_rank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Get_rank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Get_rank)
    MergeFrom(*source);
  }
}

void Get_rank::MergeFrom(const Get_rank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Get_rank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.first_player() != 0) {
    _internal_set_first_player(from._internal_first_player());
  }
  if (from.nbr_player() != 0) {
    _internal_set_nbr_player(from._internal_nbr_player());
  }
}

void Get_rank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Get_rank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Get_rank::CopyFrom(const Get_rank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Get_rank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Get_rank::IsInitialized() const {
  return true;
}

void Get_rank::InternalSwap(Get_rank* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(first_player_, other->first_player_);
  swap(nbr_player_, other->nbr_player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Get_rank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void rankInfo::InitAsDefaultInstance() {
}
class rankInfo::_Internal {
 public:
};

rankInfo::rankInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankInfo)
}
rankInfo::rankInfo(const rankInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  point_ = from.point_;
  // @@protoc_insertion_point(copy_constructor:rankInfo)
}

void rankInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_rankInfo_user_2eproto.base);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  point_ = 0u;
}

rankInfo::~rankInfo() {
  // @@protoc_insertion_point(destructor:rankInfo)
  SharedDtor();
}

void rankInfo::SharedDtor() {
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void rankInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rankInfo& rankInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_rankInfo_user_2eproto.base);
  return *internal_default_instance();
}


void rankInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  point_ = 0u;
  _internal_metadata_.Clear();
}

const char* rankInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rankInfo.user"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rankInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rankInfo.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  // uint32 point = 2;
  if (this->point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankInfo)
  return target;
}

size_t rankInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // uint32 point = 2;
  if (this->point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rankInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const rankInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rankInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankInfo)
    MergeFrom(*source);
  }
}

void rankInfo::MergeFrom(const rankInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.point() != 0) {
    _internal_set_point(from._internal_point());
  }
}

void rankInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rankInfo::CopyFrom(const rankInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rankInfo::IsInitialized() const {
  return true;
}

void rankInfo::InternalSwap(rankInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(point_, other->point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata rankInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rank_r::InitAsDefaultInstance() {
}
class Rank_r::_Internal {
 public:
};

Rank_r::Rank_r()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rank_r)
}
Rank_r::Rank_r(const Rank_r& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rank_r)
}

void Rank_r::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rank_r_user_2eproto.base);
}

Rank_r::~Rank_r() {
  // @@protoc_insertion_point(destructor:Rank_r)
  SharedDtor();
}

void Rank_r::SharedDtor() {
}

void Rank_r::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rank_r& Rank_r::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rank_r_user_2eproto.base);
  return *internal_default_instance();
}


void Rank_r::Clear() {
// @@protoc_insertion_point(message_clear_start:Rank_r)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear();
}

const char* Rank_r::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .rankInfo players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rank_r::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rank_r)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rankInfo players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rank_r)
  return target;
}

size_t Rank_r::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rank_r)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rankInfo players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rank_r::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rank_r)
  GOOGLE_DCHECK_NE(&from, this);
  const Rank_r* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rank_r>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rank_r)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rank_r)
    MergeFrom(*source);
  }
}

void Rank_r::MergeFrom(const Rank_r& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rank_r)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void Rank_r::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rank_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rank_r::CopyFrom(const Rank_r& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rank_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rank_r::IsInitialized() const {
  return true;
}

void Rank_r::InternalSwap(Rank_r* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rank_r::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Fri_add::InitAsDefaultInstance() {
}
class Fri_add::_Internal {
 public:
};

Fri_add::Fri_add()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Fri_add)
}
Fri_add::Fri_add(const Fri_add& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  // @@protoc_insertion_point(copy_constructor:Fri_add)
}

void Fri_add::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fri_add_user_2eproto.base);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Fri_add::~Fri_add() {
  // @@protoc_insertion_point(destructor:Fri_add)
  SharedDtor();
}

void Fri_add::SharedDtor() {
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Fri_add::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fri_add& Fri_add::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fri_add_user_2eproto.base);
  return *internal_default_instance();
}


void Fri_add::Clear() {
// @@protoc_insertion_point(message_clear_start:Fri_add)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Fri_add::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Fri_add.user"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fri_add::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Fri_add)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Fri_add.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Fri_add)
  return target;
}

size_t Fri_add::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Fri_add)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fri_add::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Fri_add)
  GOOGLE_DCHECK_NE(&from, this);
  const Fri_add* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fri_add>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Fri_add)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Fri_add)
    MergeFrom(*source);
  }
}

void Fri_add::MergeFrom(const Fri_add& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Fri_add)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void Fri_add::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Fri_add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fri_add::CopyFrom(const Fri_add& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Fri_add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fri_add::IsInitialized() const {
  return true;
}

void Fri_add::InternalSwap(Fri_add* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Fri_add::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Fri_rcv::InitAsDefaultInstance() {
}
class Fri_rcv::_Internal {
 public:
};

Fri_rcv::Fri_rcv()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Fri_rcv)
}
Fri_rcv::Fri_rcv(const Fri_rcv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  // @@protoc_insertion_point(copy_constructor:Fri_rcv)
}

void Fri_rcv::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fri_rcv_user_2eproto.base);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Fri_rcv::~Fri_rcv() {
  // @@protoc_insertion_point(destructor:Fri_rcv)
  SharedDtor();
}

void Fri_rcv::SharedDtor() {
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Fri_rcv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fri_rcv& Fri_rcv::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fri_rcv_user_2eproto.base);
  return *internal_default_instance();
}


void Fri_rcv::Clear() {
// @@protoc_insertion_point(message_clear_start:Fri_rcv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Fri_rcv::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Fri_rcv.user"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fri_rcv::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Fri_rcv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Fri_rcv.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Fri_rcv)
  return target;
}

size_t Fri_rcv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Fri_rcv)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fri_rcv::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Fri_rcv)
  GOOGLE_DCHECK_NE(&from, this);
  const Fri_rcv* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fri_rcv>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Fri_rcv)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Fri_rcv)
    MergeFrom(*source);
  }
}

void Fri_rcv::MergeFrom(const Fri_rcv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Fri_rcv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void Fri_rcv::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Fri_rcv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fri_rcv::CopyFrom(const Fri_rcv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Fri_rcv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fri_rcv::IsInitialized() const {
  return true;
}

void Fri_rcv::InternalSwap(Fri_rcv* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Fri_rcv::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Fri_accept::InitAsDefaultInstance() {
}
class Fri_accept::_Internal {
 public:
};

Fri_accept::Fri_accept()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Fri_accept)
}
Fri_accept::Fri_accept(const Fri_accept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  accept_ = from.accept_;
  // @@protoc_insertion_point(copy_constructor:Fri_accept)
}

void Fri_accept::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fri_accept_user_2eproto.base);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accept_ = false;
}

Fri_accept::~Fri_accept() {
  // @@protoc_insertion_point(destructor:Fri_accept)
  SharedDtor();
}

void Fri_accept::SharedDtor() {
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Fri_accept::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fri_accept& Fri_accept::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fri_accept_user_2eproto.base);
  return *internal_default_instance();
}


void Fri_accept::Clear() {
// @@protoc_insertion_point(message_clear_start:Fri_accept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accept_ = false;
  _internal_metadata_.Clear();
}

const char* Fri_accept::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool accept = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Fri_accept.user"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fri_accept::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Fri_accept)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool accept = 1;
  if (this->accept() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_accept(), target);
  }

  // string user = 2;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Fri_accept.user");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Fri_accept)
  return target;
}

size_t Fri_accept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Fri_accept)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 2;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // bool accept = 1;
  if (this->accept() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fri_accept::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Fri_accept)
  GOOGLE_DCHECK_NE(&from, this);
  const Fri_accept* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fri_accept>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Fri_accept)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Fri_accept)
    MergeFrom(*source);
  }
}

void Fri_accept::MergeFrom(const Fri_accept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Fri_accept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.accept() != 0) {
    _internal_set_accept(from._internal_accept());
  }
}

void Fri_accept::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Fri_accept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fri_accept::CopyFrom(const Fri_accept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Fri_accept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fri_accept::IsInitialized() const {
  return true;
}

void Fri_accept::InternalSwap(Fri_accept* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accept_, other->accept_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fri_accept::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Fri_rmv::InitAsDefaultInstance() {
}
class Fri_rmv::_Internal {
 public:
};

Fri_rmv::Fri_rmv()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Fri_rmv)
}
Fri_rmv::Fri_rmv(const Fri_rmv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  // @@protoc_insertion_point(copy_constructor:Fri_rmv)
}

void Fri_rmv::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fri_rmv_user_2eproto.base);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Fri_rmv::~Fri_rmv() {
  // @@protoc_insertion_point(destructor:Fri_rmv)
  SharedDtor();
}

void Fri_rmv::SharedDtor() {
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Fri_rmv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fri_rmv& Fri_rmv::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fri_rmv_user_2eproto.base);
  return *internal_default_instance();
}


void Fri_rmv::Clear() {
// @@protoc_insertion_point(message_clear_start:Fri_rmv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Fri_rmv::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Fri_rmv.user"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fri_rmv::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Fri_rmv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Fri_rmv.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Fri_rmv)
  return target;
}

size_t Fri_rmv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Fri_rmv)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fri_rmv::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Fri_rmv)
  GOOGLE_DCHECK_NE(&from, this);
  const Fri_rmv* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fri_rmv>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Fri_rmv)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Fri_rmv)
    MergeFrom(*source);
  }
}

void Fri_rmv::MergeFrom(const Fri_rmv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Fri_rmv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void Fri_rmv::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Fri_rmv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fri_rmv::CopyFrom(const Fri_rmv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Fri_rmv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fri_rmv::IsInitialized() const {
  return true;
}

void Fri_rmv::InternalSwap(Fri_rmv* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Fri_rmv::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Fri_ls_r::InitAsDefaultInstance() {
}
class Fri_ls_r::_Internal {
 public:
};

Fri_ls_r::Fri_ls_r()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Fri_ls_r)
}
Fri_ls_r::Fri_ls_r(const Fri_ls_r& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      user_(from.user_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Fri_ls_r)
}

void Fri_ls_r::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fri_ls_r_user_2eproto.base);
}

Fri_ls_r::~Fri_ls_r() {
  // @@protoc_insertion_point(destructor:Fri_ls_r)
  SharedDtor();
}

void Fri_ls_r::SharedDtor() {
}

void Fri_ls_r::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fri_ls_r& Fri_ls_r::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fri_ls_r_user_2eproto.base);
  return *internal_default_instance();
}


void Fri_ls_r::Clear() {
// @@protoc_insertion_point(message_clear_start:Fri_ls_r)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.Clear();
  _internal_metadata_.Clear();
}

const char* Fri_ls_r::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Fri_ls_r.user"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fri_ls_r::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Fri_ls_r)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string user = 1;
  for (int i = 0, n = this->_internal_user_size(); i < n; i++) {
    const auto& s = this->_internal_user(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Fri_ls_r.user");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Fri_ls_r)
  return target;
}

size_t Fri_ls_r::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Fri_ls_r)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_.size());
  for (int i = 0, n = user_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fri_ls_r::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Fri_ls_r)
  GOOGLE_DCHECK_NE(&from, this);
  const Fri_ls_r* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fri_ls_r>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Fri_ls_r)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Fri_ls_r)
    MergeFrom(*source);
  }
}

void Fri_ls_r::MergeFrom(const Fri_ls_r& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Fri_ls_r)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_.MergeFrom(from.user_);
}

void Fri_ls_r::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Fri_ls_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fri_ls_r::CopyFrom(const Fri_ls_r& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Fri_ls_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fri_ls_r::IsInitialized() const {
  return true;
}

void Fri_ls_r::InternalSwap(Fri_ls_r* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_.InternalSwap(&other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fri_ls_r::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Lomb_pos::InitAsDefaultInstance() {
}
class Lomb_pos::_Internal {
 public:
};

Lomb_pos::Lomb_pos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lomb_pos)
}
Lomb_pos::Lomb_pos(const Lomb_pos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_lomb_, &from.id_lomb_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_y_) -
    reinterpret_cast<char*>(&id_lomb_)) + sizeof(pos_y_));
  // @@protoc_insertion_point(copy_constructor:Lomb_pos)
}

void Lomb_pos::SharedCtor() {
  ::memset(&id_lomb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_y_) -
      reinterpret_cast<char*>(&id_lomb_)) + sizeof(pos_y_));
}

Lomb_pos::~Lomb_pos() {
  // @@protoc_insertion_point(destructor:Lomb_pos)
  SharedDtor();
}

void Lomb_pos::SharedDtor() {
}

void Lomb_pos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lomb_pos& Lomb_pos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lomb_pos_user_2eproto.base);
  return *internal_default_instance();
}


void Lomb_pos::Clear() {
// @@protoc_insertion_point(message_clear_start:Lomb_pos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_lomb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_y_) -
      reinterpret_cast<char*>(&id_lomb_)) + sizeof(pos_y_));
  _internal_metadata_.Clear();
}

const char* Lomb_pos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id_lomb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_lomb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pos_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pos_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lomb_pos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lomb_pos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id_lomb = 1;
  if (this->id_lomb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id_lomb(), target);
  }

  // uint32 pos_x = 2;
  if (this->pos_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pos_x(), target);
  }

  // uint32 pos_y = 3;
  if (this->pos_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pos_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lomb_pos)
  return target;
}

size_t Lomb_pos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lomb_pos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id_lomb = 1;
  if (this->id_lomb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id_lomb());
  }

  // uint32 pos_x = 2;
  if (this->pos_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pos_x());
  }

  // uint32 pos_y = 3;
  if (this->pos_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pos_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lomb_pos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lomb_pos)
  GOOGLE_DCHECK_NE(&from, this);
  const Lomb_pos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lomb_pos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lomb_pos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lomb_pos)
    MergeFrom(*source);
  }
}

void Lomb_pos::MergeFrom(const Lomb_pos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lomb_pos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id_lomb() != 0) {
    _internal_set_id_lomb(from._internal_id_lomb());
  }
  if (from.pos_x() != 0) {
    _internal_set_pos_x(from._internal_pos_x());
  }
  if (from.pos_y() != 0) {
    _internal_set_pos_y(from._internal_pos_y());
  }
}

void Lomb_pos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lomb_pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lomb_pos::CopyFrom(const Lomb_pos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lomb_pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lomb_pos::IsInitialized() const {
  return true;
}

void Lomb_pos::InternalSwap(Lomb_pos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_lomb_, other->id_lomb_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lomb_pos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tir::InitAsDefaultInstance() {
}
class Tir::_Internal {
 public:
};

Tir::Tir()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tir)
}
Tir::Tir(const Tir& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_arme_, &from.id_arme_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&id_arme_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:Tir)
}

void Tir::SharedCtor() {
  ::memset(&id_arme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&id_arme_)) + sizeof(angle_));
}

Tir::~Tir() {
  // @@protoc_insertion_point(destructor:Tir)
  SharedDtor();
}

void Tir::SharedDtor() {
}

void Tir::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tir& Tir::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tir_user_2eproto.base);
  return *internal_default_instance();
}


void Tir::Clear() {
// @@protoc_insertion_point(message_clear_start:Tir)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_arme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&id_arme_)) + sizeof(angle_));
  _internal_metadata_.Clear();
}

const char* Tir::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id_arme = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_arme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 force = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tir::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tir)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id_arme = 1;
  if (this->id_arme() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id_arme(), target);
  }

  // uint32 force = 2;
  if (this->force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_force(), target);
  }

  // double angle = 3;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tir)
  return target;
}

size_t Tir::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tir)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id_arme = 1;
  if (this->id_arme() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id_arme());
  }

  // uint32 force = 2;
  if (this->force() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_force());
  }

  // double angle = 3;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tir::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tir)
  GOOGLE_DCHECK_NE(&from, this);
  const Tir* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tir>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tir)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tir)
    MergeFrom(*source);
  }
}

void Tir::MergeFrom(const Tir& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tir)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id_arme() != 0) {
    _internal_set_id_arme(from._internal_id_arme());
  }
  if (from.force() != 0) {
    _internal_set_force(from._internal_force());
  }
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
}

void Tir::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tir::CopyFrom(const Tir& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tir::IsInitialized() const {
  return true;
}

void Tir::InternalSwap(Tir* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_arme_, other->id_arme_);
  swap(force_, other->force_);
  swap(angle_, other->angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tir::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Lombric::InitAsDefaultInstance() {
}
class Lombric::_Internal {
 public:
};

Lombric::Lombric()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lombric)
}
Lombric::Lombric(const Lombric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_lomb_, &from.id_lomb_,
    static_cast<size_t>(reinterpret_cast<char*>(&vie_) -
    reinterpret_cast<char*>(&id_lomb_)) + sizeof(vie_));
  // @@protoc_insertion_point(copy_constructor:Lombric)
}

void Lombric::SharedCtor() {
  ::memset(&id_lomb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vie_) -
      reinterpret_cast<char*>(&id_lomb_)) + sizeof(vie_));
}

Lombric::~Lombric() {
  // @@protoc_insertion_point(destructor:Lombric)
  SharedDtor();
}

void Lombric::SharedDtor() {
}

void Lombric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lombric& Lombric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lombric_user_2eproto.base);
  return *internal_default_instance();
}


void Lombric::Clear() {
// @@protoc_insertion_point(message_clear_start:Lombric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_lomb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vie_) -
      reinterpret_cast<char*>(&id_lomb_)) + sizeof(vie_));
  _internal_metadata_.Clear();
}

const char* Lombric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id_lomb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_lomb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pos_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pos_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 vie = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lombric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lombric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id_lomb = 1;
  if (this->id_lomb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id_lomb(), target);
  }

  // uint32 pos_x = 2;
  if (this->pos_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pos_x(), target);
  }

  // uint32 pos_y = 3;
  if (this->pos_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pos_y(), target);
  }

  // uint32 vie = 4;
  if (this->vie() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_vie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lombric)
  return target;
}

size_t Lombric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lombric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id_lomb = 1;
  if (this->id_lomb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id_lomb());
  }

  // uint32 pos_x = 2;
  if (this->pos_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pos_x());
  }

  // uint32 pos_y = 3;
  if (this->pos_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pos_y());
  }

  // uint32 vie = 4;
  if (this->vie() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vie());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lombric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lombric)
  GOOGLE_DCHECK_NE(&from, this);
  const Lombric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lombric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lombric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lombric)
    MergeFrom(*source);
  }
}

void Lombric::MergeFrom(const Lombric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lombric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id_lomb() != 0) {
    _internal_set_id_lomb(from._internal_id_lomb());
  }
  if (from.pos_x() != 0) {
    _internal_set_pos_x(from._internal_pos_x());
  }
  if (from.pos_y() != 0) {
    _internal_set_pos_y(from._internal_pos_y());
  }
  if (from.vie() != 0) {
    _internal_set_vie(from._internal_vie());
  }
}

void Lombric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lombric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lombric::CopyFrom(const Lombric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lombric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lombric::IsInitialized() const {
  return true;
}

void Lombric::InternalSwap(Lombric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_lomb_, other->id_lomb_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(vie_, other->vie_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lombric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void End_tour::InitAsDefaultInstance() {
}
class End_tour::_Internal {
 public:
};

End_tour::End_tour()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:End_tour)
}
End_tour::End_tour(const End_tour& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      id_lomb_mort_(from.id_lomb_mort_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:End_tour)
}

void End_tour::SharedCtor() {
}

End_tour::~End_tour() {
  // @@protoc_insertion_point(destructor:End_tour)
  SharedDtor();
}

void End_tour::SharedDtor() {
}

void End_tour::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const End_tour& End_tour::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_End_tour_user_2eproto.base);
  return *internal_default_instance();
}


void End_tour::Clear() {
// @@protoc_insertion_point(message_clear_start:End_tour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_lomb_mort_.Clear();
  _internal_metadata_.Clear();
}

const char* End_tour::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 id_lomb_mort = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_id_lomb_mort(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_id_lomb_mort(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* End_tour::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:End_tour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 id_lomb_mort = 1;
  {
    int byte_size = _id_lomb_mort_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_id_lomb_mort(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:End_tour)
  return target;
}

size_t End_tour::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:End_tour)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 id_lomb_mort = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->id_lomb_mort_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_lomb_mort_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void End_tour::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:End_tour)
  GOOGLE_DCHECK_NE(&from, this);
  const End_tour* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<End_tour>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:End_tour)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:End_tour)
    MergeFrom(*source);
  }
}

void End_tour::MergeFrom(const End_tour& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:End_tour)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_lomb_mort_.MergeFrom(from.id_lomb_mort_);
}

void End_tour::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:End_tour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void End_tour::CopyFrom(const End_tour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:End_tour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool End_tour::IsInitialized() const {
  return true;
}

void End_tour::InternalSwap(End_tour* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_lomb_mort_.InternalSwap(&other->id_lomb_mort_);
}

::PROTOBUF_NAMESPACE_ID::Metadata End_tour::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Next_lombric::InitAsDefaultInstance() {
}
class Next_lombric::_Internal {
 public:
};

Next_lombric::Next_lombric()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Next_lombric)
}
Next_lombric::Next_lombric(const Next_lombric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_lomb_, &from.id_lomb_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_yours_) -
    reinterpret_cast<char*>(&id_lomb_)) + sizeof(is_yours_));
  // @@protoc_insertion_point(copy_constructor:Next_lombric)
}

void Next_lombric::SharedCtor() {
  ::memset(&id_lomb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_yours_) -
      reinterpret_cast<char*>(&id_lomb_)) + sizeof(is_yours_));
}

Next_lombric::~Next_lombric() {
  // @@protoc_insertion_point(destructor:Next_lombric)
  SharedDtor();
}

void Next_lombric::SharedDtor() {
}

void Next_lombric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Next_lombric& Next_lombric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Next_lombric_user_2eproto.base);
  return *internal_default_instance();
}


void Next_lombric::Clear() {
// @@protoc_insertion_point(message_clear_start:Next_lombric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_lomb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_yours_) -
      reinterpret_cast<char*>(&id_lomb_)) + sizeof(is_yours_));
  _internal_metadata_.Clear();
}

const char* Next_lombric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id_lomb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_lomb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_yours = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_yours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Next_lombric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Next_lombric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id_lomb = 1;
  if (this->id_lomb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id_lomb(), target);
  }

  // bool is_yours = 2;
  if (this->is_yours() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_yours(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Next_lombric)
  return target;
}

size_t Next_lombric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Next_lombric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id_lomb = 1;
  if (this->id_lomb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id_lomb());
  }

  // bool is_yours = 2;
  if (this->is_yours() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Next_lombric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Next_lombric)
  GOOGLE_DCHECK_NE(&from, this);
  const Next_lombric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Next_lombric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Next_lombric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Next_lombric)
    MergeFrom(*source);
  }
}

void Next_lombric::MergeFrom(const Next_lombric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Next_lombric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id_lomb() != 0) {
    _internal_set_id_lomb(from._internal_id_lomb());
  }
  if (from.is_yours() != 0) {
    _internal_set_is_yours(from._internal_is_yours());
  }
}

void Next_lombric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Next_lombric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Next_lombric::CopyFrom(const Next_lombric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Next_lombric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Next_lombric::IsInitialized() const {
  return true;
}

void Next_lombric::InternalSwap(Next_lombric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_lomb_, other->id_lomb_);
  swap(is_yours_, other->is_yours_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Next_lombric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void infoPartie_p::InitAsDefaultInstance() {
}
class infoPartie_p::_Internal {
 public:
};

infoPartie_p::infoPartie_p()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:infoPartie_p)
}
infoPartie_p::infoPartie_p(const infoPartie_p& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lomb_(from.lomb_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:infoPartie_p)
}

void infoPartie_p::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_infoPartie_p_user_2eproto.base);
}

infoPartie_p::~infoPartie_p() {
  // @@protoc_insertion_point(destructor:infoPartie_p)
  SharedDtor();
}

void infoPartie_p::SharedDtor() {
}

void infoPartie_p::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const infoPartie_p& infoPartie_p::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_infoPartie_p_user_2eproto.base);
  return *internal_default_instance();
}


void infoPartie_p::Clear() {
// @@protoc_insertion_point(message_clear_start:infoPartie_p)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lomb_.Clear();
  _internal_metadata_.Clear();
}

const char* infoPartie_p::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Lombric lomb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lomb(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* infoPartie_p::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoPartie_p)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Lombric lomb = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lomb_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lomb(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoPartie_p)
  return target;
}

size_t infoPartie_p::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoPartie_p)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Lombric lomb = 1;
  total_size += 1UL * this->_internal_lomb_size();
  for (const auto& msg : this->lomb_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void infoPartie_p::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoPartie_p)
  GOOGLE_DCHECK_NE(&from, this);
  const infoPartie_p* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<infoPartie_p>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoPartie_p)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoPartie_p)
    MergeFrom(*source);
  }
}

void infoPartie_p::MergeFrom(const infoPartie_p& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoPartie_p)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lomb_.MergeFrom(from.lomb_);
}

void infoPartie_p::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoPartie_p)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void infoPartie_p::CopyFrom(const infoPartie_p& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoPartie_p)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool infoPartie_p::IsInitialized() const {
  return true;
}

void infoPartie_p::InternalSwap(infoPartie_p* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lomb_.InternalSwap(&other->lomb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata infoPartie_p::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Create_room::InitAsDefaultInstance() {
}
class Create_room::_Internal {
 public:
};

Create_room::Create_room()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Create_room)
}
Create_room::Create_room(const Create_room& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pseudo().empty()) {
    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
  // @@protoc_insertion_point(copy_constructor:Create_room)
}

void Create_room::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Create_room_user_2eproto.base);
  pseudo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Create_room::~Create_room() {
  // @@protoc_insertion_point(destructor:Create_room)
  SharedDtor();
}

void Create_room::SharedDtor() {
  pseudo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Create_room::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Create_room& Create_room::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Create_room_user_2eproto.base);
  return *internal_default_instance();
}


void Create_room::Clear() {
// @@protoc_insertion_point(message_clear_start:Create_room)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Create_room::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pseudo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pseudo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Create_room.pseudo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Create_room::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Create_room)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pseudo = 1;
  if (this->pseudo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pseudo().data(), static_cast<int>(this->_internal_pseudo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Create_room.pseudo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pseudo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Create_room)
  return target;
}

size_t Create_room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Create_room)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pseudo = 1;
  if (this->pseudo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pseudo());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Create_room::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Create_room)
  GOOGLE_DCHECK_NE(&from, this);
  const Create_room* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Create_room>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Create_room)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Create_room)
    MergeFrom(*source);
  }
}

void Create_room::MergeFrom(const Create_room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Create_room)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pseudo().size() > 0) {

    pseudo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pseudo_);
  }
}

void Create_room::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Create_room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Create_room::CopyFrom(const Create_room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Create_room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Create_room::IsInitialized() const {
  return true;
}

void Create_room::InternalSwap(Create_room* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pseudo_.Swap(&other->pseudo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Create_room::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UserConnect* Arena::CreateMaybeMessage< ::UserConnect >(Arena* arena) {
  return Arena::CreateInternal< ::UserConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat* Arena::CreateMaybeMessage< ::Chat >(Arena* arena) {
  return Arena::CreateInternal< ::Chat >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat_r* Arena::CreateMaybeMessage< ::Chat_r >(Arena* arena) {
  return Arena::CreateInternal< ::Chat_r >(arena);
}
template<> PROTOBUF_NOINLINE ::convo_s* Arena::CreateMaybeMessage< ::convo_s >(Arena* arena) {
  return Arena::CreateInternal< ::convo_s >(arena);
}
template<> PROTOBUF_NOINLINE ::Invitation* Arena::CreateMaybeMessage< ::Invitation >(Arena* arena) {
  return Arena::CreateInternal< ::Invitation >(arena);
}
template<> PROTOBUF_NOINLINE ::Invitation_r* Arena::CreateMaybeMessage< ::Invitation_r >(Arena* arena) {
  return Arena::CreateInternal< ::Invitation_r >(arena);
}
template<> PROTOBUF_NOINLINE ::Join* Arena::CreateMaybeMessage< ::Join >(Arena* arena) {
  return Arena::CreateInternal< ::Join >(arena);
}
template<> PROTOBUF_NOINLINE ::Lomb_r* Arena::CreateMaybeMessage< ::Lomb_r >(Arena* arena) {
  return Arena::CreateInternal< ::Lomb_r >(arena);
}
template<> PROTOBUF_NOINLINE ::Lomb_mod* Arena::CreateMaybeMessage< ::Lomb_mod >(Arena* arena) {
  return Arena::CreateInternal< ::Lomb_mod >(arena);
}
template<> PROTOBUF_NOINLINE ::Usr_add* Arena::CreateMaybeMessage< ::Usr_add >(Arena* arena) {
  return Arena::CreateInternal< ::Usr_add >(arena);
}
template<> PROTOBUF_NOINLINE ::Map_mod* Arena::CreateMaybeMessage< ::Map_mod >(Arena* arena) {
  return Arena::CreateInternal< ::Map_mod >(arena);
}
template<> PROTOBUF_NOINLINE ::Time_mod* Arena::CreateMaybeMessage< ::Time_mod >(Arena* arena) {
  return Arena::CreateInternal< ::Time_mod >(arena);
}
template<> PROTOBUF_NOINLINE ::Time_round_mod* Arena::CreateMaybeMessage< ::Time_round_mod >(Arena* arena) {
  return Arena::CreateInternal< ::Time_round_mod >(arena);
}
template<> PROTOBUF_NOINLINE ::Nbr_lomb_mod* Arena::CreateMaybeMessage< ::Nbr_lomb_mod >(Arena* arena) {
  return Arena::CreateInternal< ::Nbr_lomb_mod >(arena);
}
template<> PROTOBUF_NOINLINE ::Join_groupe_s* Arena::CreateMaybeMessage< ::Join_groupe_s >(Arena* arena) {
  return Arena::CreateInternal< ::Join_groupe_s >(arena);
}
template<> PROTOBUF_NOINLINE ::Join_groupe_r* Arena::CreateMaybeMessage< ::Join_groupe_r >(Arena* arena) {
  return Arena::CreateInternal< ::Join_groupe_r >(arena);
}
template<> PROTOBUF_NOINLINE ::Get_history* Arena::CreateMaybeMessage< ::Get_history >(Arena* arena) {
  return Arena::CreateInternal< ::Get_history >(arena);
}
template<> PROTOBUF_NOINLINE ::History* Arena::CreateMaybeMessage< ::History >(Arena* arena) {
  return Arena::CreateInternal< ::History >(arena);
}
template<> PROTOBUF_NOINLINE ::History_r* Arena::CreateMaybeMessage< ::History_r >(Arena* arena) {
  return Arena::CreateInternal< ::History_r >(arena);
}
template<> PROTOBUF_NOINLINE ::Get_rank* Arena::CreateMaybeMessage< ::Get_rank >(Arena* arena) {
  return Arena::CreateInternal< ::Get_rank >(arena);
}
template<> PROTOBUF_NOINLINE ::rankInfo* Arena::CreateMaybeMessage< ::rankInfo >(Arena* arena) {
  return Arena::CreateInternal< ::rankInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Rank_r* Arena::CreateMaybeMessage< ::Rank_r >(Arena* arena) {
  return Arena::CreateInternal< ::Rank_r >(arena);
}
template<> PROTOBUF_NOINLINE ::Fri_add* Arena::CreateMaybeMessage< ::Fri_add >(Arena* arena) {
  return Arena::CreateInternal< ::Fri_add >(arena);
}
template<> PROTOBUF_NOINLINE ::Fri_rcv* Arena::CreateMaybeMessage< ::Fri_rcv >(Arena* arena) {
  return Arena::CreateInternal< ::Fri_rcv >(arena);
}
template<> PROTOBUF_NOINLINE ::Fri_accept* Arena::CreateMaybeMessage< ::Fri_accept >(Arena* arena) {
  return Arena::CreateInternal< ::Fri_accept >(arena);
}
template<> PROTOBUF_NOINLINE ::Fri_rmv* Arena::CreateMaybeMessage< ::Fri_rmv >(Arena* arena) {
  return Arena::CreateInternal< ::Fri_rmv >(arena);
}
template<> PROTOBUF_NOINLINE ::Fri_ls_r* Arena::CreateMaybeMessage< ::Fri_ls_r >(Arena* arena) {
  return Arena::CreateInternal< ::Fri_ls_r >(arena);
}
template<> PROTOBUF_NOINLINE ::Lomb_pos* Arena::CreateMaybeMessage< ::Lomb_pos >(Arena* arena) {
  return Arena::CreateInternal< ::Lomb_pos >(arena);
}
template<> PROTOBUF_NOINLINE ::Tir* Arena::CreateMaybeMessage< ::Tir >(Arena* arena) {
  return Arena::CreateInternal< ::Tir >(arena);
}
template<> PROTOBUF_NOINLINE ::Lombric* Arena::CreateMaybeMessage< ::Lombric >(Arena* arena) {
  return Arena::CreateInternal< ::Lombric >(arena);
}
template<> PROTOBUF_NOINLINE ::End_tour* Arena::CreateMaybeMessage< ::End_tour >(Arena* arena) {
  return Arena::CreateInternal< ::End_tour >(arena);
}
template<> PROTOBUF_NOINLINE ::Next_lombric* Arena::CreateMaybeMessage< ::Next_lombric >(Arena* arena) {
  return Arena::CreateInternal< ::Next_lombric >(arena);
}
template<> PROTOBUF_NOINLINE ::infoPartie_p* Arena::CreateMaybeMessage< ::infoPartie_p >(Arena* arena) {
  return Arena::CreateInternal< ::infoPartie_p >(arena);
}
template<> PROTOBUF_NOINLINE ::Create_room* Arena::CreateMaybeMessage< ::Create_room >(Arena* arena) {
  return Arena::CreateInternal< ::Create_room >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
