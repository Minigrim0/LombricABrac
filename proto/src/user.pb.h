// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[43]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_2eproto;
class Block_Destroy;
class Block_DestroyDefaultTypeInternal;
extern Block_DestroyDefaultTypeInternal _Block_Destroy_default_instance_;
class Chat;
class ChatDefaultTypeInternal;
extern ChatDefaultTypeInternal _Chat_default_instance_;
class Chat_broker;
class Chat_brokerDefaultTypeInternal;
extern Chat_brokerDefaultTypeInternal _Chat_broker_default_instance_;
class Chat_r;
class Chat_rDefaultTypeInternal;
extern Chat_rDefaultTypeInternal _Chat_r_default_instance_;
class Create_room;
class Create_roomDefaultTypeInternal;
extern Create_roomDefaultTypeInternal _Create_room_default_instance_;
class Create_room_id;
class Create_room_idDefaultTypeInternal;
extern Create_room_idDefaultTypeInternal _Create_room_id_default_instance_;
class Degats_lombric;
class Degats_lombricDefaultTypeInternal;
extern Degats_lombricDefaultTypeInternal _Degats_lombric_default_instance_;
class End_tour;
class End_tourDefaultTypeInternal;
extern End_tourDefaultTypeInternal _End_tour_default_instance_;
class Fri_accept;
class Fri_acceptDefaultTypeInternal;
extern Fri_acceptDefaultTypeInternal _Fri_accept_default_instance_;
class Fri_add;
class Fri_addDefaultTypeInternal;
extern Fri_addDefaultTypeInternal _Fri_add_default_instance_;
class Fri_ls_r;
class Fri_ls_rDefaultTypeInternal;
extern Fri_ls_rDefaultTypeInternal _Fri_ls_r_default_instance_;
class Fri_rcv;
class Fri_rcvDefaultTypeInternal;
extern Fri_rcvDefaultTypeInternal _Fri_rcv_default_instance_;
class Fri_rmv;
class Fri_rmvDefaultTypeInternal;
extern Fri_rmvDefaultTypeInternal _Fri_rmv_default_instance_;
class Get_history;
class Get_historyDefaultTypeInternal;
extern Get_historyDefaultTypeInternal _Get_history_default_instance_;
class Get_rank;
class Get_rankDefaultTypeInternal;
extern Get_rankDefaultTypeInternal _Get_rank_default_instance_;
class History;
class HistoryDefaultTypeInternal;
extern HistoryDefaultTypeInternal _History_default_instance_;
class History_r;
class History_rDefaultTypeInternal;
extern History_rDefaultTypeInternal _History_r_default_instance_;
class Invitation;
class InvitationDefaultTypeInternal;
extern InvitationDefaultTypeInternal _Invitation_default_instance_;
class Invitation_r;
class Invitation_rDefaultTypeInternal;
extern Invitation_rDefaultTypeInternal _Invitation_r_default_instance_;
class Join;
class JoinDefaultTypeInternal;
extern JoinDefaultTypeInternal _Join_default_instance_;
class Join_groupe_r;
class Join_groupe_rDefaultTypeInternal;
extern Join_groupe_rDefaultTypeInternal _Join_groupe_r_default_instance_;
class Join_groupe_s;
class Join_groupe_sDefaultTypeInternal;
extern Join_groupe_sDefaultTypeInternal _Join_groupe_s_default_instance_;
class List_Projectiles;
class List_ProjectilesDefaultTypeInternal;
extern List_ProjectilesDefaultTypeInternal _List_Projectiles_default_instance_;
class Lomb_mod;
class Lomb_modDefaultTypeInternal;
extern Lomb_modDefaultTypeInternal _Lomb_mod_default_instance_;
class Lomb_pos;
class Lomb_posDefaultTypeInternal;
extern Lomb_posDefaultTypeInternal _Lomb_pos_default_instance_;
class Lomb_r;
class Lomb_rDefaultTypeInternal;
extern Lomb_rDefaultTypeInternal _Lomb_r_default_instance_;
class Lombric;
class LombricDefaultTypeInternal;
extern LombricDefaultTypeInternal _Lombric_default_instance_;
class Map_mod;
class Map_modDefaultTypeInternal;
extern Map_modDefaultTypeInternal _Map_mod_default_instance_;
class Nbr_eq_mod;
class Nbr_eq_modDefaultTypeInternal;
extern Nbr_eq_modDefaultTypeInternal _Nbr_eq_mod_default_instance_;
class Nbr_lomb_mod;
class Nbr_lomb_modDefaultTypeInternal;
extern Nbr_lomb_modDefaultTypeInternal _Nbr_lomb_mod_default_instance_;
class Next_lombric;
class Next_lombricDefaultTypeInternal;
extern Next_lombricDefaultTypeInternal _Next_lombric_default_instance_;
class Projectiles;
class ProjectilesDefaultTypeInternal;
extern ProjectilesDefaultTypeInternal _Projectiles_default_instance_;
class Rank_r;
class Rank_rDefaultTypeInternal;
extern Rank_rDefaultTypeInternal _Rank_r_default_instance_;
class Time_mod;
class Time_modDefaultTypeInternal;
extern Time_modDefaultTypeInternal _Time_mod_default_instance_;
class Time_round_mod;
class Time_round_modDefaultTypeInternal;
extern Time_round_modDefaultTypeInternal _Time_round_mod_default_instance_;
class Tir;
class TirDefaultTypeInternal;
extern TirDefaultTypeInternal _Tir_default_instance_;
class UserConnect;
class UserConnectDefaultTypeInternal;
extern UserConnectDefaultTypeInternal _UserConnect_default_instance_;
class Usr_add;
class Usr_addDefaultTypeInternal;
extern Usr_addDefaultTypeInternal _Usr_add_default_instance_;
class ZMQ_msg;
class ZMQ_msgDefaultTypeInternal;
extern ZMQ_msgDefaultTypeInternal _ZMQ_msg_default_instance_;
class convo_s;
class convo_sDefaultTypeInternal;
extern convo_sDefaultTypeInternal _convo_s_default_instance_;
class infoPartie_p;
class infoPartie_pDefaultTypeInternal;
extern infoPartie_pDefaultTypeInternal _infoPartie_p_default_instance_;
class infoRoom;
class infoRoomDefaultTypeInternal;
extern infoRoomDefaultTypeInternal _infoRoom_default_instance_;
class rankInfo;
class rankInfoDefaultTypeInternal;
extern rankInfoDefaultTypeInternal _rankInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Block_Destroy* Arena::CreateMaybeMessage<::Block_Destroy>(Arena*);
template<> ::Chat* Arena::CreateMaybeMessage<::Chat>(Arena*);
template<> ::Chat_broker* Arena::CreateMaybeMessage<::Chat_broker>(Arena*);
template<> ::Chat_r* Arena::CreateMaybeMessage<::Chat_r>(Arena*);
template<> ::Create_room* Arena::CreateMaybeMessage<::Create_room>(Arena*);
template<> ::Create_room_id* Arena::CreateMaybeMessage<::Create_room_id>(Arena*);
template<> ::Degats_lombric* Arena::CreateMaybeMessage<::Degats_lombric>(Arena*);
template<> ::End_tour* Arena::CreateMaybeMessage<::End_tour>(Arena*);
template<> ::Fri_accept* Arena::CreateMaybeMessage<::Fri_accept>(Arena*);
template<> ::Fri_add* Arena::CreateMaybeMessage<::Fri_add>(Arena*);
template<> ::Fri_ls_r* Arena::CreateMaybeMessage<::Fri_ls_r>(Arena*);
template<> ::Fri_rcv* Arena::CreateMaybeMessage<::Fri_rcv>(Arena*);
template<> ::Fri_rmv* Arena::CreateMaybeMessage<::Fri_rmv>(Arena*);
template<> ::Get_history* Arena::CreateMaybeMessage<::Get_history>(Arena*);
template<> ::Get_rank* Arena::CreateMaybeMessage<::Get_rank>(Arena*);
template<> ::History* Arena::CreateMaybeMessage<::History>(Arena*);
template<> ::History_r* Arena::CreateMaybeMessage<::History_r>(Arena*);
template<> ::Invitation* Arena::CreateMaybeMessage<::Invitation>(Arena*);
template<> ::Invitation_r* Arena::CreateMaybeMessage<::Invitation_r>(Arena*);
template<> ::Join* Arena::CreateMaybeMessage<::Join>(Arena*);
template<> ::Join_groupe_r* Arena::CreateMaybeMessage<::Join_groupe_r>(Arena*);
template<> ::Join_groupe_s* Arena::CreateMaybeMessage<::Join_groupe_s>(Arena*);
template<> ::List_Projectiles* Arena::CreateMaybeMessage<::List_Projectiles>(Arena*);
template<> ::Lomb_mod* Arena::CreateMaybeMessage<::Lomb_mod>(Arena*);
template<> ::Lomb_pos* Arena::CreateMaybeMessage<::Lomb_pos>(Arena*);
template<> ::Lomb_r* Arena::CreateMaybeMessage<::Lomb_r>(Arena*);
template<> ::Lombric* Arena::CreateMaybeMessage<::Lombric>(Arena*);
template<> ::Map_mod* Arena::CreateMaybeMessage<::Map_mod>(Arena*);
template<> ::Nbr_eq_mod* Arena::CreateMaybeMessage<::Nbr_eq_mod>(Arena*);
template<> ::Nbr_lomb_mod* Arena::CreateMaybeMessage<::Nbr_lomb_mod>(Arena*);
template<> ::Next_lombric* Arena::CreateMaybeMessage<::Next_lombric>(Arena*);
template<> ::Projectiles* Arena::CreateMaybeMessage<::Projectiles>(Arena*);
template<> ::Rank_r* Arena::CreateMaybeMessage<::Rank_r>(Arena*);
template<> ::Time_mod* Arena::CreateMaybeMessage<::Time_mod>(Arena*);
template<> ::Time_round_mod* Arena::CreateMaybeMessage<::Time_round_mod>(Arena*);
template<> ::Tir* Arena::CreateMaybeMessage<::Tir>(Arena*);
template<> ::UserConnect* Arena::CreateMaybeMessage<::UserConnect>(Arena*);
template<> ::Usr_add* Arena::CreateMaybeMessage<::Usr_add>(Arena*);
template<> ::ZMQ_msg* Arena::CreateMaybeMessage<::ZMQ_msg>(Arena*);
template<> ::convo_s* Arena::CreateMaybeMessage<::convo_s>(Arena*);
template<> ::infoPartie_p* Arena::CreateMaybeMessage<::infoPartie_p>(Arena*);
template<> ::infoRoom* Arena::CreateMaybeMessage<::infoRoom>(Arena*);
template<> ::rankInfo* Arena::CreateMaybeMessage<::rankInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class UserConnect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserConnect) */ {
 public:
  UserConnect();
  virtual ~UserConnect();

  UserConnect(const UserConnect& from);
  UserConnect(UserConnect&& from) noexcept
    : UserConnect() {
    *this = ::std::move(from);
  }

  inline UserConnect& operator=(const UserConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConnect& operator=(UserConnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserConnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserConnect* internal_default_instance() {
    return reinterpret_cast<const UserConnect*>(
               &_UserConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserConnect& a, UserConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConnect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserConnect* New() const final {
    return CreateMaybeMessage<UserConnect>(nullptr);
  }

  UserConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserConnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserConnect& from);
  void MergeFrom(const UserConnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserConnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserConnect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kIsregisterFieldNumber = 1,
  };
  // string pseudo = 2;
  void clear_pseudo();
  const std::string& pseudo() const;
  void set_pseudo(const std::string& value);
  void set_pseudo(std::string&& value);
  void set_pseudo(const char* value);
  void set_pseudo(const char* value, size_t size);
  std::string* mutable_pseudo();
  std::string* release_pseudo();
  void set_allocated_pseudo(std::string* pseudo);
  private:
  const std::string& _internal_pseudo() const;
  void _internal_set_pseudo(const std::string& value);
  std::string* _internal_mutable_pseudo();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // bool isregister = 1;
  void clear_isregister();
  bool isregister() const;
  void set_isregister(bool value);
  private:
  bool _internal_isregister() const;
  void _internal_set_isregister(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UserConnect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  bool isregister_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Chat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat) */ {
 public:
  Chat();
  virtual ~Chat();

  Chat(const Chat& from);
  Chat(Chat&& from) noexcept
    : Chat() {
    *this = ::std::move(from);
  }

  inline Chat& operator=(const Chat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat& operator=(Chat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chat* internal_default_instance() {
    return reinterpret_cast<const Chat*>(
               &_Chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Chat& a, Chat& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chat* New() const final {
    return CreateMaybeMessage<Chat>(nullptr);
  }

  Chat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chat& from);
  void MergeFrom(const Chat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoFieldNumber = 1,
    kMsgFieldNumber = 2,
  };
  // string pseudo = 1;
  void clear_pseudo();
  const std::string& pseudo() const;
  void set_pseudo(const std::string& value);
  void set_pseudo(std::string&& value);
  void set_pseudo(const char* value);
  void set_pseudo(const char* value, size_t size);
  std::string* mutable_pseudo();
  std::string* release_pseudo();
  void set_allocated_pseudo(std::string* pseudo);
  private:
  const std::string& _internal_pseudo() const;
  void _internal_set_pseudo(const std::string& value);
  std::string* _internal_mutable_pseudo();
  public:

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:Chat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Chat_r :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat_r) */ {
 public:
  Chat_r();
  virtual ~Chat_r();

  Chat_r(const Chat_r& from);
  Chat_r(Chat_r&& from) noexcept
    : Chat_r() {
    *this = ::std::move(from);
  }

  inline Chat_r& operator=(const Chat_r& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat_r& operator=(Chat_r&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chat_r& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chat_r* internal_default_instance() {
    return reinterpret_cast<const Chat_r*>(
               &_Chat_r_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Chat_r& a, Chat_r& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat_r* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chat_r* New() const final {
    return CreateMaybeMessage<Chat_r>(nullptr);
  }

  Chat_r* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chat_r>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chat_r& from);
  void MergeFrom(const Chat_r& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat_r* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat_r";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 1,
  };
  // repeated .Chat msgs = 1;
  int msgs_size() const;
  private:
  int _internal_msgs_size() const;
  public:
  void clear_msgs();
  ::Chat* mutable_msgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat >*
      mutable_msgs();
  private:
  const ::Chat& _internal_msgs(int index) const;
  ::Chat* _internal_add_msgs();
  public:
  const ::Chat& msgs(int index) const;
  ::Chat* add_msgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat >&
      msgs() const;

  // @@protoc_insertion_point(class_scope:Chat_r)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat > msgs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Chat_broker :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat_broker) */ {
 public:
  Chat_broker();
  virtual ~Chat_broker();

  Chat_broker(const Chat_broker& from);
  Chat_broker(Chat_broker&& from) noexcept
    : Chat_broker() {
    *this = ::std::move(from);
  }

  inline Chat_broker& operator=(const Chat_broker& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat_broker& operator=(Chat_broker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chat_broker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chat_broker* internal_default_instance() {
    return reinterpret_cast<const Chat_broker*>(
               &_Chat_broker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Chat_broker& a, Chat_broker& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat_broker* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chat_broker* New() const final {
    return CreateMaybeMessage<Chat_broker>(nullptr);
  }

  Chat_broker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chat_broker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chat_broker& from);
  void MergeFrom(const Chat_broker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat_broker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat_broker";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsrIdFieldNumber = 1,
  };
  // uint32 usr_id = 1;
  void clear_usr_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 usr_id() const;
  void set_usr_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usr_id() const;
  void _internal_set_usr_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat_broker)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usr_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class convo_s :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:convo_s) */ {
 public:
  convo_s();
  virtual ~convo_s();

  convo_s(const convo_s& from);
  convo_s(convo_s&& from) noexcept
    : convo_s() {
    *this = ::std::move(from);
  }

  inline convo_s& operator=(const convo_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline convo_s& operator=(convo_s&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const convo_s& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const convo_s* internal_default_instance() {
    return reinterpret_cast<const convo_s*>(
               &_convo_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(convo_s& a, convo_s& b) {
    a.Swap(&b);
  }
  inline void Swap(convo_s* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline convo_s* New() const final {
    return CreateMaybeMessage<convo_s>(nullptr);
  }

  convo_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<convo_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const convo_s& from);
  void MergeFrom(const convo_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(convo_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "convo_s";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoFieldNumber = 1,
  };
  // string pseudo = 1;
  void clear_pseudo();
  const std::string& pseudo() const;
  void set_pseudo(const std::string& value);
  void set_pseudo(std::string&& value);
  void set_pseudo(const char* value);
  void set_pseudo(const char* value, size_t size);
  std::string* mutable_pseudo();
  std::string* release_pseudo();
  void set_allocated_pseudo(std::string* pseudo);
  private:
  const std::string& _internal_pseudo() const;
  void _internal_set_pseudo(const std::string& value);
  std::string* _internal_mutable_pseudo();
  public:

  // @@protoc_insertion_point(class_scope:convo_s)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Invitation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Invitation) */ {
 public:
  Invitation();
  virtual ~Invitation();

  Invitation(const Invitation& from);
  Invitation(Invitation&& from) noexcept
    : Invitation() {
    *this = ::std::move(from);
  }

  inline Invitation& operator=(const Invitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Invitation& operator=(Invitation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Invitation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Invitation* internal_default_instance() {
    return reinterpret_cast<const Invitation*>(
               &_Invitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Invitation& a, Invitation& b) {
    a.Swap(&b);
  }
  inline void Swap(Invitation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Invitation* New() const final {
    return CreateMaybeMessage<Invitation>(nullptr);
  }

  Invitation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Invitation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Invitation& from);
  void MergeFrom(const Invitation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Invitation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Invitation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoFieldNumber = 1,
    kTypeFieldNumber = 2,
    kGameIdFieldNumber = 3,
  };
  // string pseudo = 1;
  void clear_pseudo();
  const std::string& pseudo() const;
  void set_pseudo(const std::string& value);
  void set_pseudo(std::string&& value);
  void set_pseudo(const char* value);
  void set_pseudo(const char* value, size_t size);
  std::string* mutable_pseudo();
  std::string* release_pseudo();
  void set_allocated_pseudo(std::string* pseudo);
  private:
  const std::string& _internal_pseudo() const;
  void _internal_set_pseudo(const std::string& value);
  std::string* _internal_mutable_pseudo();
  public:

  // bool type = 2;
  void clear_type();
  bool type() const;
  void set_type(bool value);
  private:
  bool _internal_type() const;
  void _internal_set_type(bool value);
  public:

  // uint32 game_id = 3;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Invitation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_;
  bool type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Invitation_r :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Invitation_r) */ {
 public:
  Invitation_r();
  virtual ~Invitation_r();

  Invitation_r(const Invitation_r& from);
  Invitation_r(Invitation_r&& from) noexcept
    : Invitation_r() {
    *this = ::std::move(from);
  }

  inline Invitation_r& operator=(const Invitation_r& from) {
    CopyFrom(from);
    return *this;
  }
  inline Invitation_r& operator=(Invitation_r&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Invitation_r& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Invitation_r* internal_default_instance() {
    return reinterpret_cast<const Invitation_r*>(
               &_Invitation_r_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Invitation_r& a, Invitation_r& b) {
    a.Swap(&b);
  }
  inline void Swap(Invitation_r* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Invitation_r* New() const final {
    return CreateMaybeMessage<Invitation_r>(nullptr);
  }

  Invitation_r* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Invitation_r>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Invitation_r& from);
  void MergeFrom(const Invitation_r& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Invitation_r* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Invitation_r";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitsFieldNumber = 1,
  };
  // repeated .Invitation invits = 1;
  int invits_size() const;
  private:
  int _internal_invits_size() const;
  public:
  void clear_invits();
  ::Invitation* mutable_invits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Invitation >*
      mutable_invits();
  private:
  const ::Invitation& _internal_invits(int index) const;
  ::Invitation* _internal_add_invits();
  public:
  const ::Invitation& invits(int index) const;
  ::Invitation* add_invits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Invitation >&
      invits() const;

  // @@protoc_insertion_point(class_scope:Invitation_r)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Invitation > invits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Join :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Join) */ {
 public:
  Join();
  virtual ~Join();

  Join(const Join& from);
  Join(Join&& from) noexcept
    : Join() {
    *this = ::std::move(from);
  }

  inline Join& operator=(const Join& from) {
    CopyFrom(from);
    return *this;
  }
  inline Join& operator=(Join&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Join& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Join* internal_default_instance() {
    return reinterpret_cast<const Join*>(
               &_Join_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Join& a, Join& b) {
    a.Swap(&b);
  }
  inline void Swap(Join* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Join* New() const final {
    return CreateMaybeMessage<Join>(nullptr);
  }

  Join* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Join>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Join& from);
  void MergeFrom(const Join& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Join* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Join";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoFieldNumber = 1,
  };
  // string pseudo = 1;
  void clear_pseudo();
  const std::string& pseudo() const;
  void set_pseudo(const std::string& value);
  void set_pseudo(std::string&& value);
  void set_pseudo(const char* value);
  void set_pseudo(const char* value, size_t size);
  std::string* mutable_pseudo();
  std::string* release_pseudo();
  void set_allocated_pseudo(std::string* pseudo);
  private:
  const std::string& _internal_pseudo() const;
  void _internal_set_pseudo(const std::string& value);
  std::string* _internal_mutable_pseudo();
  public:

  // @@protoc_insertion_point(class_scope:Join)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Lomb_r :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Lomb_r) */ {
 public:
  Lomb_r();
  virtual ~Lomb_r();

  Lomb_r(const Lomb_r& from);
  Lomb_r(Lomb_r&& from) noexcept
    : Lomb_r() {
    *this = ::std::move(from);
  }

  inline Lomb_r& operator=(const Lomb_r& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lomb_r& operator=(Lomb_r&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lomb_r& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lomb_r* internal_default_instance() {
    return reinterpret_cast<const Lomb_r*>(
               &_Lomb_r_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Lomb_r& a, Lomb_r& b) {
    a.Swap(&b);
  }
  inline void Swap(Lomb_r* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lomb_r* New() const final {
    return CreateMaybeMessage<Lomb_r>(nullptr);
  }

  Lomb_r* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lomb_r>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lomb_r& from);
  void MergeFrom(const Lomb_r& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lomb_r* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Lomb_r";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLombsFieldNumber = 1,
  };
  // repeated string Lombs = 1;
  int lombs_size() const;
  private:
  int _internal_lombs_size() const;
  public:
  void clear_lombs();
  const std::string& lombs(int index) const;
  std::string* mutable_lombs(int index);
  void set_lombs(int index, const std::string& value);
  void set_lombs(int index, std::string&& value);
  void set_lombs(int index, const char* value);
  void set_lombs(int index, const char* value, size_t size);
  std::string* add_lombs();
  void add_lombs(const std::string& value);
  void add_lombs(std::string&& value);
  void add_lombs(const char* value);
  void add_lombs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& lombs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_lombs();
  private:
  const std::string& _internal_lombs(int index) const;
  std::string* _internal_add_lombs();
  public:

  // @@protoc_insertion_point(class_scope:Lomb_r)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> lombs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Lomb_mod :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Lomb_mod) */ {
 public:
  Lomb_mod();
  virtual ~Lomb_mod();

  Lomb_mod(const Lomb_mod& from);
  Lomb_mod(Lomb_mod&& from) noexcept
    : Lomb_mod() {
    *this = ::std::move(from);
  }

  inline Lomb_mod& operator=(const Lomb_mod& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lomb_mod& operator=(Lomb_mod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lomb_mod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lomb_mod* internal_default_instance() {
    return reinterpret_cast<const Lomb_mod*>(
               &_Lomb_mod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Lomb_mod& a, Lomb_mod& b) {
    a.Swap(&b);
  }
  inline void Swap(Lomb_mod* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lomb_mod* New() const final {
    return CreateMaybeMessage<Lomb_mod>(nullptr);
  }

  Lomb_mod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lomb_mod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lomb_mod& from);
  void MergeFrom(const Lomb_mod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lomb_mod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Lomb_mod";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameLombFieldNumber = 2,
    kIdLombFieldNumber = 1,
  };
  // string name_Lomb = 2;
  void clear_name_lomb();
  const std::string& name_lomb() const;
  void set_name_lomb(const std::string& value);
  void set_name_lomb(std::string&& value);
  void set_name_lomb(const char* value);
  void set_name_lomb(const char* value, size_t size);
  std::string* mutable_name_lomb();
  std::string* release_name_lomb();
  void set_allocated_name_lomb(std::string* name_lomb);
  private:
  const std::string& _internal_name_lomb() const;
  void _internal_set_name_lomb(const std::string& value);
  std::string* _internal_mutable_name_lomb();
  public:

  // uint32 id_lomb = 1;
  void clear_id_lomb();
  ::PROTOBUF_NAMESPACE_ID::uint32 id_lomb() const;
  void set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id_lomb() const;
  void _internal_set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Lomb_mod)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_lomb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_lomb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Usr_add :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Usr_add) */ {
 public:
  Usr_add();
  virtual ~Usr_add();

  Usr_add(const Usr_add& from);
  Usr_add(Usr_add&& from) noexcept
    : Usr_add() {
    *this = ::std::move(from);
  }

  inline Usr_add& operator=(const Usr_add& from) {
    CopyFrom(from);
    return *this;
  }
  inline Usr_add& operator=(Usr_add&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Usr_add& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Usr_add* internal_default_instance() {
    return reinterpret_cast<const Usr_add*>(
               &_Usr_add_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Usr_add& a, Usr_add& b) {
    a.Swap(&b);
  }
  inline void Swap(Usr_add* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Usr_add* New() const final {
    return CreateMaybeMessage<Usr_add>(nullptr);
  }

  Usr_add* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Usr_add>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Usr_add& from);
  void MergeFrom(const Usr_add& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Usr_add* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Usr_add";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoFieldNumber = 1,
  };
  // string pseudo = 1;
  void clear_pseudo();
  const std::string& pseudo() const;
  void set_pseudo(const std::string& value);
  void set_pseudo(std::string&& value);
  void set_pseudo(const char* value);
  void set_pseudo(const char* value, size_t size);
  std::string* mutable_pseudo();
  std::string* release_pseudo();
  void set_allocated_pseudo(std::string* pseudo);
  private:
  const std::string& _internal_pseudo() const;
  void _internal_set_pseudo(const std::string& value);
  std::string* _internal_mutable_pseudo();
  public:

  // @@protoc_insertion_point(class_scope:Usr_add)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Map_mod :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Map_mod) */ {
 public:
  Map_mod();
  virtual ~Map_mod();

  Map_mod(const Map_mod& from);
  Map_mod(Map_mod&& from) noexcept
    : Map_mod() {
    *this = ::std::move(from);
  }

  inline Map_mod& operator=(const Map_mod& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map_mod& operator=(Map_mod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map_mod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map_mod* internal_default_instance() {
    return reinterpret_cast<const Map_mod*>(
               &_Map_mod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Map_mod& a, Map_mod& b) {
    a.Swap(&b);
  }
  inline void Swap(Map_mod* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map_mod* New() const final {
    return CreateMaybeMessage<Map_mod>(nullptr);
  }

  Map_mod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map_mod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map_mod& from);
  void MergeFrom(const Map_mod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map_mod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Map_mod";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Map_mod)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Time_mod :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Time_mod) */ {
 public:
  Time_mod();
  virtual ~Time_mod();

  Time_mod(const Time_mod& from);
  Time_mod(Time_mod&& from) noexcept
    : Time_mod() {
    *this = ::std::move(from);
  }

  inline Time_mod& operator=(const Time_mod& from) {
    CopyFrom(from);
    return *this;
  }
  inline Time_mod& operator=(Time_mod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Time_mod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time_mod* internal_default_instance() {
    return reinterpret_cast<const Time_mod*>(
               &_Time_mod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Time_mod& a, Time_mod& b) {
    a.Swap(&b);
  }
  inline void Swap(Time_mod* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Time_mod* New() const final {
    return CreateMaybeMessage<Time_mod>(nullptr);
  }

  Time_mod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Time_mod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Time_mod& from);
  void MergeFrom(const Time_mod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time_mod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Time_mod";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // uint32 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Time_mod)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Time_round_mod :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Time_round_mod) */ {
 public:
  Time_round_mod();
  virtual ~Time_round_mod();

  Time_round_mod(const Time_round_mod& from);
  Time_round_mod(Time_round_mod&& from) noexcept
    : Time_round_mod() {
    *this = ::std::move(from);
  }

  inline Time_round_mod& operator=(const Time_round_mod& from) {
    CopyFrom(from);
    return *this;
  }
  inline Time_round_mod& operator=(Time_round_mod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Time_round_mod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time_round_mod* internal_default_instance() {
    return reinterpret_cast<const Time_round_mod*>(
               &_Time_round_mod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Time_round_mod& a, Time_round_mod& b) {
    a.Swap(&b);
  }
  inline void Swap(Time_round_mod* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Time_round_mod* New() const final {
    return CreateMaybeMessage<Time_round_mod>(nullptr);
  }

  Time_round_mod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Time_round_mod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Time_round_mod& from);
  void MergeFrom(const Time_round_mod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time_round_mod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Time_round_mod";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // uint32 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Time_round_mod)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Nbr_lomb_mod :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nbr_lomb_mod) */ {
 public:
  Nbr_lomb_mod();
  virtual ~Nbr_lomb_mod();

  Nbr_lomb_mod(const Nbr_lomb_mod& from);
  Nbr_lomb_mod(Nbr_lomb_mod&& from) noexcept
    : Nbr_lomb_mod() {
    *this = ::std::move(from);
  }

  inline Nbr_lomb_mod& operator=(const Nbr_lomb_mod& from) {
    CopyFrom(from);
    return *this;
  }
  inline Nbr_lomb_mod& operator=(Nbr_lomb_mod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Nbr_lomb_mod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Nbr_lomb_mod* internal_default_instance() {
    return reinterpret_cast<const Nbr_lomb_mod*>(
               &_Nbr_lomb_mod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Nbr_lomb_mod& a, Nbr_lomb_mod& b) {
    a.Swap(&b);
  }
  inline void Swap(Nbr_lomb_mod* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Nbr_lomb_mod* New() const final {
    return CreateMaybeMessage<Nbr_lomb_mod>(nullptr);
  }

  Nbr_lomb_mod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Nbr_lomb_mod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Nbr_lomb_mod& from);
  void MergeFrom(const Nbr_lomb_mod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Nbr_lomb_mod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nbr_lomb_mod";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNbrLombFieldNumber = 1,
  };
  // uint32 nbr_lomb = 1;
  void clear_nbr_lomb();
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_lomb() const;
  void set_nbr_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nbr_lomb() const;
  void _internal_set_nbr_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Nbr_lomb_mod)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_lomb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Nbr_eq_mod :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nbr_eq_mod) */ {
 public:
  Nbr_eq_mod();
  virtual ~Nbr_eq_mod();

  Nbr_eq_mod(const Nbr_eq_mod& from);
  Nbr_eq_mod(Nbr_eq_mod&& from) noexcept
    : Nbr_eq_mod() {
    *this = ::std::move(from);
  }

  inline Nbr_eq_mod& operator=(const Nbr_eq_mod& from) {
    CopyFrom(from);
    return *this;
  }
  inline Nbr_eq_mod& operator=(Nbr_eq_mod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Nbr_eq_mod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Nbr_eq_mod* internal_default_instance() {
    return reinterpret_cast<const Nbr_eq_mod*>(
               &_Nbr_eq_mod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Nbr_eq_mod& a, Nbr_eq_mod& b) {
    a.Swap(&b);
  }
  inline void Swap(Nbr_eq_mod* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Nbr_eq_mod* New() const final {
    return CreateMaybeMessage<Nbr_eq_mod>(nullptr);
  }

  Nbr_eq_mod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Nbr_eq_mod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Nbr_eq_mod& from);
  void MergeFrom(const Nbr_eq_mod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Nbr_eq_mod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nbr_eq_mod";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNbrEqFieldNumber = 1,
  };
  // uint32 nbr_eq = 1;
  void clear_nbr_eq();
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_eq() const;
  void set_nbr_eq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nbr_eq() const;
  void _internal_set_nbr_eq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Nbr_eq_mod)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_eq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Join_groupe_s :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Join_groupe_s) */ {
 public:
  Join_groupe_s();
  virtual ~Join_groupe_s();

  Join_groupe_s(const Join_groupe_s& from);
  Join_groupe_s(Join_groupe_s&& from) noexcept
    : Join_groupe_s() {
    *this = ::std::move(from);
  }

  inline Join_groupe_s& operator=(const Join_groupe_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline Join_groupe_s& operator=(Join_groupe_s&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Join_groupe_s& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Join_groupe_s* internal_default_instance() {
    return reinterpret_cast<const Join_groupe_s*>(
               &_Join_groupe_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Join_groupe_s& a, Join_groupe_s& b) {
    a.Swap(&b);
  }
  inline void Swap(Join_groupe_s* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Join_groupe_s* New() const final {
    return CreateMaybeMessage<Join_groupe_s>(nullptr);
  }

  Join_groupe_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Join_groupe_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Join_groupe_s& from);
  void MergeFrom(const Join_groupe_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Join_groupe_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Join_groupe_s";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Join_groupe_s)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Join_groupe_r :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Join_groupe_r) */ {
 public:
  Join_groupe_r();
  virtual ~Join_groupe_r();

  Join_groupe_r(const Join_groupe_r& from);
  Join_groupe_r(Join_groupe_r&& from) noexcept
    : Join_groupe_r() {
    *this = ::std::move(from);
  }

  inline Join_groupe_r& operator=(const Join_groupe_r& from) {
    CopyFrom(from);
    return *this;
  }
  inline Join_groupe_r& operator=(Join_groupe_r&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Join_groupe_r& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Join_groupe_r* internal_default_instance() {
    return reinterpret_cast<const Join_groupe_r*>(
               &_Join_groupe_r_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Join_groupe_r& a, Join_groupe_r& b) {
    a.Swap(&b);
  }
  inline void Swap(Join_groupe_r* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Join_groupe_r* New() const final {
    return CreateMaybeMessage<Join_groupe_r>(nullptr);
  }

  Join_groupe_r* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Join_groupe_r>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Join_groupe_r& from);
  void MergeFrom(const Join_groupe_r& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Join_groupe_r* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Join_groupe_r";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string pseudo = 1;
  void clear_pseudo();
  const std::string& pseudo() const;
  void set_pseudo(const std::string& value);
  void set_pseudo(std::string&& value);
  void set_pseudo(const char* value);
  void set_pseudo(const char* value, size_t size);
  std::string* mutable_pseudo();
  std::string* release_pseudo();
  void set_allocated_pseudo(std::string* pseudo);
  private:
  const std::string& _internal_pseudo() const;
  void _internal_set_pseudo(const std::string& value);
  std::string* _internal_mutable_pseudo();
  public:

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Join_groupe_r)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Get_history :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Get_history) */ {
 public:
  Get_history();
  virtual ~Get_history();

  Get_history(const Get_history& from);
  Get_history(Get_history&& from) noexcept
    : Get_history() {
    *this = ::std::move(from);
  }

  inline Get_history& operator=(const Get_history& from) {
    CopyFrom(from);
    return *this;
  }
  inline Get_history& operator=(Get_history&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Get_history& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Get_history* internal_default_instance() {
    return reinterpret_cast<const Get_history*>(
               &_Get_history_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Get_history& a, Get_history& b) {
    a.Swap(&b);
  }
  inline void Swap(Get_history* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Get_history* New() const final {
    return CreateMaybeMessage<Get_history>(nullptr);
  }

  Get_history* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Get_history>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Get_history& from);
  void MergeFrom(const Get_history& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Get_history* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Get_history";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoFieldNumber = 1,
    kFirstGameFieldNumber = 2,
    kNbrGameFieldNumber = 3,
  };
  // string pseudo = 1;
  void clear_pseudo();
  const std::string& pseudo() const;
  void set_pseudo(const std::string& value);
  void set_pseudo(std::string&& value);
  void set_pseudo(const char* value);
  void set_pseudo(const char* value, size_t size);
  std::string* mutable_pseudo();
  std::string* release_pseudo();
  void set_allocated_pseudo(std::string* pseudo);
  private:
  const std::string& _internal_pseudo() const;
  void _internal_set_pseudo(const std::string& value);
  std::string* _internal_mutable_pseudo();
  public:

  // uint32 first_game = 2;
  void clear_first_game();
  ::PROTOBUF_NAMESPACE_ID::uint32 first_game() const;
  void set_first_game(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_first_game() const;
  void _internal_set_first_game(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nbr_game = 3;
  void clear_nbr_game();
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_game() const;
  void set_nbr_game(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nbr_game() const;
  void _internal_set_nbr_game(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Get_history)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 first_game_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_game_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class History :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:History) */ {
 public:
  History();
  virtual ~History();

  History(const History& from);
  History(History&& from) noexcept
    : History() {
    *this = ::std::move(from);
  }

  inline History& operator=(const History& from) {
    CopyFrom(from);
    return *this;
  }
  inline History& operator=(History&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const History& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const History* internal_default_instance() {
    return reinterpret_cast<const History*>(
               &_History_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(History& a, History& b) {
    a.Swap(&b);
  }
  inline void Swap(History* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline History* New() const final {
    return CreateMaybeMessage<History>(nullptr);
  }

  History* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<History>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const History& from);
  void MergeFrom(const History& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(History* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "History";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudo1FieldNumber = 1,
    kPseudo2FieldNumber = 2,
    kPseudo3FieldNumber = 3,
    kPseudo4FieldNumber = 4,
    kDateFieldNumber = 9,
    kPoint1FieldNumber = 5,
    kPoint2FieldNumber = 6,
    kPoint3FieldNumber = 7,
    kPoint4FieldNumber = 8,
  };
  // string pseudo_1 = 1;
  void clear_pseudo_1();
  const std::string& pseudo_1() const;
  void set_pseudo_1(const std::string& value);
  void set_pseudo_1(std::string&& value);
  void set_pseudo_1(const char* value);
  void set_pseudo_1(const char* value, size_t size);
  std::string* mutable_pseudo_1();
  std::string* release_pseudo_1();
  void set_allocated_pseudo_1(std::string* pseudo_1);
  private:
  const std::string& _internal_pseudo_1() const;
  void _internal_set_pseudo_1(const std::string& value);
  std::string* _internal_mutable_pseudo_1();
  public:

  // string pseudo_2 = 2;
  void clear_pseudo_2();
  const std::string& pseudo_2() const;
  void set_pseudo_2(const std::string& value);
  void set_pseudo_2(std::string&& value);
  void set_pseudo_2(const char* value);
  void set_pseudo_2(const char* value, size_t size);
  std::string* mutable_pseudo_2();
  std::string* release_pseudo_2();
  void set_allocated_pseudo_2(std::string* pseudo_2);
  private:
  const std::string& _internal_pseudo_2() const;
  void _internal_set_pseudo_2(const std::string& value);
  std::string* _internal_mutable_pseudo_2();
  public:

  // string pseudo_3 = 3;
  void clear_pseudo_3();
  const std::string& pseudo_3() const;
  void set_pseudo_3(const std::string& value);
  void set_pseudo_3(std::string&& value);
  void set_pseudo_3(const char* value);
  void set_pseudo_3(const char* value, size_t size);
  std::string* mutable_pseudo_3();
  std::string* release_pseudo_3();
  void set_allocated_pseudo_3(std::string* pseudo_3);
  private:
  const std::string& _internal_pseudo_3() const;
  void _internal_set_pseudo_3(const std::string& value);
  std::string* _internal_mutable_pseudo_3();
  public:

  // string pseudo_4 = 4;
  void clear_pseudo_4();
  const std::string& pseudo_4() const;
  void set_pseudo_4(const std::string& value);
  void set_pseudo_4(std::string&& value);
  void set_pseudo_4(const char* value);
  void set_pseudo_4(const char* value, size_t size);
  std::string* mutable_pseudo_4();
  std::string* release_pseudo_4();
  void set_allocated_pseudo_4(std::string* pseudo_4);
  private:
  const std::string& _internal_pseudo_4() const;
  void _internal_set_pseudo_4(const std::string& value);
  std::string* _internal_mutable_pseudo_4();
  public:

  // string date = 9;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // uint32 point_1 = 5;
  void clear_point_1();
  ::PROTOBUF_NAMESPACE_ID::uint32 point_1() const;
  void set_point_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_point_1() const;
  void _internal_set_point_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 point_2 = 6;
  void clear_point_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 point_2() const;
  void set_point_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_point_2() const;
  void _internal_set_point_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 point_3 = 7;
  void clear_point_3();
  ::PROTOBUF_NAMESPACE_ID::uint32 point_3() const;
  void set_point_3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_point_3() const;
  void _internal_set_point_3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 point_4 = 8;
  void clear_point_4();
  ::PROTOBUF_NAMESPACE_ID::uint32 point_4() const;
  void set_point_4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_point_4() const;
  void _internal_set_point_4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:History)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 point_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 point_2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 point_3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 point_4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class History_r :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:History_r) */ {
 public:
  History_r();
  virtual ~History_r();

  History_r(const History_r& from);
  History_r(History_r&& from) noexcept
    : History_r() {
    *this = ::std::move(from);
  }

  inline History_r& operator=(const History_r& from) {
    CopyFrom(from);
    return *this;
  }
  inline History_r& operator=(History_r&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const History_r& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const History_r* internal_default_instance() {
    return reinterpret_cast<const History_r*>(
               &_History_r_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(History_r& a, History_r& b) {
    a.Swap(&b);
  }
  inline void Swap(History_r* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline History_r* New() const final {
    return CreateMaybeMessage<History_r>(nullptr);
  }

  History_r* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<History_r>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const History_r& from);
  void MergeFrom(const History_r& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(History_r* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "History_r";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoryFieldNumber = 1,
  };
  // repeated .History history = 1;
  int history_size() const;
  private:
  int _internal_history_size() const;
  public:
  void clear_history();
  ::History* mutable_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::History >*
      mutable_history();
  private:
  const ::History& _internal_history(int index) const;
  ::History* _internal_add_history();
  public:
  const ::History& history(int index) const;
  ::History* add_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::History >&
      history() const;

  // @@protoc_insertion_point(class_scope:History_r)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::History > history_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Get_rank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Get_rank) */ {
 public:
  Get_rank();
  virtual ~Get_rank();

  Get_rank(const Get_rank& from);
  Get_rank(Get_rank&& from) noexcept
    : Get_rank() {
    *this = ::std::move(from);
  }

  inline Get_rank& operator=(const Get_rank& from) {
    CopyFrom(from);
    return *this;
  }
  inline Get_rank& operator=(Get_rank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Get_rank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Get_rank* internal_default_instance() {
    return reinterpret_cast<const Get_rank*>(
               &_Get_rank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Get_rank& a, Get_rank& b) {
    a.Swap(&b);
  }
  inline void Swap(Get_rank* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Get_rank* New() const final {
    return CreateMaybeMessage<Get_rank>(nullptr);
  }

  Get_rank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Get_rank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Get_rank& from);
  void MergeFrom(const Get_rank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Get_rank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Get_rank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstPlayerFieldNumber = 1,
    kNbrPlayerFieldNumber = 2,
  };
  // uint32 first_player = 1;
  void clear_first_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 first_player() const;
  void set_first_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_first_player() const;
  void _internal_set_first_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nbr_player = 2;
  void clear_nbr_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_player() const;
  void set_nbr_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nbr_player() const;
  void _internal_set_nbr_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Get_rank)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 first_player_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class rankInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rankInfo) */ {
 public:
  rankInfo();
  virtual ~rankInfo();

  rankInfo(const rankInfo& from);
  rankInfo(rankInfo&& from) noexcept
    : rankInfo() {
    *this = ::std::move(from);
  }

  inline rankInfo& operator=(const rankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline rankInfo& operator=(rankInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rankInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rankInfo* internal_default_instance() {
    return reinterpret_cast<const rankInfo*>(
               &_rankInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(rankInfo& a, rankInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(rankInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rankInfo* New() const final {
    return CreateMaybeMessage<rankInfo>(nullptr);
  }

  rankInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rankInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rankInfo& from);
  void MergeFrom(const rankInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rankInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rankInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kPointFieldNumber = 2,
  };
  // string user = 1;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // uint32 point = 2;
  void clear_point();
  ::PROTOBUF_NAMESPACE_ID::uint32 point() const;
  void set_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_point() const;
  void _internal_set_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rankInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::uint32 point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Rank_r :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rank_r) */ {
 public:
  Rank_r();
  virtual ~Rank_r();

  Rank_r(const Rank_r& from);
  Rank_r(Rank_r&& from) noexcept
    : Rank_r() {
    *this = ::std::move(from);
  }

  inline Rank_r& operator=(const Rank_r& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rank_r& operator=(Rank_r&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rank_r& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rank_r* internal_default_instance() {
    return reinterpret_cast<const Rank_r*>(
               &_Rank_r_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Rank_r& a, Rank_r& b) {
    a.Swap(&b);
  }
  inline void Swap(Rank_r* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rank_r* New() const final {
    return CreateMaybeMessage<Rank_r>(nullptr);
  }

  Rank_r* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rank_r>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rank_r& from);
  void MergeFrom(const Rank_r& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rank_r* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rank_r";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .rankInfo players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::rankInfo* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rankInfo >*
      mutable_players();
  private:
  const ::rankInfo& _internal_players(int index) const;
  ::rankInfo* _internal_add_players();
  public:
  const ::rankInfo& players(int index) const;
  ::rankInfo* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rankInfo >&
      players() const;

  // @@protoc_insertion_point(class_scope:Rank_r)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rankInfo > players_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Fri_add :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Fri_add) */ {
 public:
  Fri_add();
  virtual ~Fri_add();

  Fri_add(const Fri_add& from);
  Fri_add(Fri_add&& from) noexcept
    : Fri_add() {
    *this = ::std::move(from);
  }

  inline Fri_add& operator=(const Fri_add& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fri_add& operator=(Fri_add&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fri_add& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fri_add* internal_default_instance() {
    return reinterpret_cast<const Fri_add*>(
               &_Fri_add_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Fri_add& a, Fri_add& b) {
    a.Swap(&b);
  }
  inline void Swap(Fri_add* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fri_add* New() const final {
    return CreateMaybeMessage<Fri_add>(nullptr);
  }

  Fri_add* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fri_add>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fri_add& from);
  void MergeFrom(const Fri_add& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fri_add* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Fri_add";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // string user = 1;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // @@protoc_insertion_point(class_scope:Fri_add)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Fri_rcv :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Fri_rcv) */ {
 public:
  Fri_rcv();
  virtual ~Fri_rcv();

  Fri_rcv(const Fri_rcv& from);
  Fri_rcv(Fri_rcv&& from) noexcept
    : Fri_rcv() {
    *this = ::std::move(from);
  }

  inline Fri_rcv& operator=(const Fri_rcv& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fri_rcv& operator=(Fri_rcv&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fri_rcv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fri_rcv* internal_default_instance() {
    return reinterpret_cast<const Fri_rcv*>(
               &_Fri_rcv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Fri_rcv& a, Fri_rcv& b) {
    a.Swap(&b);
  }
  inline void Swap(Fri_rcv* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fri_rcv* New() const final {
    return CreateMaybeMessage<Fri_rcv>(nullptr);
  }

  Fri_rcv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fri_rcv>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fri_rcv& from);
  void MergeFrom(const Fri_rcv& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fri_rcv* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Fri_rcv";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // string user = 1;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // @@protoc_insertion_point(class_scope:Fri_rcv)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Fri_accept :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Fri_accept) */ {
 public:
  Fri_accept();
  virtual ~Fri_accept();

  Fri_accept(const Fri_accept& from);
  Fri_accept(Fri_accept&& from) noexcept
    : Fri_accept() {
    *this = ::std::move(from);
  }

  inline Fri_accept& operator=(const Fri_accept& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fri_accept& operator=(Fri_accept&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fri_accept& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fri_accept* internal_default_instance() {
    return reinterpret_cast<const Fri_accept*>(
               &_Fri_accept_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Fri_accept& a, Fri_accept& b) {
    a.Swap(&b);
  }
  inline void Swap(Fri_accept* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fri_accept* New() const final {
    return CreateMaybeMessage<Fri_accept>(nullptr);
  }

  Fri_accept* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fri_accept>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fri_accept& from);
  void MergeFrom(const Fri_accept& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fri_accept* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Fri_accept";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 2,
    kAcceptFieldNumber = 1,
  };
  // string user = 2;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // bool accept = 1;
  void clear_accept();
  bool accept() const;
  void set_accept(bool value);
  private:
  bool _internal_accept() const;
  void _internal_set_accept(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Fri_accept)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  bool accept_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Fri_rmv :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Fri_rmv) */ {
 public:
  Fri_rmv();
  virtual ~Fri_rmv();

  Fri_rmv(const Fri_rmv& from);
  Fri_rmv(Fri_rmv&& from) noexcept
    : Fri_rmv() {
    *this = ::std::move(from);
  }

  inline Fri_rmv& operator=(const Fri_rmv& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fri_rmv& operator=(Fri_rmv&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fri_rmv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fri_rmv* internal_default_instance() {
    return reinterpret_cast<const Fri_rmv*>(
               &_Fri_rmv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Fri_rmv& a, Fri_rmv& b) {
    a.Swap(&b);
  }
  inline void Swap(Fri_rmv* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fri_rmv* New() const final {
    return CreateMaybeMessage<Fri_rmv>(nullptr);
  }

  Fri_rmv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fri_rmv>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fri_rmv& from);
  void MergeFrom(const Fri_rmv& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fri_rmv* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Fri_rmv";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // string user = 1;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // @@protoc_insertion_point(class_scope:Fri_rmv)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Fri_ls_r :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Fri_ls_r) */ {
 public:
  Fri_ls_r();
  virtual ~Fri_ls_r();

  Fri_ls_r(const Fri_ls_r& from);
  Fri_ls_r(Fri_ls_r&& from) noexcept
    : Fri_ls_r() {
    *this = ::std::move(from);
  }

  inline Fri_ls_r& operator=(const Fri_ls_r& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fri_ls_r& operator=(Fri_ls_r&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fri_ls_r& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fri_ls_r* internal_default_instance() {
    return reinterpret_cast<const Fri_ls_r*>(
               &_Fri_ls_r_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Fri_ls_r& a, Fri_ls_r& b) {
    a.Swap(&b);
  }
  inline void Swap(Fri_ls_r* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fri_ls_r* New() const final {
    return CreateMaybeMessage<Fri_ls_r>(nullptr);
  }

  Fri_ls_r* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fri_ls_r>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fri_ls_r& from);
  void MergeFrom(const Fri_ls_r& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fri_ls_r* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Fri_ls_r";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // repeated string user = 1;
  int user_size() const;
  private:
  int _internal_user_size() const;
  public:
  void clear_user();
  const std::string& user(int index) const;
  std::string* mutable_user(int index);
  void set_user(int index, const std::string& value);
  void set_user(int index, std::string&& value);
  void set_user(int index, const char* value);
  void set_user(int index, const char* value, size_t size);
  std::string* add_user();
  void add_user(const std::string& value);
  void add_user(std::string&& value);
  void add_user(const char* value);
  void add_user(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user();
  private:
  const std::string& _internal_user(int index) const;
  std::string* _internal_add_user();
  public:

  // @@protoc_insertion_point(class_scope:Fri_ls_r)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Lomb_pos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Lomb_pos) */ {
 public:
  Lomb_pos();
  virtual ~Lomb_pos();

  Lomb_pos(const Lomb_pos& from);
  Lomb_pos(Lomb_pos&& from) noexcept
    : Lomb_pos() {
    *this = ::std::move(from);
  }

  inline Lomb_pos& operator=(const Lomb_pos& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lomb_pos& operator=(Lomb_pos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lomb_pos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lomb_pos* internal_default_instance() {
    return reinterpret_cast<const Lomb_pos*>(
               &_Lomb_pos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Lomb_pos& a, Lomb_pos& b) {
    a.Swap(&b);
  }
  inline void Swap(Lomb_pos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lomb_pos* New() const final {
    return CreateMaybeMessage<Lomb_pos>(nullptr);
  }

  Lomb_pos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lomb_pos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lomb_pos& from);
  void MergeFrom(const Lomb_pos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lomb_pos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Lomb_pos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdLombFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
  };
  // uint32 id_lomb = 1;
  void clear_id_lomb();
  ::PROTOBUF_NAMESPACE_ID::uint32 id_lomb() const;
  void set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id_lomb() const;
  void _internal_set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pos_x = 2;
  void clear_pos_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_x() const;
  void set_pos_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pos_x() const;
  void _internal_set_pos_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pos_y = 3;
  void clear_pos_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_y() const;
  void set_pos_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pos_y() const;
  void _internal_set_pos_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Lomb_pos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_lomb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Tir :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tir) */ {
 public:
  Tir();
  virtual ~Tir();

  Tir(const Tir& from);
  Tir(Tir&& from) noexcept
    : Tir() {
    *this = ::std::move(from);
  }

  inline Tir& operator=(const Tir& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tir& operator=(Tir&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tir& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tir* internal_default_instance() {
    return reinterpret_cast<const Tir*>(
               &_Tir_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Tir& a, Tir& b) {
    a.Swap(&b);
  }
  inline void Swap(Tir* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tir* New() const final {
    return CreateMaybeMessage<Tir>(nullptr);
  }

  Tir* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tir>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tir& from);
  void MergeFrom(const Tir& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tir* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tir";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdArmeFieldNumber = 1,
    kForceFieldNumber = 2,
    kAngleFieldNumber = 3,
  };
  // uint32 id_arme = 1;
  void clear_id_arme();
  ::PROTOBUF_NAMESPACE_ID::uint32 id_arme() const;
  void set_id_arme(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id_arme() const;
  void _internal_set_id_arme(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 force = 2;
  void clear_force();
  ::PROTOBUF_NAMESPACE_ID::uint32 force() const;
  void set_force(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_force() const;
  void _internal_set_force(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double angle = 3;
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // @@protoc_insertion_point(class_scope:Tir)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_arme_;
  ::PROTOBUF_NAMESPACE_ID::uint32 force_;
  double angle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Projectiles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Projectiles) */ {
 public:
  Projectiles();
  virtual ~Projectiles();

  Projectiles(const Projectiles& from);
  Projectiles(Projectiles&& from) noexcept
    : Projectiles() {
    *this = ::std::move(from);
  }

  inline Projectiles& operator=(const Projectiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline Projectiles& operator=(Projectiles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Projectiles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Projectiles* internal_default_instance() {
    return reinterpret_cast<const Projectiles*>(
               &_Projectiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Projectiles& a, Projectiles& b) {
    a.Swap(&b);
  }
  inline void Swap(Projectiles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Projectiles* New() const final {
    return CreateMaybeMessage<Projectiles>(nullptr);
  }

  Projectiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Projectiles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Projectiles& from);
  void MergeFrom(const Projectiles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Projectiles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Projectiles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 2,
    kIdProjectileFieldNumber = 1,
  };
  // repeated uint32 block = 2;
  int block_size() const;
  private:
  int _internal_block_size() const;
  public:
  void clear_block();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_block(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_block() const;
  void _internal_add_block(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_block();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 block(int index) const;
  void set_block(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_block(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      block() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_block();

  // uint32 id_projectile = 1;
  void clear_id_projectile();
  ::PROTOBUF_NAMESPACE_ID::uint32 id_projectile() const;
  void set_id_projectile(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id_projectile() const;
  void _internal_set_id_projectile(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Projectiles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > block_;
  mutable std::atomic<int> _block_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_projectile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class List_Projectiles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:List_Projectiles) */ {
 public:
  List_Projectiles();
  virtual ~List_Projectiles();

  List_Projectiles(const List_Projectiles& from);
  List_Projectiles(List_Projectiles&& from) noexcept
    : List_Projectiles() {
    *this = ::std::move(from);
  }

  inline List_Projectiles& operator=(const List_Projectiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline List_Projectiles& operator=(List_Projectiles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const List_Projectiles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const List_Projectiles* internal_default_instance() {
    return reinterpret_cast<const List_Projectiles*>(
               &_List_Projectiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(List_Projectiles& a, List_Projectiles& b) {
    a.Swap(&b);
  }
  inline void Swap(List_Projectiles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline List_Projectiles* New() const final {
    return CreateMaybeMessage<List_Projectiles>(nullptr);
  }

  List_Projectiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<List_Projectiles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const List_Projectiles& from);
  void MergeFrom(const List_Projectiles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(List_Projectiles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "List_Projectiles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListProjFieldNumber = 1,
  };
  // repeated .Projectiles list_proj = 1;
  int list_proj_size() const;
  private:
  int _internal_list_proj_size() const;
  public:
  void clear_list_proj();
  ::Projectiles* mutable_list_proj(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Projectiles >*
      mutable_list_proj();
  private:
  const ::Projectiles& _internal_list_proj(int index) const;
  ::Projectiles* _internal_add_list_proj();
  public:
  const ::Projectiles& list_proj(int index) const;
  ::Projectiles* add_list_proj();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Projectiles >&
      list_proj() const;

  // @@protoc_insertion_point(class_scope:List_Projectiles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Projectiles > list_proj_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Block_Destroy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Block_Destroy) */ {
 public:
  Block_Destroy();
  virtual ~Block_Destroy();

  Block_Destroy(const Block_Destroy& from);
  Block_Destroy(Block_Destroy&& from) noexcept
    : Block_Destroy() {
    *this = ::std::move(from);
  }

  inline Block_Destroy& operator=(const Block_Destroy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block_Destroy& operator=(Block_Destroy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block_Destroy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block_Destroy* internal_default_instance() {
    return reinterpret_cast<const Block_Destroy*>(
               &_Block_Destroy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Block_Destroy& a, Block_Destroy& b) {
    a.Swap(&b);
  }
  inline void Swap(Block_Destroy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block_Destroy* New() const final {
    return CreateMaybeMessage<Block_Destroy>(nullptr);
  }

  Block_Destroy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block_Destroy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block_Destroy& from);
  void MergeFrom(const Block_Destroy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block_Destroy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Block_Destroy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordFieldNumber = 1,
  };
  // repeated uint32 coord = 1;
  int coord_size() const;
  private:
  int _internal_coord_size() const;
  public:
  void clear_coord();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coord(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_coord() const;
  void _internal_add_coord(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_coord();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 coord(int index) const;
  void set_coord(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_coord(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      coord() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_coord();

  // @@protoc_insertion_point(class_scope:Block_Destroy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > coord_;
  mutable std::atomic<int> _coord_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Degats_lombric :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Degats_lombric) */ {
 public:
  Degats_lombric();
  virtual ~Degats_lombric();

  Degats_lombric(const Degats_lombric& from);
  Degats_lombric(Degats_lombric&& from) noexcept
    : Degats_lombric() {
    *this = ::std::move(from);
  }

  inline Degats_lombric& operator=(const Degats_lombric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Degats_lombric& operator=(Degats_lombric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Degats_lombric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Degats_lombric* internal_default_instance() {
    return reinterpret_cast<const Degats_lombric*>(
               &_Degats_lombric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Degats_lombric& a, Degats_lombric& b) {
    a.Swap(&b);
  }
  inline void Swap(Degats_lombric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Degats_lombric* New() const final {
    return CreateMaybeMessage<Degats_lombric>(nullptr);
  }

  Degats_lombric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Degats_lombric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Degats_lombric& from);
  void MergeFrom(const Degats_lombric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Degats_lombric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Degats_lombric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLombUptFieldNumber = 1,
  };
  // repeated .Lombric lomb_upt = 1;
  int lomb_upt_size() const;
  private:
  int _internal_lomb_upt_size() const;
  public:
  void clear_lomb_upt();
  ::Lombric* mutable_lomb_upt(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lombric >*
      mutable_lomb_upt();
  private:
  const ::Lombric& _internal_lomb_upt(int index) const;
  ::Lombric* _internal_add_lomb_upt();
  public:
  const ::Lombric& lomb_upt(int index) const;
  ::Lombric* add_lomb_upt();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lombric >&
      lomb_upt() const;

  // @@protoc_insertion_point(class_scope:Degats_lombric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lombric > lomb_upt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Lombric :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Lombric) */ {
 public:
  Lombric();
  virtual ~Lombric();

  Lombric(const Lombric& from);
  Lombric(Lombric&& from) noexcept
    : Lombric() {
    *this = ::std::move(from);
  }

  inline Lombric& operator=(const Lombric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lombric& operator=(Lombric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lombric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lombric* internal_default_instance() {
    return reinterpret_cast<const Lombric*>(
               &_Lombric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Lombric& a, Lombric& b) {
    a.Swap(&b);
  }
  inline void Swap(Lombric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lombric* New() const final {
    return CreateMaybeMessage<Lombric>(nullptr);
  }

  Lombric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lombric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lombric& from);
  void MergeFrom(const Lombric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lombric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Lombric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdLombFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
    kVieFieldNumber = 4,
  };
  // uint32 id_lomb = 1;
  void clear_id_lomb();
  ::PROTOBUF_NAMESPACE_ID::uint32 id_lomb() const;
  void set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id_lomb() const;
  void _internal_set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pos_x = 2;
  void clear_pos_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_x() const;
  void set_pos_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pos_x() const;
  void _internal_set_pos_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pos_y = 3;
  void clear_pos_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_y() const;
  void set_pos_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pos_y() const;
  void _internal_set_pos_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 vie = 4;
  void clear_vie();
  ::PROTOBUF_NAMESPACE_ID::uint32 vie() const;
  void set_vie(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vie() const;
  void _internal_set_vie(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Lombric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_lomb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vie_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class End_tour :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:End_tour) */ {
 public:
  End_tour();
  virtual ~End_tour();

  End_tour(const End_tour& from);
  End_tour(End_tour&& from) noexcept
    : End_tour() {
    *this = ::std::move(from);
  }

  inline End_tour& operator=(const End_tour& from) {
    CopyFrom(from);
    return *this;
  }
  inline End_tour& operator=(End_tour&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const End_tour& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const End_tour* internal_default_instance() {
    return reinterpret_cast<const End_tour*>(
               &_End_tour_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(End_tour& a, End_tour& b) {
    a.Swap(&b);
  }
  inline void Swap(End_tour* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline End_tour* New() const final {
    return CreateMaybeMessage<End_tour>(nullptr);
  }

  End_tour* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<End_tour>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const End_tour& from);
  void MergeFrom(const End_tour& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(End_tour* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "End_tour";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdLombMortFieldNumber = 1,
  };
  // repeated uint32 id_lomb_mort = 1;
  int id_lomb_mort_size() const;
  private:
  int _internal_id_lomb_mort_size() const;
  public:
  void clear_id_lomb_mort();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id_lomb_mort(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_id_lomb_mort() const;
  void _internal_add_id_lomb_mort(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_id_lomb_mort();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 id_lomb_mort(int index) const;
  void set_id_lomb_mort(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_id_lomb_mort(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      id_lomb_mort() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_id_lomb_mort();

  // @@protoc_insertion_point(class_scope:End_tour)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > id_lomb_mort_;
  mutable std::atomic<int> _id_lomb_mort_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Next_lombric :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Next_lombric) */ {
 public:
  Next_lombric();
  virtual ~Next_lombric();

  Next_lombric(const Next_lombric& from);
  Next_lombric(Next_lombric&& from) noexcept
    : Next_lombric() {
    *this = ::std::move(from);
  }

  inline Next_lombric& operator=(const Next_lombric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Next_lombric& operator=(Next_lombric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Next_lombric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Next_lombric* internal_default_instance() {
    return reinterpret_cast<const Next_lombric*>(
               &_Next_lombric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(Next_lombric& a, Next_lombric& b) {
    a.Swap(&b);
  }
  inline void Swap(Next_lombric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Next_lombric* New() const final {
    return CreateMaybeMessage<Next_lombric>(nullptr);
  }

  Next_lombric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Next_lombric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Next_lombric& from);
  void MergeFrom(const Next_lombric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Next_lombric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Next_lombric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdLombFieldNumber = 1,
    kIsYoursFieldNumber = 2,
  };
  // uint32 id_lomb = 1;
  void clear_id_lomb();
  ::PROTOBUF_NAMESPACE_ID::uint32 id_lomb() const;
  void set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id_lomb() const;
  void _internal_set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_yours = 2;
  void clear_is_yours();
  bool is_yours() const;
  void set_is_yours(bool value);
  private:
  bool _internal_is_yours() const;
  void _internal_set_is_yours(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Next_lombric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_lomb_;
  bool is_yours_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class infoPartie_p :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:infoPartie_p) */ {
 public:
  infoPartie_p();
  virtual ~infoPartie_p();

  infoPartie_p(const infoPartie_p& from);
  infoPartie_p(infoPartie_p&& from) noexcept
    : infoPartie_p() {
    *this = ::std::move(from);
  }

  inline infoPartie_p& operator=(const infoPartie_p& from) {
    CopyFrom(from);
    return *this;
  }
  inline infoPartie_p& operator=(infoPartie_p&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const infoPartie_p& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const infoPartie_p* internal_default_instance() {
    return reinterpret_cast<const infoPartie_p*>(
               &_infoPartie_p_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(infoPartie_p& a, infoPartie_p& b) {
    a.Swap(&b);
  }
  inline void Swap(infoPartie_p* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline infoPartie_p* New() const final {
    return CreateMaybeMessage<infoPartie_p>(nullptr);
  }

  infoPartie_p* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<infoPartie_p>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const infoPartie_p& from);
  void MergeFrom(const infoPartie_p& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(infoPartie_p* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "infoPartie_p";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLombFieldNumber = 1,
  };
  // repeated .Lombric lomb = 1;
  int lomb_size() const;
  private:
  int _internal_lomb_size() const;
  public:
  void clear_lomb();
  ::Lombric* mutable_lomb(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lombric >*
      mutable_lomb();
  private:
  const ::Lombric& _internal_lomb(int index) const;
  ::Lombric* _internal_add_lomb();
  public:
  const ::Lombric& lomb(int index) const;
  ::Lombric* add_lomb();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lombric >&
      lomb() const;

  // @@protoc_insertion_point(class_scope:infoPartie_p)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lombric > lomb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class infoRoom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:infoRoom) */ {
 public:
  infoRoom();
  virtual ~infoRoom();

  infoRoom(const infoRoom& from);
  infoRoom(infoRoom&& from) noexcept
    : infoRoom() {
    *this = ::std::move(from);
  }

  inline infoRoom& operator=(const infoRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline infoRoom& operator=(infoRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const infoRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const infoRoom* internal_default_instance() {
    return reinterpret_cast<const infoRoom*>(
               &_infoRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(infoRoom& a, infoRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(infoRoom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline infoRoom* New() const final {
    return CreateMaybeMessage<infoRoom>(nullptr);
  }

  infoRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<infoRoom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const infoRoom& from);
  void MergeFrom(const infoRoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(infoRoom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "infoRoom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJoueurFieldNumber = 5,
    kNbrLombFieldNumber = 1,
    kNbrEqFieldNumber = 2,
    kTimeRoundFieldNumber = 3,
    kMapFieldNumber = 4,
  };
  // repeated .Join_groupe_r joueur = 5;
  int joueur_size() const;
  private:
  int _internal_joueur_size() const;
  public:
  void clear_joueur();
  ::Join_groupe_r* mutable_joueur(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Join_groupe_r >*
      mutable_joueur();
  private:
  const ::Join_groupe_r& _internal_joueur(int index) const;
  ::Join_groupe_r* _internal_add_joueur();
  public:
  const ::Join_groupe_r& joueur(int index) const;
  ::Join_groupe_r* add_joueur();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Join_groupe_r >&
      joueur() const;

  // uint32 nbr_lomb = 1;
  void clear_nbr_lomb();
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_lomb() const;
  void set_nbr_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nbr_lomb() const;
  void _internal_set_nbr_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nbr_eq = 2;
  void clear_nbr_eq();
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_eq() const;
  void set_nbr_eq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nbr_eq() const;
  void _internal_set_nbr_eq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 time_round = 3;
  void clear_time_round();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_round() const;
  void set_time_round(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_round() const;
  void _internal_set_time_round(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 map = 4;
  void clear_map();
  ::PROTOBUF_NAMESPACE_ID::uint32 map() const;
  void set_map(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_map() const;
  void _internal_set_map(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:infoRoom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Join_groupe_r > joueur_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_lomb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_eq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_round_;
  ::PROTOBUF_NAMESPACE_ID::uint32 map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Create_room :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Create_room) */ {
 public:
  Create_room();
  virtual ~Create_room();

  Create_room(const Create_room& from);
  Create_room(Create_room&& from) noexcept
    : Create_room() {
    *this = ::std::move(from);
  }

  inline Create_room& operator=(const Create_room& from) {
    CopyFrom(from);
    return *this;
  }
  inline Create_room& operator=(Create_room&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Create_room& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Create_room* internal_default_instance() {
    return reinterpret_cast<const Create_room*>(
               &_Create_room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(Create_room& a, Create_room& b) {
    a.Swap(&b);
  }
  inline void Swap(Create_room* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Create_room* New() const final {
    return CreateMaybeMessage<Create_room>(nullptr);
  }

  Create_room* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Create_room>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Create_room& from);
  void MergeFrom(const Create_room& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Create_room* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Create_room";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsrIdFieldNumber = 1,
  };
  // uint32 usr_id = 1;
  void clear_usr_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 usr_id() const;
  void set_usr_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usr_id() const;
  void _internal_set_usr_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Create_room)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usr_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Create_room_id :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Create_room_id) */ {
 public:
  Create_room_id();
  virtual ~Create_room_id();

  Create_room_id(const Create_room_id& from);
  Create_room_id(Create_room_id&& from) noexcept
    : Create_room_id() {
    *this = ::std::move(from);
  }

  inline Create_room_id& operator=(const Create_room_id& from) {
    CopyFrom(from);
    return *this;
  }
  inline Create_room_id& operator=(Create_room_id&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Create_room_id& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Create_room_id* internal_default_instance() {
    return reinterpret_cast<const Create_room_id*>(
               &_Create_room_id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(Create_room_id& a, Create_room_id& b) {
    a.Swap(&b);
  }
  inline void Swap(Create_room_id* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Create_room_id* New() const final {
    return CreateMaybeMessage<Create_room_id>(nullptr);
  }

  Create_room_id* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Create_room_id>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Create_room_id& from);
  void MergeFrom(const Create_room_id& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Create_room_id* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Create_room_id";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
  };
  // uint32 room_id = 1;
  void clear_room_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 room_id() const;
  void set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_room_id() const;
  void _internal_set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Create_room_id)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 room_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class ZMQ_msg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZMQ_msg) */ {
 public:
  ZMQ_msg();
  virtual ~ZMQ_msg();

  ZMQ_msg(const ZMQ_msg& from);
  ZMQ_msg(ZMQ_msg&& from) noexcept
    : ZMQ_msg() {
    *this = ::std::move(from);
  }

  inline ZMQ_msg& operator=(const ZMQ_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZMQ_msg& operator=(ZMQ_msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZMQ_msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZMQ_msg* internal_default_instance() {
    return reinterpret_cast<const ZMQ_msg*>(
               &_ZMQ_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ZMQ_msg& a, ZMQ_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(ZMQ_msg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZMQ_msg* New() const final {
    return CreateMaybeMessage<ZMQ_msg>(nullptr);
  }

  ZMQ_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZMQ_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZMQ_msg& from);
  void MergeFrom(const ZMQ_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZMQ_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZMQ_msg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kReceiverIdFieldNumber = 1,
    kTypeMessageFieldNumber = 2,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 receiver_id = 1;
  void clear_receiver_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 receiver_id() const;
  void set_receiver_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_receiver_id() const;
  void _internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type_message = 2;
  void clear_type_message();
  ::PROTOBUF_NAMESPACE_ID::uint32 type_message() const;
  void set_type_message(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type_message() const;
  void _internal_set_type_message(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ZMQ_msg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 receiver_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserConnect

// bool isregister = 1;
inline void UserConnect::clear_isregister() {
  isregister_ = false;
}
inline bool UserConnect::_internal_isregister() const {
  return isregister_;
}
inline bool UserConnect::isregister() const {
  // @@protoc_insertion_point(field_get:UserConnect.isregister)
  return _internal_isregister();
}
inline void UserConnect::_internal_set_isregister(bool value) {
  
  isregister_ = value;
}
inline void UserConnect::set_isregister(bool value) {
  _internal_set_isregister(value);
  // @@protoc_insertion_point(field_set:UserConnect.isregister)
}

// string pseudo = 2;
inline void UserConnect::clear_pseudo() {
  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserConnect::pseudo() const {
  // @@protoc_insertion_point(field_get:UserConnect.pseudo)
  return _internal_pseudo();
}
inline void UserConnect::set_pseudo(const std::string& value) {
  _internal_set_pseudo(value);
  // @@protoc_insertion_point(field_set:UserConnect.pseudo)
}
inline std::string* UserConnect::mutable_pseudo() {
  // @@protoc_insertion_point(field_mutable:UserConnect.pseudo)
  return _internal_mutable_pseudo();
}
inline const std::string& UserConnect::_internal_pseudo() const {
  return pseudo_.GetNoArena();
}
inline void UserConnect::_internal_set_pseudo(const std::string& value) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserConnect::set_pseudo(std::string&& value) {
  
  pseudo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserConnect.pseudo)
}
inline void UserConnect::set_pseudo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserConnect.pseudo)
}
inline void UserConnect::set_pseudo(const char* value, size_t size) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserConnect.pseudo)
}
inline std::string* UserConnect::_internal_mutable_pseudo() {
  
  return pseudo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserConnect::release_pseudo() {
  // @@protoc_insertion_point(field_release:UserConnect.pseudo)
  
  return pseudo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserConnect::set_allocated_pseudo(std::string* pseudo) {
  if (pseudo != nullptr) {
    
  } else {
    
  }
  pseudo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo);
  // @@protoc_insertion_point(field_set_allocated:UserConnect.pseudo)
}

// string password = 3;
inline void UserConnect::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserConnect::password() const {
  // @@protoc_insertion_point(field_get:UserConnect.password)
  return _internal_password();
}
inline void UserConnect::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:UserConnect.password)
}
inline std::string* UserConnect::mutable_password() {
  // @@protoc_insertion_point(field_mutable:UserConnect.password)
  return _internal_mutable_password();
}
inline const std::string& UserConnect::_internal_password() const {
  return password_.GetNoArena();
}
inline void UserConnect::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserConnect::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserConnect.password)
}
inline void UserConnect::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserConnect.password)
}
inline void UserConnect::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserConnect.password)
}
inline std::string* UserConnect::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserConnect::release_password() {
  // @@protoc_insertion_point(field_release:UserConnect.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserConnect::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:UserConnect.password)
}

// -------------------------------------------------------------------

// Chat

// string pseudo = 1;
inline void Chat::clear_pseudo() {
  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chat::pseudo() const {
  // @@protoc_insertion_point(field_get:Chat.pseudo)
  return _internal_pseudo();
}
inline void Chat::set_pseudo(const std::string& value) {
  _internal_set_pseudo(value);
  // @@protoc_insertion_point(field_set:Chat.pseudo)
}
inline std::string* Chat::mutable_pseudo() {
  // @@protoc_insertion_point(field_mutable:Chat.pseudo)
  return _internal_mutable_pseudo();
}
inline const std::string& Chat::_internal_pseudo() const {
  return pseudo_.GetNoArena();
}
inline void Chat::_internal_set_pseudo(const std::string& value) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Chat::set_pseudo(std::string&& value) {
  
  pseudo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.pseudo)
}
inline void Chat::set_pseudo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.pseudo)
}
inline void Chat::set_pseudo(const char* value, size_t size) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.pseudo)
}
inline std::string* Chat::_internal_mutable_pseudo() {
  
  return pseudo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chat::release_pseudo() {
  // @@protoc_insertion_point(field_release:Chat.pseudo)
  
  return pseudo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chat::set_allocated_pseudo(std::string* pseudo) {
  if (pseudo != nullptr) {
    
  } else {
    
  }
  pseudo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo);
  // @@protoc_insertion_point(field_set_allocated:Chat.pseudo)
}

// string msg = 2;
inline void Chat::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chat::msg() const {
  // @@protoc_insertion_point(field_get:Chat.msg)
  return _internal_msg();
}
inline void Chat::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:Chat.msg)
}
inline std::string* Chat::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Chat.msg)
  return _internal_mutable_msg();
}
inline const std::string& Chat::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void Chat::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Chat::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.msg)
}
inline void Chat::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.msg)
}
inline void Chat::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.msg)
}
inline std::string* Chat::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chat::release_msg() {
  // @@protoc_insertion_point(field_release:Chat.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chat::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Chat.msg)
}

// -------------------------------------------------------------------

// Chat_r

// repeated .Chat msgs = 1;
inline int Chat_r::_internal_msgs_size() const {
  return msgs_.size();
}
inline int Chat_r::msgs_size() const {
  return _internal_msgs_size();
}
inline void Chat_r::clear_msgs() {
  msgs_.Clear();
}
inline ::Chat* Chat_r::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:Chat_r.msgs)
  return msgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat >*
Chat_r::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:Chat_r.msgs)
  return &msgs_;
}
inline const ::Chat& Chat_r::_internal_msgs(int index) const {
  return msgs_.Get(index);
}
inline const ::Chat& Chat_r::msgs(int index) const {
  // @@protoc_insertion_point(field_get:Chat_r.msgs)
  return _internal_msgs(index);
}
inline ::Chat* Chat_r::_internal_add_msgs() {
  return msgs_.Add();
}
inline ::Chat* Chat_r::add_msgs() {
  // @@protoc_insertion_point(field_add:Chat_r.msgs)
  return _internal_add_msgs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat >&
Chat_r::msgs() const {
  // @@protoc_insertion_point(field_list:Chat_r.msgs)
  return msgs_;
}

// -------------------------------------------------------------------

// Chat_broker

// uint32 usr_id = 1;
inline void Chat_broker::clear_usr_id() {
  usr_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Chat_broker::_internal_usr_id() const {
  return usr_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Chat_broker::usr_id() const {
  // @@protoc_insertion_point(field_get:Chat_broker.usr_id)
  return _internal_usr_id();
}
inline void Chat_broker::_internal_set_usr_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  usr_id_ = value;
}
inline void Chat_broker::set_usr_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usr_id(value);
  // @@protoc_insertion_point(field_set:Chat_broker.usr_id)
}

// -------------------------------------------------------------------

// convo_s

// string pseudo = 1;
inline void convo_s::clear_pseudo() {
  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& convo_s::pseudo() const {
  // @@protoc_insertion_point(field_get:convo_s.pseudo)
  return _internal_pseudo();
}
inline void convo_s::set_pseudo(const std::string& value) {
  _internal_set_pseudo(value);
  // @@protoc_insertion_point(field_set:convo_s.pseudo)
}
inline std::string* convo_s::mutable_pseudo() {
  // @@protoc_insertion_point(field_mutable:convo_s.pseudo)
  return _internal_mutable_pseudo();
}
inline const std::string& convo_s::_internal_pseudo() const {
  return pseudo_.GetNoArena();
}
inline void convo_s::_internal_set_pseudo(const std::string& value) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void convo_s::set_pseudo(std::string&& value) {
  
  pseudo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:convo_s.pseudo)
}
inline void convo_s::set_pseudo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:convo_s.pseudo)
}
inline void convo_s::set_pseudo(const char* value, size_t size) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:convo_s.pseudo)
}
inline std::string* convo_s::_internal_mutable_pseudo() {
  
  return pseudo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* convo_s::release_pseudo() {
  // @@protoc_insertion_point(field_release:convo_s.pseudo)
  
  return pseudo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void convo_s::set_allocated_pseudo(std::string* pseudo) {
  if (pseudo != nullptr) {
    
  } else {
    
  }
  pseudo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo);
  // @@protoc_insertion_point(field_set_allocated:convo_s.pseudo)
}

// -------------------------------------------------------------------

// Invitation

// string pseudo = 1;
inline void Invitation::clear_pseudo() {
  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Invitation::pseudo() const {
  // @@protoc_insertion_point(field_get:Invitation.pseudo)
  return _internal_pseudo();
}
inline void Invitation::set_pseudo(const std::string& value) {
  _internal_set_pseudo(value);
  // @@protoc_insertion_point(field_set:Invitation.pseudo)
}
inline std::string* Invitation::mutable_pseudo() {
  // @@protoc_insertion_point(field_mutable:Invitation.pseudo)
  return _internal_mutable_pseudo();
}
inline const std::string& Invitation::_internal_pseudo() const {
  return pseudo_.GetNoArena();
}
inline void Invitation::_internal_set_pseudo(const std::string& value) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Invitation::set_pseudo(std::string&& value) {
  
  pseudo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Invitation.pseudo)
}
inline void Invitation::set_pseudo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Invitation.pseudo)
}
inline void Invitation::set_pseudo(const char* value, size_t size) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Invitation.pseudo)
}
inline std::string* Invitation::_internal_mutable_pseudo() {
  
  return pseudo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Invitation::release_pseudo() {
  // @@protoc_insertion_point(field_release:Invitation.pseudo)
  
  return pseudo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Invitation::set_allocated_pseudo(std::string* pseudo) {
  if (pseudo != nullptr) {
    
  } else {
    
  }
  pseudo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo);
  // @@protoc_insertion_point(field_set_allocated:Invitation.pseudo)
}

// bool type = 2;
inline void Invitation::clear_type() {
  type_ = false;
}
inline bool Invitation::_internal_type() const {
  return type_;
}
inline bool Invitation::type() const {
  // @@protoc_insertion_point(field_get:Invitation.type)
  return _internal_type();
}
inline void Invitation::_internal_set_type(bool value) {
  
  type_ = value;
}
inline void Invitation::set_type(bool value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Invitation.type)
}

// uint32 game_id = 3;
inline void Invitation::clear_game_id() {
  game_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Invitation::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Invitation::game_id() const {
  // @@protoc_insertion_point(field_get:Invitation.game_id)
  return _internal_game_id();
}
inline void Invitation::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_id_ = value;
}
inline void Invitation::set_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:Invitation.game_id)
}

// -------------------------------------------------------------------

// Invitation_r

// repeated .Invitation invits = 1;
inline int Invitation_r::_internal_invits_size() const {
  return invits_.size();
}
inline int Invitation_r::invits_size() const {
  return _internal_invits_size();
}
inline void Invitation_r::clear_invits() {
  invits_.Clear();
}
inline ::Invitation* Invitation_r::mutable_invits(int index) {
  // @@protoc_insertion_point(field_mutable:Invitation_r.invits)
  return invits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Invitation >*
Invitation_r::mutable_invits() {
  // @@protoc_insertion_point(field_mutable_list:Invitation_r.invits)
  return &invits_;
}
inline const ::Invitation& Invitation_r::_internal_invits(int index) const {
  return invits_.Get(index);
}
inline const ::Invitation& Invitation_r::invits(int index) const {
  // @@protoc_insertion_point(field_get:Invitation_r.invits)
  return _internal_invits(index);
}
inline ::Invitation* Invitation_r::_internal_add_invits() {
  return invits_.Add();
}
inline ::Invitation* Invitation_r::add_invits() {
  // @@protoc_insertion_point(field_add:Invitation_r.invits)
  return _internal_add_invits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Invitation >&
Invitation_r::invits() const {
  // @@protoc_insertion_point(field_list:Invitation_r.invits)
  return invits_;
}

// -------------------------------------------------------------------

// Join

// string pseudo = 1;
inline void Join::clear_pseudo() {
  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Join::pseudo() const {
  // @@protoc_insertion_point(field_get:Join.pseudo)
  return _internal_pseudo();
}
inline void Join::set_pseudo(const std::string& value) {
  _internal_set_pseudo(value);
  // @@protoc_insertion_point(field_set:Join.pseudo)
}
inline std::string* Join::mutable_pseudo() {
  // @@protoc_insertion_point(field_mutable:Join.pseudo)
  return _internal_mutable_pseudo();
}
inline const std::string& Join::_internal_pseudo() const {
  return pseudo_.GetNoArena();
}
inline void Join::_internal_set_pseudo(const std::string& value) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Join::set_pseudo(std::string&& value) {
  
  pseudo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Join.pseudo)
}
inline void Join::set_pseudo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Join.pseudo)
}
inline void Join::set_pseudo(const char* value, size_t size) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Join.pseudo)
}
inline std::string* Join::_internal_mutable_pseudo() {
  
  return pseudo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Join::release_pseudo() {
  // @@protoc_insertion_point(field_release:Join.pseudo)
  
  return pseudo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Join::set_allocated_pseudo(std::string* pseudo) {
  if (pseudo != nullptr) {
    
  } else {
    
  }
  pseudo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo);
  // @@protoc_insertion_point(field_set_allocated:Join.pseudo)
}

// -------------------------------------------------------------------

// Lomb_r

// repeated string Lombs = 1;
inline int Lomb_r::_internal_lombs_size() const {
  return lombs_.size();
}
inline int Lomb_r::lombs_size() const {
  return _internal_lombs_size();
}
inline void Lomb_r::clear_lombs() {
  lombs_.Clear();
}
inline std::string* Lomb_r::add_lombs() {
  // @@protoc_insertion_point(field_add_mutable:Lomb_r.Lombs)
  return _internal_add_lombs();
}
inline const std::string& Lomb_r::_internal_lombs(int index) const {
  return lombs_.Get(index);
}
inline const std::string& Lomb_r::lombs(int index) const {
  // @@protoc_insertion_point(field_get:Lomb_r.Lombs)
  return _internal_lombs(index);
}
inline std::string* Lomb_r::mutable_lombs(int index) {
  // @@protoc_insertion_point(field_mutable:Lomb_r.Lombs)
  return lombs_.Mutable(index);
}
inline void Lomb_r::set_lombs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Lomb_r.Lombs)
  lombs_.Mutable(index)->assign(value);
}
inline void Lomb_r::set_lombs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Lomb_r.Lombs)
  lombs_.Mutable(index)->assign(std::move(value));
}
inline void Lomb_r::set_lombs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lombs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Lomb_r.Lombs)
}
inline void Lomb_r::set_lombs(int index, const char* value, size_t size) {
  lombs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Lomb_r.Lombs)
}
inline std::string* Lomb_r::_internal_add_lombs() {
  return lombs_.Add();
}
inline void Lomb_r::add_lombs(const std::string& value) {
  lombs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Lomb_r.Lombs)
}
inline void Lomb_r::add_lombs(std::string&& value) {
  lombs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Lomb_r.Lombs)
}
inline void Lomb_r::add_lombs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lombs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Lomb_r.Lombs)
}
inline void Lomb_r::add_lombs(const char* value, size_t size) {
  lombs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Lomb_r.Lombs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Lomb_r::lombs() const {
  // @@protoc_insertion_point(field_list:Lomb_r.Lombs)
  return lombs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Lomb_r::mutable_lombs() {
  // @@protoc_insertion_point(field_mutable_list:Lomb_r.Lombs)
  return &lombs_;
}

// -------------------------------------------------------------------

// Lomb_mod

// uint32 id_lomb = 1;
inline void Lomb_mod::clear_id_lomb() {
  id_lomb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lomb_mod::_internal_id_lomb() const {
  return id_lomb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lomb_mod::id_lomb() const {
  // @@protoc_insertion_point(field_get:Lomb_mod.id_lomb)
  return _internal_id_lomb();
}
inline void Lomb_mod::_internal_set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_lomb_ = value;
}
inline void Lomb_mod::set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id_lomb(value);
  // @@protoc_insertion_point(field_set:Lomb_mod.id_lomb)
}

// string name_Lomb = 2;
inline void Lomb_mod::clear_name_lomb() {
  name_lomb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Lomb_mod::name_lomb() const {
  // @@protoc_insertion_point(field_get:Lomb_mod.name_Lomb)
  return _internal_name_lomb();
}
inline void Lomb_mod::set_name_lomb(const std::string& value) {
  _internal_set_name_lomb(value);
  // @@protoc_insertion_point(field_set:Lomb_mod.name_Lomb)
}
inline std::string* Lomb_mod::mutable_name_lomb() {
  // @@protoc_insertion_point(field_mutable:Lomb_mod.name_Lomb)
  return _internal_mutable_name_lomb();
}
inline const std::string& Lomb_mod::_internal_name_lomb() const {
  return name_lomb_.GetNoArena();
}
inline void Lomb_mod::_internal_set_name_lomb(const std::string& value) {
  
  name_lomb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Lomb_mod::set_name_lomb(std::string&& value) {
  
  name_lomb_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lomb_mod.name_Lomb)
}
inline void Lomb_mod::set_name_lomb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_lomb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lomb_mod.name_Lomb)
}
inline void Lomb_mod::set_name_lomb(const char* value, size_t size) {
  
  name_lomb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lomb_mod.name_Lomb)
}
inline std::string* Lomb_mod::_internal_mutable_name_lomb() {
  
  return name_lomb_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Lomb_mod::release_name_lomb() {
  // @@protoc_insertion_point(field_release:Lomb_mod.name_Lomb)
  
  return name_lomb_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Lomb_mod::set_allocated_name_lomb(std::string* name_lomb) {
  if (name_lomb != nullptr) {
    
  } else {
    
  }
  name_lomb_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_lomb);
  // @@protoc_insertion_point(field_set_allocated:Lomb_mod.name_Lomb)
}

// -------------------------------------------------------------------

// Usr_add

// string pseudo = 1;
inline void Usr_add::clear_pseudo() {
  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Usr_add::pseudo() const {
  // @@protoc_insertion_point(field_get:Usr_add.pseudo)
  return _internal_pseudo();
}
inline void Usr_add::set_pseudo(const std::string& value) {
  _internal_set_pseudo(value);
  // @@protoc_insertion_point(field_set:Usr_add.pseudo)
}
inline std::string* Usr_add::mutable_pseudo() {
  // @@protoc_insertion_point(field_mutable:Usr_add.pseudo)
  return _internal_mutable_pseudo();
}
inline const std::string& Usr_add::_internal_pseudo() const {
  return pseudo_.GetNoArena();
}
inline void Usr_add::_internal_set_pseudo(const std::string& value) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Usr_add::set_pseudo(std::string&& value) {
  
  pseudo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Usr_add.pseudo)
}
inline void Usr_add::set_pseudo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Usr_add.pseudo)
}
inline void Usr_add::set_pseudo(const char* value, size_t size) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Usr_add.pseudo)
}
inline std::string* Usr_add::_internal_mutable_pseudo() {
  
  return pseudo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Usr_add::release_pseudo() {
  // @@protoc_insertion_point(field_release:Usr_add.pseudo)
  
  return pseudo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Usr_add::set_allocated_pseudo(std::string* pseudo) {
  if (pseudo != nullptr) {
    
  } else {
    
  }
  pseudo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo);
  // @@protoc_insertion_point(field_set_allocated:Usr_add.pseudo)
}

// -------------------------------------------------------------------

// Map_mod

// uint32 id = 1;
inline void Map_mod::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_mod::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_mod::id() const {
  // @@protoc_insertion_point(field_get:Map_mod.id)
  return _internal_id();
}
inline void Map_mod::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Map_mod::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Map_mod.id)
}

// -------------------------------------------------------------------

// Time_mod

// uint32 time = 1;
inline void Time_mod::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Time_mod::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Time_mod::time() const {
  // @@protoc_insertion_point(field_get:Time_mod.time)
  return _internal_time();
}
inline void Time_mod::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void Time_mod::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Time_mod.time)
}

// -------------------------------------------------------------------

// Time_round_mod

// uint32 time = 1;
inline void Time_round_mod::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Time_round_mod::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Time_round_mod::time() const {
  // @@protoc_insertion_point(field_get:Time_round_mod.time)
  return _internal_time();
}
inline void Time_round_mod::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void Time_round_mod::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Time_round_mod.time)
}

// -------------------------------------------------------------------

// Nbr_lomb_mod

// uint32 nbr_lomb = 1;
inline void Nbr_lomb_mod::clear_nbr_lomb() {
  nbr_lomb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Nbr_lomb_mod::_internal_nbr_lomb() const {
  return nbr_lomb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Nbr_lomb_mod::nbr_lomb() const {
  // @@protoc_insertion_point(field_get:Nbr_lomb_mod.nbr_lomb)
  return _internal_nbr_lomb();
}
inline void Nbr_lomb_mod::_internal_set_nbr_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nbr_lomb_ = value;
}
inline void Nbr_lomb_mod::set_nbr_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nbr_lomb(value);
  // @@protoc_insertion_point(field_set:Nbr_lomb_mod.nbr_lomb)
}

// -------------------------------------------------------------------

// Nbr_eq_mod

// uint32 nbr_eq = 1;
inline void Nbr_eq_mod::clear_nbr_eq() {
  nbr_eq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Nbr_eq_mod::_internal_nbr_eq() const {
  return nbr_eq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Nbr_eq_mod::nbr_eq() const {
  // @@protoc_insertion_point(field_get:Nbr_eq_mod.nbr_eq)
  return _internal_nbr_eq();
}
inline void Nbr_eq_mod::_internal_set_nbr_eq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nbr_eq_ = value;
}
inline void Nbr_eq_mod::set_nbr_eq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nbr_eq(value);
  // @@protoc_insertion_point(field_set:Nbr_eq_mod.nbr_eq)
}

// -------------------------------------------------------------------

// Join_groupe_s

// uint32 id = 1;
inline void Join_groupe_s::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Join_groupe_s::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Join_groupe_s::id() const {
  // @@protoc_insertion_point(field_get:Join_groupe_s.id)
  return _internal_id();
}
inline void Join_groupe_s::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Join_groupe_s::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Join_groupe_s.id)
}

// -------------------------------------------------------------------

// Join_groupe_r

// string pseudo = 1;
inline void Join_groupe_r::clear_pseudo() {
  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Join_groupe_r::pseudo() const {
  // @@protoc_insertion_point(field_get:Join_groupe_r.pseudo)
  return _internal_pseudo();
}
inline void Join_groupe_r::set_pseudo(const std::string& value) {
  _internal_set_pseudo(value);
  // @@protoc_insertion_point(field_set:Join_groupe_r.pseudo)
}
inline std::string* Join_groupe_r::mutable_pseudo() {
  // @@protoc_insertion_point(field_mutable:Join_groupe_r.pseudo)
  return _internal_mutable_pseudo();
}
inline const std::string& Join_groupe_r::_internal_pseudo() const {
  return pseudo_.GetNoArena();
}
inline void Join_groupe_r::_internal_set_pseudo(const std::string& value) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Join_groupe_r::set_pseudo(std::string&& value) {
  
  pseudo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Join_groupe_r.pseudo)
}
inline void Join_groupe_r::set_pseudo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Join_groupe_r.pseudo)
}
inline void Join_groupe_r::set_pseudo(const char* value, size_t size) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Join_groupe_r.pseudo)
}
inline std::string* Join_groupe_r::_internal_mutable_pseudo() {
  
  return pseudo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Join_groupe_r::release_pseudo() {
  // @@protoc_insertion_point(field_release:Join_groupe_r.pseudo)
  
  return pseudo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Join_groupe_r::set_allocated_pseudo(std::string* pseudo) {
  if (pseudo != nullptr) {
    
  } else {
    
  }
  pseudo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo);
  // @@protoc_insertion_point(field_set_allocated:Join_groupe_r.pseudo)
}

// uint32 id = 2;
inline void Join_groupe_r::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Join_groupe_r::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Join_groupe_r::id() const {
  // @@protoc_insertion_point(field_get:Join_groupe_r.id)
  return _internal_id();
}
inline void Join_groupe_r::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Join_groupe_r::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Join_groupe_r.id)
}

// -------------------------------------------------------------------

// Get_history

// string pseudo = 1;
inline void Get_history::clear_pseudo() {
  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Get_history::pseudo() const {
  // @@protoc_insertion_point(field_get:Get_history.pseudo)
  return _internal_pseudo();
}
inline void Get_history::set_pseudo(const std::string& value) {
  _internal_set_pseudo(value);
  // @@protoc_insertion_point(field_set:Get_history.pseudo)
}
inline std::string* Get_history::mutable_pseudo() {
  // @@protoc_insertion_point(field_mutable:Get_history.pseudo)
  return _internal_mutable_pseudo();
}
inline const std::string& Get_history::_internal_pseudo() const {
  return pseudo_.GetNoArena();
}
inline void Get_history::_internal_set_pseudo(const std::string& value) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Get_history::set_pseudo(std::string&& value) {
  
  pseudo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Get_history.pseudo)
}
inline void Get_history::set_pseudo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Get_history.pseudo)
}
inline void Get_history::set_pseudo(const char* value, size_t size) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Get_history.pseudo)
}
inline std::string* Get_history::_internal_mutable_pseudo() {
  
  return pseudo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Get_history::release_pseudo() {
  // @@protoc_insertion_point(field_release:Get_history.pseudo)
  
  return pseudo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Get_history::set_allocated_pseudo(std::string* pseudo) {
  if (pseudo != nullptr) {
    
  } else {
    
  }
  pseudo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo);
  // @@protoc_insertion_point(field_set_allocated:Get_history.pseudo)
}

// uint32 first_game = 2;
inline void Get_history::clear_first_game() {
  first_game_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Get_history::_internal_first_game() const {
  return first_game_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Get_history::first_game() const {
  // @@protoc_insertion_point(field_get:Get_history.first_game)
  return _internal_first_game();
}
inline void Get_history::_internal_set_first_game(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  first_game_ = value;
}
inline void Get_history::set_first_game(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_first_game(value);
  // @@protoc_insertion_point(field_set:Get_history.first_game)
}

// uint32 nbr_game = 3;
inline void Get_history::clear_nbr_game() {
  nbr_game_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Get_history::_internal_nbr_game() const {
  return nbr_game_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Get_history::nbr_game() const {
  // @@protoc_insertion_point(field_get:Get_history.nbr_game)
  return _internal_nbr_game();
}
inline void Get_history::_internal_set_nbr_game(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nbr_game_ = value;
}
inline void Get_history::set_nbr_game(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nbr_game(value);
  // @@protoc_insertion_point(field_set:Get_history.nbr_game)
}

// -------------------------------------------------------------------

// History

// string pseudo_1 = 1;
inline void History::clear_pseudo_1() {
  pseudo_1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& History::pseudo_1() const {
  // @@protoc_insertion_point(field_get:History.pseudo_1)
  return _internal_pseudo_1();
}
inline void History::set_pseudo_1(const std::string& value) {
  _internal_set_pseudo_1(value);
  // @@protoc_insertion_point(field_set:History.pseudo_1)
}
inline std::string* History::mutable_pseudo_1() {
  // @@protoc_insertion_point(field_mutable:History.pseudo_1)
  return _internal_mutable_pseudo_1();
}
inline const std::string& History::_internal_pseudo_1() const {
  return pseudo_1_.GetNoArena();
}
inline void History::_internal_set_pseudo_1(const std::string& value) {
  
  pseudo_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void History::set_pseudo_1(std::string&& value) {
  
  pseudo_1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:History.pseudo_1)
}
inline void History::set_pseudo_1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:History.pseudo_1)
}
inline void History::set_pseudo_1(const char* value, size_t size) {
  
  pseudo_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:History.pseudo_1)
}
inline std::string* History::_internal_mutable_pseudo_1() {
  
  return pseudo_1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* History::release_pseudo_1() {
  // @@protoc_insertion_point(field_release:History.pseudo_1)
  
  return pseudo_1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void History::set_allocated_pseudo_1(std::string* pseudo_1) {
  if (pseudo_1 != nullptr) {
    
  } else {
    
  }
  pseudo_1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo_1);
  // @@protoc_insertion_point(field_set_allocated:History.pseudo_1)
}

// string pseudo_2 = 2;
inline void History::clear_pseudo_2() {
  pseudo_2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& History::pseudo_2() const {
  // @@protoc_insertion_point(field_get:History.pseudo_2)
  return _internal_pseudo_2();
}
inline void History::set_pseudo_2(const std::string& value) {
  _internal_set_pseudo_2(value);
  // @@protoc_insertion_point(field_set:History.pseudo_2)
}
inline std::string* History::mutable_pseudo_2() {
  // @@protoc_insertion_point(field_mutable:History.pseudo_2)
  return _internal_mutable_pseudo_2();
}
inline const std::string& History::_internal_pseudo_2() const {
  return pseudo_2_.GetNoArena();
}
inline void History::_internal_set_pseudo_2(const std::string& value) {
  
  pseudo_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void History::set_pseudo_2(std::string&& value) {
  
  pseudo_2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:History.pseudo_2)
}
inline void History::set_pseudo_2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:History.pseudo_2)
}
inline void History::set_pseudo_2(const char* value, size_t size) {
  
  pseudo_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:History.pseudo_2)
}
inline std::string* History::_internal_mutable_pseudo_2() {
  
  return pseudo_2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* History::release_pseudo_2() {
  // @@protoc_insertion_point(field_release:History.pseudo_2)
  
  return pseudo_2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void History::set_allocated_pseudo_2(std::string* pseudo_2) {
  if (pseudo_2 != nullptr) {
    
  } else {
    
  }
  pseudo_2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo_2);
  // @@protoc_insertion_point(field_set_allocated:History.pseudo_2)
}

// string pseudo_3 = 3;
inline void History::clear_pseudo_3() {
  pseudo_3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& History::pseudo_3() const {
  // @@protoc_insertion_point(field_get:History.pseudo_3)
  return _internal_pseudo_3();
}
inline void History::set_pseudo_3(const std::string& value) {
  _internal_set_pseudo_3(value);
  // @@protoc_insertion_point(field_set:History.pseudo_3)
}
inline std::string* History::mutable_pseudo_3() {
  // @@protoc_insertion_point(field_mutable:History.pseudo_3)
  return _internal_mutable_pseudo_3();
}
inline const std::string& History::_internal_pseudo_3() const {
  return pseudo_3_.GetNoArena();
}
inline void History::_internal_set_pseudo_3(const std::string& value) {
  
  pseudo_3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void History::set_pseudo_3(std::string&& value) {
  
  pseudo_3_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:History.pseudo_3)
}
inline void History::set_pseudo_3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:History.pseudo_3)
}
inline void History::set_pseudo_3(const char* value, size_t size) {
  
  pseudo_3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:History.pseudo_3)
}
inline std::string* History::_internal_mutable_pseudo_3() {
  
  return pseudo_3_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* History::release_pseudo_3() {
  // @@protoc_insertion_point(field_release:History.pseudo_3)
  
  return pseudo_3_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void History::set_allocated_pseudo_3(std::string* pseudo_3) {
  if (pseudo_3 != nullptr) {
    
  } else {
    
  }
  pseudo_3_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo_3);
  // @@protoc_insertion_point(field_set_allocated:History.pseudo_3)
}

// string pseudo_4 = 4;
inline void History::clear_pseudo_4() {
  pseudo_4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& History::pseudo_4() const {
  // @@protoc_insertion_point(field_get:History.pseudo_4)
  return _internal_pseudo_4();
}
inline void History::set_pseudo_4(const std::string& value) {
  _internal_set_pseudo_4(value);
  // @@protoc_insertion_point(field_set:History.pseudo_4)
}
inline std::string* History::mutable_pseudo_4() {
  // @@protoc_insertion_point(field_mutable:History.pseudo_4)
  return _internal_mutable_pseudo_4();
}
inline const std::string& History::_internal_pseudo_4() const {
  return pseudo_4_.GetNoArena();
}
inline void History::_internal_set_pseudo_4(const std::string& value) {
  
  pseudo_4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void History::set_pseudo_4(std::string&& value) {
  
  pseudo_4_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:History.pseudo_4)
}
inline void History::set_pseudo_4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:History.pseudo_4)
}
inline void History::set_pseudo_4(const char* value, size_t size) {
  
  pseudo_4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:History.pseudo_4)
}
inline std::string* History::_internal_mutable_pseudo_4() {
  
  return pseudo_4_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* History::release_pseudo_4() {
  // @@protoc_insertion_point(field_release:History.pseudo_4)
  
  return pseudo_4_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void History::set_allocated_pseudo_4(std::string* pseudo_4) {
  if (pseudo_4 != nullptr) {
    
  } else {
    
  }
  pseudo_4_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo_4);
  // @@protoc_insertion_point(field_set_allocated:History.pseudo_4)
}

// uint32 point_1 = 5;
inline void History::clear_point_1() {
  point_1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::_internal_point_1() const {
  return point_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::point_1() const {
  // @@protoc_insertion_point(field_get:History.point_1)
  return _internal_point_1();
}
inline void History::_internal_set_point_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  point_1_ = value;
}
inline void History::set_point_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_point_1(value);
  // @@protoc_insertion_point(field_set:History.point_1)
}

// uint32 point_2 = 6;
inline void History::clear_point_2() {
  point_2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::_internal_point_2() const {
  return point_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::point_2() const {
  // @@protoc_insertion_point(field_get:History.point_2)
  return _internal_point_2();
}
inline void History::_internal_set_point_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  point_2_ = value;
}
inline void History::set_point_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_point_2(value);
  // @@protoc_insertion_point(field_set:History.point_2)
}

// uint32 point_3 = 7;
inline void History::clear_point_3() {
  point_3_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::_internal_point_3() const {
  return point_3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::point_3() const {
  // @@protoc_insertion_point(field_get:History.point_3)
  return _internal_point_3();
}
inline void History::_internal_set_point_3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  point_3_ = value;
}
inline void History::set_point_3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_point_3(value);
  // @@protoc_insertion_point(field_set:History.point_3)
}

// uint32 point_4 = 8;
inline void History::clear_point_4() {
  point_4_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::_internal_point_4() const {
  return point_4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::point_4() const {
  // @@protoc_insertion_point(field_get:History.point_4)
  return _internal_point_4();
}
inline void History::_internal_set_point_4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  point_4_ = value;
}
inline void History::set_point_4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_point_4(value);
  // @@protoc_insertion_point(field_set:History.point_4)
}

// string date = 9;
inline void History::clear_date() {
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& History::date() const {
  // @@protoc_insertion_point(field_get:History.date)
  return _internal_date();
}
inline void History::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:History.date)
}
inline std::string* History::mutable_date() {
  // @@protoc_insertion_point(field_mutable:History.date)
  return _internal_mutable_date();
}
inline const std::string& History::_internal_date() const {
  return date_.GetNoArena();
}
inline void History::_internal_set_date(const std::string& value) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void History::set_date(std::string&& value) {
  
  date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:History.date)
}
inline void History::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:History.date)
}
inline void History::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:History.date)
}
inline std::string* History::_internal_mutable_date() {
  
  return date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* History::release_date() {
  // @@protoc_insertion_point(field_release:History.date)
  
  return date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void History::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:History.date)
}

// -------------------------------------------------------------------

// History_r

// repeated .History history = 1;
inline int History_r::_internal_history_size() const {
  return history_.size();
}
inline int History_r::history_size() const {
  return _internal_history_size();
}
inline void History_r::clear_history() {
  history_.Clear();
}
inline ::History* History_r::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:History_r.history)
  return history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::History >*
History_r::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:History_r.history)
  return &history_;
}
inline const ::History& History_r::_internal_history(int index) const {
  return history_.Get(index);
}
inline const ::History& History_r::history(int index) const {
  // @@protoc_insertion_point(field_get:History_r.history)
  return _internal_history(index);
}
inline ::History* History_r::_internal_add_history() {
  return history_.Add();
}
inline ::History* History_r::add_history() {
  // @@protoc_insertion_point(field_add:History_r.history)
  return _internal_add_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::History >&
History_r::history() const {
  // @@protoc_insertion_point(field_list:History_r.history)
  return history_;
}

// -------------------------------------------------------------------

// Get_rank

// uint32 first_player = 1;
inline void Get_rank::clear_first_player() {
  first_player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Get_rank::_internal_first_player() const {
  return first_player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Get_rank::first_player() const {
  // @@protoc_insertion_point(field_get:Get_rank.first_player)
  return _internal_first_player();
}
inline void Get_rank::_internal_set_first_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  first_player_ = value;
}
inline void Get_rank::set_first_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_first_player(value);
  // @@protoc_insertion_point(field_set:Get_rank.first_player)
}

// uint32 nbr_player = 2;
inline void Get_rank::clear_nbr_player() {
  nbr_player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Get_rank::_internal_nbr_player() const {
  return nbr_player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Get_rank::nbr_player() const {
  // @@protoc_insertion_point(field_get:Get_rank.nbr_player)
  return _internal_nbr_player();
}
inline void Get_rank::_internal_set_nbr_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nbr_player_ = value;
}
inline void Get_rank::set_nbr_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nbr_player(value);
  // @@protoc_insertion_point(field_set:Get_rank.nbr_player)
}

// -------------------------------------------------------------------

// rankInfo

// string user = 1;
inline void rankInfo::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& rankInfo::user() const {
  // @@protoc_insertion_point(field_get:rankInfo.user)
  return _internal_user();
}
inline void rankInfo::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:rankInfo.user)
}
inline std::string* rankInfo::mutable_user() {
  // @@protoc_insertion_point(field_mutable:rankInfo.user)
  return _internal_mutable_user();
}
inline const std::string& rankInfo::_internal_user() const {
  return user_.GetNoArena();
}
inline void rankInfo::_internal_set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void rankInfo::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rankInfo.user)
}
inline void rankInfo::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rankInfo.user)
}
inline void rankInfo::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rankInfo.user)
}
inline std::string* rankInfo::_internal_mutable_user() {
  
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* rankInfo::release_user() {
  // @@protoc_insertion_point(field_release:rankInfo.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void rankInfo::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:rankInfo.user)
}

// uint32 point = 2;
inline void rankInfo::clear_point() {
  point_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rankInfo::_internal_point() const {
  return point_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rankInfo::point() const {
  // @@protoc_insertion_point(field_get:rankInfo.point)
  return _internal_point();
}
inline void rankInfo::_internal_set_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  point_ = value;
}
inline void rankInfo::set_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:rankInfo.point)
}

// -------------------------------------------------------------------

// Rank_r

// repeated .rankInfo players = 1;
inline int Rank_r::_internal_players_size() const {
  return players_.size();
}
inline int Rank_r::players_size() const {
  return _internal_players_size();
}
inline void Rank_r::clear_players() {
  players_.Clear();
}
inline ::rankInfo* Rank_r::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Rank_r.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rankInfo >*
Rank_r::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Rank_r.players)
  return &players_;
}
inline const ::rankInfo& Rank_r::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::rankInfo& Rank_r::players(int index) const {
  // @@protoc_insertion_point(field_get:Rank_r.players)
  return _internal_players(index);
}
inline ::rankInfo* Rank_r::_internal_add_players() {
  return players_.Add();
}
inline ::rankInfo* Rank_r::add_players() {
  // @@protoc_insertion_point(field_add:Rank_r.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rankInfo >&
Rank_r::players() const {
  // @@protoc_insertion_point(field_list:Rank_r.players)
  return players_;
}

// -------------------------------------------------------------------

// Fri_add

// string user = 1;
inline void Fri_add::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Fri_add::user() const {
  // @@protoc_insertion_point(field_get:Fri_add.user)
  return _internal_user();
}
inline void Fri_add::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:Fri_add.user)
}
inline std::string* Fri_add::mutable_user() {
  // @@protoc_insertion_point(field_mutable:Fri_add.user)
  return _internal_mutable_user();
}
inline const std::string& Fri_add::_internal_user() const {
  return user_.GetNoArena();
}
inline void Fri_add::_internal_set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Fri_add::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Fri_add.user)
}
inline void Fri_add::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Fri_add.user)
}
inline void Fri_add::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Fri_add.user)
}
inline std::string* Fri_add::_internal_mutable_user() {
  
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Fri_add::release_user() {
  // @@protoc_insertion_point(field_release:Fri_add.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Fri_add::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:Fri_add.user)
}

// -------------------------------------------------------------------

// Fri_rcv

// string user = 1;
inline void Fri_rcv::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Fri_rcv::user() const {
  // @@protoc_insertion_point(field_get:Fri_rcv.user)
  return _internal_user();
}
inline void Fri_rcv::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:Fri_rcv.user)
}
inline std::string* Fri_rcv::mutable_user() {
  // @@protoc_insertion_point(field_mutable:Fri_rcv.user)
  return _internal_mutable_user();
}
inline const std::string& Fri_rcv::_internal_user() const {
  return user_.GetNoArena();
}
inline void Fri_rcv::_internal_set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Fri_rcv::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Fri_rcv.user)
}
inline void Fri_rcv::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Fri_rcv.user)
}
inline void Fri_rcv::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Fri_rcv.user)
}
inline std::string* Fri_rcv::_internal_mutable_user() {
  
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Fri_rcv::release_user() {
  // @@protoc_insertion_point(field_release:Fri_rcv.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Fri_rcv::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:Fri_rcv.user)
}

// -------------------------------------------------------------------

// Fri_accept

// bool accept = 1;
inline void Fri_accept::clear_accept() {
  accept_ = false;
}
inline bool Fri_accept::_internal_accept() const {
  return accept_;
}
inline bool Fri_accept::accept() const {
  // @@protoc_insertion_point(field_get:Fri_accept.accept)
  return _internal_accept();
}
inline void Fri_accept::_internal_set_accept(bool value) {
  
  accept_ = value;
}
inline void Fri_accept::set_accept(bool value) {
  _internal_set_accept(value);
  // @@protoc_insertion_point(field_set:Fri_accept.accept)
}

// string user = 2;
inline void Fri_accept::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Fri_accept::user() const {
  // @@protoc_insertion_point(field_get:Fri_accept.user)
  return _internal_user();
}
inline void Fri_accept::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:Fri_accept.user)
}
inline std::string* Fri_accept::mutable_user() {
  // @@protoc_insertion_point(field_mutable:Fri_accept.user)
  return _internal_mutable_user();
}
inline const std::string& Fri_accept::_internal_user() const {
  return user_.GetNoArena();
}
inline void Fri_accept::_internal_set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Fri_accept::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Fri_accept.user)
}
inline void Fri_accept::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Fri_accept.user)
}
inline void Fri_accept::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Fri_accept.user)
}
inline std::string* Fri_accept::_internal_mutable_user() {
  
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Fri_accept::release_user() {
  // @@protoc_insertion_point(field_release:Fri_accept.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Fri_accept::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:Fri_accept.user)
}

// -------------------------------------------------------------------

// Fri_rmv

// string user = 1;
inline void Fri_rmv::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Fri_rmv::user() const {
  // @@protoc_insertion_point(field_get:Fri_rmv.user)
  return _internal_user();
}
inline void Fri_rmv::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:Fri_rmv.user)
}
inline std::string* Fri_rmv::mutable_user() {
  // @@protoc_insertion_point(field_mutable:Fri_rmv.user)
  return _internal_mutable_user();
}
inline const std::string& Fri_rmv::_internal_user() const {
  return user_.GetNoArena();
}
inline void Fri_rmv::_internal_set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Fri_rmv::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Fri_rmv.user)
}
inline void Fri_rmv::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Fri_rmv.user)
}
inline void Fri_rmv::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Fri_rmv.user)
}
inline std::string* Fri_rmv::_internal_mutable_user() {
  
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Fri_rmv::release_user() {
  // @@protoc_insertion_point(field_release:Fri_rmv.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Fri_rmv::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:Fri_rmv.user)
}

// -------------------------------------------------------------------

// Fri_ls_r

// repeated string user = 1;
inline int Fri_ls_r::_internal_user_size() const {
  return user_.size();
}
inline int Fri_ls_r::user_size() const {
  return _internal_user_size();
}
inline void Fri_ls_r::clear_user() {
  user_.Clear();
}
inline std::string* Fri_ls_r::add_user() {
  // @@protoc_insertion_point(field_add_mutable:Fri_ls_r.user)
  return _internal_add_user();
}
inline const std::string& Fri_ls_r::_internal_user(int index) const {
  return user_.Get(index);
}
inline const std::string& Fri_ls_r::user(int index) const {
  // @@protoc_insertion_point(field_get:Fri_ls_r.user)
  return _internal_user(index);
}
inline std::string* Fri_ls_r::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:Fri_ls_r.user)
  return user_.Mutable(index);
}
inline void Fri_ls_r::set_user(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Fri_ls_r.user)
  user_.Mutable(index)->assign(value);
}
inline void Fri_ls_r::set_user(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Fri_ls_r.user)
  user_.Mutable(index)->assign(std::move(value));
}
inline void Fri_ls_r::set_user(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Fri_ls_r.user)
}
inline void Fri_ls_r::set_user(int index, const char* value, size_t size) {
  user_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Fri_ls_r.user)
}
inline std::string* Fri_ls_r::_internal_add_user() {
  return user_.Add();
}
inline void Fri_ls_r::add_user(const std::string& value) {
  user_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Fri_ls_r.user)
}
inline void Fri_ls_r::add_user(std::string&& value) {
  user_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Fri_ls_r.user)
}
inline void Fri_ls_r::add_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Fri_ls_r.user)
}
inline void Fri_ls_r::add_user(const char* value, size_t size) {
  user_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Fri_ls_r.user)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Fri_ls_r::user() const {
  // @@protoc_insertion_point(field_list:Fri_ls_r.user)
  return user_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Fri_ls_r::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:Fri_ls_r.user)
  return &user_;
}

// -------------------------------------------------------------------

// Lomb_pos

// uint32 id_lomb = 1;
inline void Lomb_pos::clear_id_lomb() {
  id_lomb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lomb_pos::_internal_id_lomb() const {
  return id_lomb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lomb_pos::id_lomb() const {
  // @@protoc_insertion_point(field_get:Lomb_pos.id_lomb)
  return _internal_id_lomb();
}
inline void Lomb_pos::_internal_set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_lomb_ = value;
}
inline void Lomb_pos::set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id_lomb(value);
  // @@protoc_insertion_point(field_set:Lomb_pos.id_lomb)
}

// uint32 pos_x = 2;
inline void Lomb_pos::clear_pos_x() {
  pos_x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lomb_pos::_internal_pos_x() const {
  return pos_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lomb_pos::pos_x() const {
  // @@protoc_insertion_point(field_get:Lomb_pos.pos_x)
  return _internal_pos_x();
}
inline void Lomb_pos::_internal_set_pos_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pos_x_ = value;
}
inline void Lomb_pos::set_pos_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:Lomb_pos.pos_x)
}

// uint32 pos_y = 3;
inline void Lomb_pos::clear_pos_y() {
  pos_y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lomb_pos::_internal_pos_y() const {
  return pos_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lomb_pos::pos_y() const {
  // @@protoc_insertion_point(field_get:Lomb_pos.pos_y)
  return _internal_pos_y();
}
inline void Lomb_pos::_internal_set_pos_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pos_y_ = value;
}
inline void Lomb_pos::set_pos_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:Lomb_pos.pos_y)
}

// -------------------------------------------------------------------

// Tir

// uint32 id_arme = 1;
inline void Tir::clear_id_arme() {
  id_arme_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tir::_internal_id_arme() const {
  return id_arme_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tir::id_arme() const {
  // @@protoc_insertion_point(field_get:Tir.id_arme)
  return _internal_id_arme();
}
inline void Tir::_internal_set_id_arme(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_arme_ = value;
}
inline void Tir::set_id_arme(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id_arme(value);
  // @@protoc_insertion_point(field_set:Tir.id_arme)
}

// uint32 force = 2;
inline void Tir::clear_force() {
  force_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tir::_internal_force() const {
  return force_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tir::force() const {
  // @@protoc_insertion_point(field_get:Tir.force)
  return _internal_force();
}
inline void Tir::_internal_set_force(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  force_ = value;
}
inline void Tir::set_force(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:Tir.force)
}

// double angle = 3;
inline void Tir::clear_angle() {
  angle_ = 0;
}
inline double Tir::_internal_angle() const {
  return angle_;
}
inline double Tir::angle() const {
  // @@protoc_insertion_point(field_get:Tir.angle)
  return _internal_angle();
}
inline void Tir::_internal_set_angle(double value) {
  
  angle_ = value;
}
inline void Tir::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:Tir.angle)
}

// -------------------------------------------------------------------

// Projectiles

// uint32 id_projectile = 1;
inline void Projectiles::clear_id_projectile() {
  id_projectile_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Projectiles::_internal_id_projectile() const {
  return id_projectile_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Projectiles::id_projectile() const {
  // @@protoc_insertion_point(field_get:Projectiles.id_projectile)
  return _internal_id_projectile();
}
inline void Projectiles::_internal_set_id_projectile(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_projectile_ = value;
}
inline void Projectiles::set_id_projectile(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id_projectile(value);
  // @@protoc_insertion_point(field_set:Projectiles.id_projectile)
}

// repeated uint32 block = 2;
inline int Projectiles::_internal_block_size() const {
  return block_.size();
}
inline int Projectiles::block_size() const {
  return _internal_block_size();
}
inline void Projectiles::clear_block() {
  block_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Projectiles::_internal_block(int index) const {
  return block_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Projectiles::block(int index) const {
  // @@protoc_insertion_point(field_get:Projectiles.block)
  return _internal_block(index);
}
inline void Projectiles::set_block(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  block_.Set(index, value);
  // @@protoc_insertion_point(field_set:Projectiles.block)
}
inline void Projectiles::_internal_add_block(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  block_.Add(value);
}
inline void Projectiles::add_block(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_block(value);
  // @@protoc_insertion_point(field_add:Projectiles.block)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Projectiles::_internal_block() const {
  return block_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Projectiles::block() const {
  // @@protoc_insertion_point(field_list:Projectiles.block)
  return _internal_block();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Projectiles::_internal_mutable_block() {
  return &block_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Projectiles::mutable_block() {
  // @@protoc_insertion_point(field_mutable_list:Projectiles.block)
  return _internal_mutable_block();
}

// -------------------------------------------------------------------

// List_Projectiles

// repeated .Projectiles list_proj = 1;
inline int List_Projectiles::_internal_list_proj_size() const {
  return list_proj_.size();
}
inline int List_Projectiles::list_proj_size() const {
  return _internal_list_proj_size();
}
inline void List_Projectiles::clear_list_proj() {
  list_proj_.Clear();
}
inline ::Projectiles* List_Projectiles::mutable_list_proj(int index) {
  // @@protoc_insertion_point(field_mutable:List_Projectiles.list_proj)
  return list_proj_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Projectiles >*
List_Projectiles::mutable_list_proj() {
  // @@protoc_insertion_point(field_mutable_list:List_Projectiles.list_proj)
  return &list_proj_;
}
inline const ::Projectiles& List_Projectiles::_internal_list_proj(int index) const {
  return list_proj_.Get(index);
}
inline const ::Projectiles& List_Projectiles::list_proj(int index) const {
  // @@protoc_insertion_point(field_get:List_Projectiles.list_proj)
  return _internal_list_proj(index);
}
inline ::Projectiles* List_Projectiles::_internal_add_list_proj() {
  return list_proj_.Add();
}
inline ::Projectiles* List_Projectiles::add_list_proj() {
  // @@protoc_insertion_point(field_add:List_Projectiles.list_proj)
  return _internal_add_list_proj();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Projectiles >&
List_Projectiles::list_proj() const {
  // @@protoc_insertion_point(field_list:List_Projectiles.list_proj)
  return list_proj_;
}

// -------------------------------------------------------------------

// Block_Destroy

// repeated uint32 coord = 1;
inline int Block_Destroy::_internal_coord_size() const {
  return coord_.size();
}
inline int Block_Destroy::coord_size() const {
  return _internal_coord_size();
}
inline void Block_Destroy::clear_coord() {
  coord_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block_Destroy::_internal_coord(int index) const {
  return coord_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Block_Destroy::coord(int index) const {
  // @@protoc_insertion_point(field_get:Block_Destroy.coord)
  return _internal_coord(index);
}
inline void Block_Destroy::set_coord(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  coord_.Set(index, value);
  // @@protoc_insertion_point(field_set:Block_Destroy.coord)
}
inline void Block_Destroy::_internal_add_coord(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  coord_.Add(value);
}
inline void Block_Destroy::add_coord(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_coord(value);
  // @@protoc_insertion_point(field_add:Block_Destroy.coord)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Block_Destroy::_internal_coord() const {
  return coord_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Block_Destroy::coord() const {
  // @@protoc_insertion_point(field_list:Block_Destroy.coord)
  return _internal_coord();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Block_Destroy::_internal_mutable_coord() {
  return &coord_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Block_Destroy::mutable_coord() {
  // @@protoc_insertion_point(field_mutable_list:Block_Destroy.coord)
  return _internal_mutable_coord();
}

// -------------------------------------------------------------------

// Degats_lombric

// repeated .Lombric lomb_upt = 1;
inline int Degats_lombric::_internal_lomb_upt_size() const {
  return lomb_upt_.size();
}
inline int Degats_lombric::lomb_upt_size() const {
  return _internal_lomb_upt_size();
}
inline void Degats_lombric::clear_lomb_upt() {
  lomb_upt_.Clear();
}
inline ::Lombric* Degats_lombric::mutable_lomb_upt(int index) {
  // @@protoc_insertion_point(field_mutable:Degats_lombric.lomb_upt)
  return lomb_upt_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lombric >*
Degats_lombric::mutable_lomb_upt() {
  // @@protoc_insertion_point(field_mutable_list:Degats_lombric.lomb_upt)
  return &lomb_upt_;
}
inline const ::Lombric& Degats_lombric::_internal_lomb_upt(int index) const {
  return lomb_upt_.Get(index);
}
inline const ::Lombric& Degats_lombric::lomb_upt(int index) const {
  // @@protoc_insertion_point(field_get:Degats_lombric.lomb_upt)
  return _internal_lomb_upt(index);
}
inline ::Lombric* Degats_lombric::_internal_add_lomb_upt() {
  return lomb_upt_.Add();
}
inline ::Lombric* Degats_lombric::add_lomb_upt() {
  // @@protoc_insertion_point(field_add:Degats_lombric.lomb_upt)
  return _internal_add_lomb_upt();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lombric >&
Degats_lombric::lomb_upt() const {
  // @@protoc_insertion_point(field_list:Degats_lombric.lomb_upt)
  return lomb_upt_;
}

// -------------------------------------------------------------------

// Lombric

// uint32 id_lomb = 1;
inline void Lombric::clear_id_lomb() {
  id_lomb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lombric::_internal_id_lomb() const {
  return id_lomb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lombric::id_lomb() const {
  // @@protoc_insertion_point(field_get:Lombric.id_lomb)
  return _internal_id_lomb();
}
inline void Lombric::_internal_set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_lomb_ = value;
}
inline void Lombric::set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id_lomb(value);
  // @@protoc_insertion_point(field_set:Lombric.id_lomb)
}

// uint32 pos_x = 2;
inline void Lombric::clear_pos_x() {
  pos_x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lombric::_internal_pos_x() const {
  return pos_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lombric::pos_x() const {
  // @@protoc_insertion_point(field_get:Lombric.pos_x)
  return _internal_pos_x();
}
inline void Lombric::_internal_set_pos_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pos_x_ = value;
}
inline void Lombric::set_pos_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:Lombric.pos_x)
}

// uint32 pos_y = 3;
inline void Lombric::clear_pos_y() {
  pos_y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lombric::_internal_pos_y() const {
  return pos_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lombric::pos_y() const {
  // @@protoc_insertion_point(field_get:Lombric.pos_y)
  return _internal_pos_y();
}
inline void Lombric::_internal_set_pos_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pos_y_ = value;
}
inline void Lombric::set_pos_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:Lombric.pos_y)
}

// uint32 vie = 4;
inline void Lombric::clear_vie() {
  vie_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lombric::_internal_vie() const {
  return vie_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lombric::vie() const {
  // @@protoc_insertion_point(field_get:Lombric.vie)
  return _internal_vie();
}
inline void Lombric::_internal_set_vie(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vie_ = value;
}
inline void Lombric::set_vie(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vie(value);
  // @@protoc_insertion_point(field_set:Lombric.vie)
}

// -------------------------------------------------------------------

// End_tour

// repeated uint32 id_lomb_mort = 1;
inline int End_tour::_internal_id_lomb_mort_size() const {
  return id_lomb_mort_.size();
}
inline int End_tour::id_lomb_mort_size() const {
  return _internal_id_lomb_mort_size();
}
inline void End_tour::clear_id_lomb_mort() {
  id_lomb_mort_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 End_tour::_internal_id_lomb_mort(int index) const {
  return id_lomb_mort_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 End_tour::id_lomb_mort(int index) const {
  // @@protoc_insertion_point(field_get:End_tour.id_lomb_mort)
  return _internal_id_lomb_mort(index);
}
inline void End_tour::set_id_lomb_mort(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  id_lomb_mort_.Set(index, value);
  // @@protoc_insertion_point(field_set:End_tour.id_lomb_mort)
}
inline void End_tour::_internal_add_id_lomb_mort(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  id_lomb_mort_.Add(value);
}
inline void End_tour::add_id_lomb_mort(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_id_lomb_mort(value);
  // @@protoc_insertion_point(field_add:End_tour.id_lomb_mort)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
End_tour::_internal_id_lomb_mort() const {
  return id_lomb_mort_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
End_tour::id_lomb_mort() const {
  // @@protoc_insertion_point(field_list:End_tour.id_lomb_mort)
  return _internal_id_lomb_mort();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
End_tour::_internal_mutable_id_lomb_mort() {
  return &id_lomb_mort_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
End_tour::mutable_id_lomb_mort() {
  // @@protoc_insertion_point(field_mutable_list:End_tour.id_lomb_mort)
  return _internal_mutable_id_lomb_mort();
}

// -------------------------------------------------------------------

// Next_lombric

// uint32 id_lomb = 1;
inline void Next_lombric::clear_id_lomb() {
  id_lomb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Next_lombric::_internal_id_lomb() const {
  return id_lomb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Next_lombric::id_lomb() const {
  // @@protoc_insertion_point(field_get:Next_lombric.id_lomb)
  return _internal_id_lomb();
}
inline void Next_lombric::_internal_set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_lomb_ = value;
}
inline void Next_lombric::set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id_lomb(value);
  // @@protoc_insertion_point(field_set:Next_lombric.id_lomb)
}

// bool is_yours = 2;
inline void Next_lombric::clear_is_yours() {
  is_yours_ = false;
}
inline bool Next_lombric::_internal_is_yours() const {
  return is_yours_;
}
inline bool Next_lombric::is_yours() const {
  // @@protoc_insertion_point(field_get:Next_lombric.is_yours)
  return _internal_is_yours();
}
inline void Next_lombric::_internal_set_is_yours(bool value) {
  
  is_yours_ = value;
}
inline void Next_lombric::set_is_yours(bool value) {
  _internal_set_is_yours(value);
  // @@protoc_insertion_point(field_set:Next_lombric.is_yours)
}

// -------------------------------------------------------------------

// infoPartie_p

// repeated .Lombric lomb = 1;
inline int infoPartie_p::_internal_lomb_size() const {
  return lomb_.size();
}
inline int infoPartie_p::lomb_size() const {
  return _internal_lomb_size();
}
inline void infoPartie_p::clear_lomb() {
  lomb_.Clear();
}
inline ::Lombric* infoPartie_p::mutable_lomb(int index) {
  // @@protoc_insertion_point(field_mutable:infoPartie_p.lomb)
  return lomb_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lombric >*
infoPartie_p::mutable_lomb() {
  // @@protoc_insertion_point(field_mutable_list:infoPartie_p.lomb)
  return &lomb_;
}
inline const ::Lombric& infoPartie_p::_internal_lomb(int index) const {
  return lomb_.Get(index);
}
inline const ::Lombric& infoPartie_p::lomb(int index) const {
  // @@protoc_insertion_point(field_get:infoPartie_p.lomb)
  return _internal_lomb(index);
}
inline ::Lombric* infoPartie_p::_internal_add_lomb() {
  return lomb_.Add();
}
inline ::Lombric* infoPartie_p::add_lomb() {
  // @@protoc_insertion_point(field_add:infoPartie_p.lomb)
  return _internal_add_lomb();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Lombric >&
infoPartie_p::lomb() const {
  // @@protoc_insertion_point(field_list:infoPartie_p.lomb)
  return lomb_;
}

// -------------------------------------------------------------------

// infoRoom

// uint32 nbr_lomb = 1;
inline void infoRoom::clear_nbr_lomb() {
  nbr_lomb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 infoRoom::_internal_nbr_lomb() const {
  return nbr_lomb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 infoRoom::nbr_lomb() const {
  // @@protoc_insertion_point(field_get:infoRoom.nbr_lomb)
  return _internal_nbr_lomb();
}
inline void infoRoom::_internal_set_nbr_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nbr_lomb_ = value;
}
inline void infoRoom::set_nbr_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nbr_lomb(value);
  // @@protoc_insertion_point(field_set:infoRoom.nbr_lomb)
}

// uint32 nbr_eq = 2;
inline void infoRoom::clear_nbr_eq() {
  nbr_eq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 infoRoom::_internal_nbr_eq() const {
  return nbr_eq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 infoRoom::nbr_eq() const {
  // @@protoc_insertion_point(field_get:infoRoom.nbr_eq)
  return _internal_nbr_eq();
}
inline void infoRoom::_internal_set_nbr_eq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nbr_eq_ = value;
}
inline void infoRoom::set_nbr_eq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nbr_eq(value);
  // @@protoc_insertion_point(field_set:infoRoom.nbr_eq)
}

// uint32 time_round = 3;
inline void infoRoom::clear_time_round() {
  time_round_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 infoRoom::_internal_time_round() const {
  return time_round_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 infoRoom::time_round() const {
  // @@protoc_insertion_point(field_get:infoRoom.time_round)
  return _internal_time_round();
}
inline void infoRoom::_internal_set_time_round(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_round_ = value;
}
inline void infoRoom::set_time_round(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_round(value);
  // @@protoc_insertion_point(field_set:infoRoom.time_round)
}

// uint32 map = 4;
inline void infoRoom::clear_map() {
  map_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 infoRoom::_internal_map() const {
  return map_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 infoRoom::map() const {
  // @@protoc_insertion_point(field_get:infoRoom.map)
  return _internal_map();
}
inline void infoRoom::_internal_set_map(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  map_ = value;
}
inline void infoRoom::set_map(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:infoRoom.map)
}

// repeated .Join_groupe_r joueur = 5;
inline int infoRoom::_internal_joueur_size() const {
  return joueur_.size();
}
inline int infoRoom::joueur_size() const {
  return _internal_joueur_size();
}
inline void infoRoom::clear_joueur() {
  joueur_.Clear();
}
inline ::Join_groupe_r* infoRoom::mutable_joueur(int index) {
  // @@protoc_insertion_point(field_mutable:infoRoom.joueur)
  return joueur_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Join_groupe_r >*
infoRoom::mutable_joueur() {
  // @@protoc_insertion_point(field_mutable_list:infoRoom.joueur)
  return &joueur_;
}
inline const ::Join_groupe_r& infoRoom::_internal_joueur(int index) const {
  return joueur_.Get(index);
}
inline const ::Join_groupe_r& infoRoom::joueur(int index) const {
  // @@protoc_insertion_point(field_get:infoRoom.joueur)
  return _internal_joueur(index);
}
inline ::Join_groupe_r* infoRoom::_internal_add_joueur() {
  return joueur_.Add();
}
inline ::Join_groupe_r* infoRoom::add_joueur() {
  // @@protoc_insertion_point(field_add:infoRoom.joueur)
  return _internal_add_joueur();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Join_groupe_r >&
infoRoom::joueur() const {
  // @@protoc_insertion_point(field_list:infoRoom.joueur)
  return joueur_;
}

// -------------------------------------------------------------------

// Create_room

// uint32 usr_id = 1;
inline void Create_room::clear_usr_id() {
  usr_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Create_room::_internal_usr_id() const {
  return usr_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Create_room::usr_id() const {
  // @@protoc_insertion_point(field_get:Create_room.usr_id)
  return _internal_usr_id();
}
inline void Create_room::_internal_set_usr_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  usr_id_ = value;
}
inline void Create_room::set_usr_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usr_id(value);
  // @@protoc_insertion_point(field_set:Create_room.usr_id)
}

// -------------------------------------------------------------------

// Create_room_id

// uint32 room_id = 1;
inline void Create_room_id::clear_room_id() {
  room_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Create_room_id::_internal_room_id() const {
  return room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Create_room_id::room_id() const {
  // @@protoc_insertion_point(field_get:Create_room_id.room_id)
  return _internal_room_id();
}
inline void Create_room_id::_internal_set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  room_id_ = value;
}
inline void Create_room_id::set_room_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:Create_room_id.room_id)
}

// -------------------------------------------------------------------

// ZMQ_msg

// uint32 receiver_id = 1;
inline void ZMQ_msg::clear_receiver_id() {
  receiver_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ZMQ_msg::_internal_receiver_id() const {
  return receiver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ZMQ_msg::receiver_id() const {
  // @@protoc_insertion_point(field_get:ZMQ_msg.receiver_id)
  return _internal_receiver_id();
}
inline void ZMQ_msg::_internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  receiver_id_ = value;
}
inline void ZMQ_msg::set_receiver_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:ZMQ_msg.receiver_id)
}

// uint32 type_message = 2;
inline void ZMQ_msg::clear_type_message() {
  type_message_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ZMQ_msg::_internal_type_message() const {
  return type_message_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ZMQ_msg::type_message() const {
  // @@protoc_insertion_point(field_get:ZMQ_msg.type_message)
  return _internal_type_message();
}
inline void ZMQ_msg::_internal_set_type_message(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_message_ = value;
}
inline void ZMQ_msg::set_type_message(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type_message(value);
  // @@protoc_insertion_point(field_set:ZMQ_msg.type_message)
}

// string message = 3;
inline void ZMQ_msg::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ZMQ_msg::message() const {
  // @@protoc_insertion_point(field_get:ZMQ_msg.message)
  return _internal_message();
}
inline void ZMQ_msg::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:ZMQ_msg.message)
}
inline std::string* ZMQ_msg::mutable_message() {
  // @@protoc_insertion_point(field_mutable:ZMQ_msg.message)
  return _internal_mutable_message();
}
inline const std::string& ZMQ_msg::_internal_message() const {
  return message_.GetNoArena();
}
inline void ZMQ_msg::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ZMQ_msg::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZMQ_msg.message)
}
inline void ZMQ_msg::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZMQ_msg.message)
}
inline void ZMQ_msg::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZMQ_msg.message)
}
inline std::string* ZMQ_msg::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ZMQ_msg::release_message() {
  // @@protoc_insertion_point(field_release:ZMQ_msg.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ZMQ_msg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ZMQ_msg.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_2eproto
