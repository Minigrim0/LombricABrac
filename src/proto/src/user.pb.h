// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_2eproto;
class Chat;
class ChatDefaultTypeInternal;
extern ChatDefaultTypeInternal _Chat_default_instance_;
class Fri_accept;
class Fri_acceptDefaultTypeInternal;
extern Fri_acceptDefaultTypeInternal _Fri_accept_default_instance_;
class Fri_add;
class Fri_addDefaultTypeInternal;
extern Fri_addDefaultTypeInternal _Fri_add_default_instance_;
class Fri_ls_r;
class Fri_ls_rDefaultTypeInternal;
extern Fri_ls_rDefaultTypeInternal _Fri_ls_r_default_instance_;
class Fri_rcv;
class Fri_rcvDefaultTypeInternal;
extern Fri_rcvDefaultTypeInternal _Fri_rcv_default_instance_;
class Fri_rmv;
class Fri_rmvDefaultTypeInternal;
extern Fri_rmvDefaultTypeInternal _Fri_rmv_default_instance_;
class Get_history;
class Get_historyDefaultTypeInternal;
extern Get_historyDefaultTypeInternal _Get_history_default_instance_;
class Get_rank;
class Get_rankDefaultTypeInternal;
extern Get_rankDefaultTypeInternal _Get_rank_default_instance_;
class History;
class HistoryDefaultTypeInternal;
extern HistoryDefaultTypeInternal _History_default_instance_;
class History_r;
class History_rDefaultTypeInternal;
extern History_rDefaultTypeInternal _History_r_default_instance_;
class Invitation;
class InvitationDefaultTypeInternal;
extern InvitationDefaultTypeInternal _Invitation_default_instance_;
class Join;
class JoinDefaultTypeInternal;
extern JoinDefaultTypeInternal _Join_default_instance_;
class Join_groupe_r;
class Join_groupe_rDefaultTypeInternal;
extern Join_groupe_rDefaultTypeInternal _Join_groupe_r_default_instance_;
class Join_groupe_s;
class Join_groupe_sDefaultTypeInternal;
extern Join_groupe_sDefaultTypeInternal _Join_groupe_s_default_instance_;
class Lomb_mod;
class Lomb_modDefaultTypeInternal;
extern Lomb_modDefaultTypeInternal _Lomb_mod_default_instance_;
class Lomb_r;
class Lomb_rDefaultTypeInternal;
extern Lomb_rDefaultTypeInternal _Lomb_r_default_instance_;
class Map_mod;
class Map_modDefaultTypeInternal;
extern Map_modDefaultTypeInternal _Map_mod_default_instance_;
class Nbr_lomb_mod;
class Nbr_lomb_modDefaultTypeInternal;
extern Nbr_lomb_modDefaultTypeInternal _Nbr_lomb_mod_default_instance_;
class Rank_r;
class Rank_rDefaultTypeInternal;
extern Rank_rDefaultTypeInternal _Rank_r_default_instance_;
class Time_mod;
class Time_modDefaultTypeInternal;
extern Time_modDefaultTypeInternal _Time_mod_default_instance_;
class Time_round_mod;
class Time_round_modDefaultTypeInternal;
extern Time_round_modDefaultTypeInternal _Time_round_mod_default_instance_;
class UserConnect;
class UserConnectDefaultTypeInternal;
extern UserConnectDefaultTypeInternal _UserConnect_default_instance_;
class UserRegister;
class UserRegisterDefaultTypeInternal;
extern UserRegisterDefaultTypeInternal _UserRegister_default_instance_;
class Usr_add;
class Usr_addDefaultTypeInternal;
extern Usr_addDefaultTypeInternal _Usr_add_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Chat* Arena::CreateMaybeMessage<::Chat>(Arena*);
template<> ::Fri_accept* Arena::CreateMaybeMessage<::Fri_accept>(Arena*);
template<> ::Fri_add* Arena::CreateMaybeMessage<::Fri_add>(Arena*);
template<> ::Fri_ls_r* Arena::CreateMaybeMessage<::Fri_ls_r>(Arena*);
template<> ::Fri_rcv* Arena::CreateMaybeMessage<::Fri_rcv>(Arena*);
template<> ::Fri_rmv* Arena::CreateMaybeMessage<::Fri_rmv>(Arena*);
template<> ::Get_history* Arena::CreateMaybeMessage<::Get_history>(Arena*);
template<> ::Get_rank* Arena::CreateMaybeMessage<::Get_rank>(Arena*);
template<> ::History* Arena::CreateMaybeMessage<::History>(Arena*);
template<> ::History_r* Arena::CreateMaybeMessage<::History_r>(Arena*);
template<> ::Invitation* Arena::CreateMaybeMessage<::Invitation>(Arena*);
template<> ::Join* Arena::CreateMaybeMessage<::Join>(Arena*);
template<> ::Join_groupe_r* Arena::CreateMaybeMessage<::Join_groupe_r>(Arena*);
template<> ::Join_groupe_s* Arena::CreateMaybeMessage<::Join_groupe_s>(Arena*);
template<> ::Lomb_mod* Arena::CreateMaybeMessage<::Lomb_mod>(Arena*);
template<> ::Lomb_r* Arena::CreateMaybeMessage<::Lomb_r>(Arena*);
template<> ::Map_mod* Arena::CreateMaybeMessage<::Map_mod>(Arena*);
template<> ::Nbr_lomb_mod* Arena::CreateMaybeMessage<::Nbr_lomb_mod>(Arena*);
template<> ::Rank_r* Arena::CreateMaybeMessage<::Rank_r>(Arena*);
template<> ::Time_mod* Arena::CreateMaybeMessage<::Time_mod>(Arena*);
template<> ::Time_round_mod* Arena::CreateMaybeMessage<::Time_round_mod>(Arena*);
template<> ::UserConnect* Arena::CreateMaybeMessage<::UserConnect>(Arena*);
template<> ::UserRegister* Arena::CreateMaybeMessage<::UserRegister>(Arena*);
template<> ::Usr_add* Arena::CreateMaybeMessage<::Usr_add>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class UserConnect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserConnect) */ {
 public:
  UserConnect();
  virtual ~UserConnect();

  UserConnect(const UserConnect& from);
  UserConnect(UserConnect&& from) noexcept
    : UserConnect() {
    *this = ::std::move(from);
  }

  inline UserConnect& operator=(const UserConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConnect& operator=(UserConnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserConnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserConnect* internal_default_instance() {
    return reinterpret_cast<const UserConnect*>(
               &_UserConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserConnect& a, UserConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConnect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserConnect* New() const final {
    return CreateMaybeMessage<UserConnect>(nullptr);
  }

  UserConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserConnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserConnect& from);
  void MergeFrom(const UserConnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserConnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserConnect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kIsregisterFieldNumber = 1,
  };
  // string pseudo = 2;
  void clear_pseudo();
  const std::string& pseudo() const;
  void set_pseudo(const std::string& value);
  void set_pseudo(std::string&& value);
  void set_pseudo(const char* value);
  void set_pseudo(const char* value, size_t size);
  std::string* mutable_pseudo();
  std::string* release_pseudo();
  void set_allocated_pseudo(std::string* pseudo);
  private:
  const std::string& _internal_pseudo() const;
  void _internal_set_pseudo(const std::string& value);
  std::string* _internal_mutable_pseudo();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // bool isregister = 1;
  void clear_isregister();
  bool isregister() const;
  void set_isregister(bool value);
  private:
  bool _internal_isregister() const;
  void _internal_set_isregister(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UserConnect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  bool isregister_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class UserRegister :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserRegister) */ {
 public:
  UserRegister();
  virtual ~UserRegister();

  UserRegister(const UserRegister& from);
  UserRegister(UserRegister&& from) noexcept
    : UserRegister() {
    *this = ::std::move(from);
  }

  inline UserRegister& operator=(const UserRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegister& operator=(UserRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegister* internal_default_instance() {
    return reinterpret_cast<const UserRegister*>(
               &_UserRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserRegister& a, UserRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRegister* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRegister* New() const final {
    return CreateMaybeMessage<UserRegister>(nullptr);
  }

  UserRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRegister& from);
  void MergeFrom(const UserRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserRegister";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string pseudo = 1;
  void clear_pseudo();
  const std::string& pseudo() const;
  void set_pseudo(const std::string& value);
  void set_pseudo(std::string&& value);
  void set_pseudo(const char* value);
  void set_pseudo(const char* value, size_t size);
  std::string* mutable_pseudo();
  std::string* release_pseudo();
  void set_allocated_pseudo(std::string* pseudo);
  private:
  const std::string& _internal_pseudo() const;
  void _internal_set_pseudo(const std::string& value);
  std::string* _internal_mutable_pseudo();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:UserRegister)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Chat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat) */ {
 public:
  Chat();
  virtual ~Chat();

  Chat(const Chat& from);
  Chat(Chat&& from) noexcept
    : Chat() {
    *this = ::std::move(from);
  }

  inline Chat& operator=(const Chat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat& operator=(Chat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chat* internal_default_instance() {
    return reinterpret_cast<const Chat*>(
               &_Chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Chat& a, Chat& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chat* New() const final {
    return CreateMaybeMessage<Chat>(nullptr);
  }

  Chat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chat& from);
  void MergeFrom(const Chat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoFieldNumber = 1,
    kMsgFieldNumber = 2,
  };
  // string pseudo = 1;
  void clear_pseudo();
  const std::string& pseudo() const;
  void set_pseudo(const std::string& value);
  void set_pseudo(std::string&& value);
  void set_pseudo(const char* value);
  void set_pseudo(const char* value, size_t size);
  std::string* mutable_pseudo();
  std::string* release_pseudo();
  void set_allocated_pseudo(std::string* pseudo);
  private:
  const std::string& _internal_pseudo() const;
  void _internal_set_pseudo(const std::string& value);
  std::string* _internal_mutable_pseudo();
  public:

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:Chat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Invitation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Invitation) */ {
 public:
  Invitation();
  virtual ~Invitation();

  Invitation(const Invitation& from);
  Invitation(Invitation&& from) noexcept
    : Invitation() {
    *this = ::std::move(from);
  }

  inline Invitation& operator=(const Invitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Invitation& operator=(Invitation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Invitation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Invitation* internal_default_instance() {
    return reinterpret_cast<const Invitation*>(
               &_Invitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Invitation& a, Invitation& b) {
    a.Swap(&b);
  }
  inline void Swap(Invitation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Invitation* New() const final {
    return CreateMaybeMessage<Invitation>(nullptr);
  }

  Invitation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Invitation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Invitation& from);
  void MergeFrom(const Invitation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Invitation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Invitation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoFieldNumber = 1,
  };
  // string pseudo = 1;
  void clear_pseudo();
  const std::string& pseudo() const;
  void set_pseudo(const std::string& value);
  void set_pseudo(std::string&& value);
  void set_pseudo(const char* value);
  void set_pseudo(const char* value, size_t size);
  std::string* mutable_pseudo();
  std::string* release_pseudo();
  void set_allocated_pseudo(std::string* pseudo);
  private:
  const std::string& _internal_pseudo() const;
  void _internal_set_pseudo(const std::string& value);
  std::string* _internal_mutable_pseudo();
  public:

  // @@protoc_insertion_point(class_scope:Invitation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Join :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Join) */ {
 public:
  Join();
  virtual ~Join();

  Join(const Join& from);
  Join(Join&& from) noexcept
    : Join() {
    *this = ::std::move(from);
  }

  inline Join& operator=(const Join& from) {
    CopyFrom(from);
    return *this;
  }
  inline Join& operator=(Join&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Join& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Join* internal_default_instance() {
    return reinterpret_cast<const Join*>(
               &_Join_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Join& a, Join& b) {
    a.Swap(&b);
  }
  inline void Swap(Join* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Join* New() const final {
    return CreateMaybeMessage<Join>(nullptr);
  }

  Join* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Join>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Join& from);
  void MergeFrom(const Join& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Join* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Join";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoFieldNumber = 1,
  };
  // string pseudo = 1;
  void clear_pseudo();
  const std::string& pseudo() const;
  void set_pseudo(const std::string& value);
  void set_pseudo(std::string&& value);
  void set_pseudo(const char* value);
  void set_pseudo(const char* value, size_t size);
  std::string* mutable_pseudo();
  std::string* release_pseudo();
  void set_allocated_pseudo(std::string* pseudo);
  private:
  const std::string& _internal_pseudo() const;
  void _internal_set_pseudo(const std::string& value);
  std::string* _internal_mutable_pseudo();
  public:

  // @@protoc_insertion_point(class_scope:Join)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Lomb_r :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Lomb_r) */ {
 public:
  Lomb_r();
  virtual ~Lomb_r();

  Lomb_r(const Lomb_r& from);
  Lomb_r(Lomb_r&& from) noexcept
    : Lomb_r() {
    *this = ::std::move(from);
  }

  inline Lomb_r& operator=(const Lomb_r& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lomb_r& operator=(Lomb_r&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lomb_r& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lomb_r* internal_default_instance() {
    return reinterpret_cast<const Lomb_r*>(
               &_Lomb_r_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Lomb_r& a, Lomb_r& b) {
    a.Swap(&b);
  }
  inline void Swap(Lomb_r* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lomb_r* New() const final {
    return CreateMaybeMessage<Lomb_r>(nullptr);
  }

  Lomb_r* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lomb_r>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lomb_r& from);
  void MergeFrom(const Lomb_r& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lomb_r* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Lomb_r";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLomb1FieldNumber = 1,
    kLomb2FieldNumber = 2,
    kLomb3FieldNumber = 3,
    kLomb4FieldNumber = 4,
    kLomb5FieldNumber = 5,
    kLomb6FieldNumber = 6,
    kLomb7FieldNumber = 7,
    kLomb8FieldNumber = 8,
  };
  // string Lomb_1 = 1;
  void clear_lomb_1();
  const std::string& lomb_1() const;
  void set_lomb_1(const std::string& value);
  void set_lomb_1(std::string&& value);
  void set_lomb_1(const char* value);
  void set_lomb_1(const char* value, size_t size);
  std::string* mutable_lomb_1();
  std::string* release_lomb_1();
  void set_allocated_lomb_1(std::string* lomb_1);
  private:
  const std::string& _internal_lomb_1() const;
  void _internal_set_lomb_1(const std::string& value);
  std::string* _internal_mutable_lomb_1();
  public:

  // string Lomb_2 = 2;
  void clear_lomb_2();
  const std::string& lomb_2() const;
  void set_lomb_2(const std::string& value);
  void set_lomb_2(std::string&& value);
  void set_lomb_2(const char* value);
  void set_lomb_2(const char* value, size_t size);
  std::string* mutable_lomb_2();
  std::string* release_lomb_2();
  void set_allocated_lomb_2(std::string* lomb_2);
  private:
  const std::string& _internal_lomb_2() const;
  void _internal_set_lomb_2(const std::string& value);
  std::string* _internal_mutable_lomb_2();
  public:

  // string Lomb_3 = 3;
  void clear_lomb_3();
  const std::string& lomb_3() const;
  void set_lomb_3(const std::string& value);
  void set_lomb_3(std::string&& value);
  void set_lomb_3(const char* value);
  void set_lomb_3(const char* value, size_t size);
  std::string* mutable_lomb_3();
  std::string* release_lomb_3();
  void set_allocated_lomb_3(std::string* lomb_3);
  private:
  const std::string& _internal_lomb_3() const;
  void _internal_set_lomb_3(const std::string& value);
  std::string* _internal_mutable_lomb_3();
  public:

  // string Lomb_4 = 4;
  void clear_lomb_4();
  const std::string& lomb_4() const;
  void set_lomb_4(const std::string& value);
  void set_lomb_4(std::string&& value);
  void set_lomb_4(const char* value);
  void set_lomb_4(const char* value, size_t size);
  std::string* mutable_lomb_4();
  std::string* release_lomb_4();
  void set_allocated_lomb_4(std::string* lomb_4);
  private:
  const std::string& _internal_lomb_4() const;
  void _internal_set_lomb_4(const std::string& value);
  std::string* _internal_mutable_lomb_4();
  public:

  // string Lomb_5 = 5;
  void clear_lomb_5();
  const std::string& lomb_5() const;
  void set_lomb_5(const std::string& value);
  void set_lomb_5(std::string&& value);
  void set_lomb_5(const char* value);
  void set_lomb_5(const char* value, size_t size);
  std::string* mutable_lomb_5();
  std::string* release_lomb_5();
  void set_allocated_lomb_5(std::string* lomb_5);
  private:
  const std::string& _internal_lomb_5() const;
  void _internal_set_lomb_5(const std::string& value);
  std::string* _internal_mutable_lomb_5();
  public:

  // string Lomb_6 = 6;
  void clear_lomb_6();
  const std::string& lomb_6() const;
  void set_lomb_6(const std::string& value);
  void set_lomb_6(std::string&& value);
  void set_lomb_6(const char* value);
  void set_lomb_6(const char* value, size_t size);
  std::string* mutable_lomb_6();
  std::string* release_lomb_6();
  void set_allocated_lomb_6(std::string* lomb_6);
  private:
  const std::string& _internal_lomb_6() const;
  void _internal_set_lomb_6(const std::string& value);
  std::string* _internal_mutable_lomb_6();
  public:

  // string Lomb_7 = 7;
  void clear_lomb_7();
  const std::string& lomb_7() const;
  void set_lomb_7(const std::string& value);
  void set_lomb_7(std::string&& value);
  void set_lomb_7(const char* value);
  void set_lomb_7(const char* value, size_t size);
  std::string* mutable_lomb_7();
  std::string* release_lomb_7();
  void set_allocated_lomb_7(std::string* lomb_7);
  private:
  const std::string& _internal_lomb_7() const;
  void _internal_set_lomb_7(const std::string& value);
  std::string* _internal_mutable_lomb_7();
  public:

  // string Lomb_8 = 8;
  void clear_lomb_8();
  const std::string& lomb_8() const;
  void set_lomb_8(const std::string& value);
  void set_lomb_8(std::string&& value);
  void set_lomb_8(const char* value);
  void set_lomb_8(const char* value, size_t size);
  std::string* mutable_lomb_8();
  std::string* release_lomb_8();
  void set_allocated_lomb_8(std::string* lomb_8);
  private:
  const std::string& _internal_lomb_8() const;
  void _internal_set_lomb_8(const std::string& value);
  std::string* _internal_mutable_lomb_8();
  public:

  // @@protoc_insertion_point(class_scope:Lomb_r)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lomb_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lomb_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lomb_3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lomb_4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lomb_5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lomb_6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lomb_7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lomb_8_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Lomb_mod :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Lomb_mod) */ {
 public:
  Lomb_mod();
  virtual ~Lomb_mod();

  Lomb_mod(const Lomb_mod& from);
  Lomb_mod(Lomb_mod&& from) noexcept
    : Lomb_mod() {
    *this = ::std::move(from);
  }

  inline Lomb_mod& operator=(const Lomb_mod& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lomb_mod& operator=(Lomb_mod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lomb_mod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lomb_mod* internal_default_instance() {
    return reinterpret_cast<const Lomb_mod*>(
               &_Lomb_mod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Lomb_mod& a, Lomb_mod& b) {
    a.Swap(&b);
  }
  inline void Swap(Lomb_mod* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lomb_mod* New() const final {
    return CreateMaybeMessage<Lomb_mod>(nullptr);
  }

  Lomb_mod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lomb_mod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lomb_mod& from);
  void MergeFrom(const Lomb_mod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lomb_mod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Lomb_mod";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameLombFieldNumber = 2,
    kIdLombFieldNumber = 1,
  };
  // string name_Lomb = 2;
  void clear_name_lomb();
  const std::string& name_lomb() const;
  void set_name_lomb(const std::string& value);
  void set_name_lomb(std::string&& value);
  void set_name_lomb(const char* value);
  void set_name_lomb(const char* value, size_t size);
  std::string* mutable_name_lomb();
  std::string* release_name_lomb();
  void set_allocated_name_lomb(std::string* name_lomb);
  private:
  const std::string& _internal_name_lomb() const;
  void _internal_set_name_lomb(const std::string& value);
  std::string* _internal_mutable_name_lomb();
  public:

  // uint32 id_lomb = 1;
  void clear_id_lomb();
  ::PROTOBUF_NAMESPACE_ID::uint32 id_lomb() const;
  void set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id_lomb() const;
  void _internal_set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Lomb_mod)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_lomb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_lomb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Usr_add :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Usr_add) */ {
 public:
  Usr_add();
  virtual ~Usr_add();

  Usr_add(const Usr_add& from);
  Usr_add(Usr_add&& from) noexcept
    : Usr_add() {
    *this = ::std::move(from);
  }

  inline Usr_add& operator=(const Usr_add& from) {
    CopyFrom(from);
    return *this;
  }
  inline Usr_add& operator=(Usr_add&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Usr_add& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Usr_add* internal_default_instance() {
    return reinterpret_cast<const Usr_add*>(
               &_Usr_add_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Usr_add& a, Usr_add& b) {
    a.Swap(&b);
  }
  inline void Swap(Usr_add* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Usr_add* New() const final {
    return CreateMaybeMessage<Usr_add>(nullptr);
  }

  Usr_add* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Usr_add>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Usr_add& from);
  void MergeFrom(const Usr_add& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Usr_add* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Usr_add";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoFieldNumber = 1,
  };
  // string pseudo = 1;
  void clear_pseudo();
  const std::string& pseudo() const;
  void set_pseudo(const std::string& value);
  void set_pseudo(std::string&& value);
  void set_pseudo(const char* value);
  void set_pseudo(const char* value, size_t size);
  std::string* mutable_pseudo();
  std::string* release_pseudo();
  void set_allocated_pseudo(std::string* pseudo);
  private:
  const std::string& _internal_pseudo() const;
  void _internal_set_pseudo(const std::string& value);
  std::string* _internal_mutable_pseudo();
  public:

  // @@protoc_insertion_point(class_scope:Usr_add)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Map_mod :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Map_mod) */ {
 public:
  Map_mod();
  virtual ~Map_mod();

  Map_mod(const Map_mod& from);
  Map_mod(Map_mod&& from) noexcept
    : Map_mod() {
    *this = ::std::move(from);
  }

  inline Map_mod& operator=(const Map_mod& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map_mod& operator=(Map_mod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map_mod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map_mod* internal_default_instance() {
    return reinterpret_cast<const Map_mod*>(
               &_Map_mod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Map_mod& a, Map_mod& b) {
    a.Swap(&b);
  }
  inline void Swap(Map_mod* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map_mod* New() const final {
    return CreateMaybeMessage<Map_mod>(nullptr);
  }

  Map_mod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map_mod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map_mod& from);
  void MergeFrom(const Map_mod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map_mod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Map_mod";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Map_mod)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Time_mod :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Time_mod) */ {
 public:
  Time_mod();
  virtual ~Time_mod();

  Time_mod(const Time_mod& from);
  Time_mod(Time_mod&& from) noexcept
    : Time_mod() {
    *this = ::std::move(from);
  }

  inline Time_mod& operator=(const Time_mod& from) {
    CopyFrom(from);
    return *this;
  }
  inline Time_mod& operator=(Time_mod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Time_mod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time_mod* internal_default_instance() {
    return reinterpret_cast<const Time_mod*>(
               &_Time_mod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Time_mod& a, Time_mod& b) {
    a.Swap(&b);
  }
  inline void Swap(Time_mod* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Time_mod* New() const final {
    return CreateMaybeMessage<Time_mod>(nullptr);
  }

  Time_mod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Time_mod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Time_mod& from);
  void MergeFrom(const Time_mod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time_mod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Time_mod";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // uint32 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Time_mod)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Time_round_mod :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Time_round_mod) */ {
 public:
  Time_round_mod();
  virtual ~Time_round_mod();

  Time_round_mod(const Time_round_mod& from);
  Time_round_mod(Time_round_mod&& from) noexcept
    : Time_round_mod() {
    *this = ::std::move(from);
  }

  inline Time_round_mod& operator=(const Time_round_mod& from) {
    CopyFrom(from);
    return *this;
  }
  inline Time_round_mod& operator=(Time_round_mod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Time_round_mod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time_round_mod* internal_default_instance() {
    return reinterpret_cast<const Time_round_mod*>(
               &_Time_round_mod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Time_round_mod& a, Time_round_mod& b) {
    a.Swap(&b);
  }
  inline void Swap(Time_round_mod* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Time_round_mod* New() const final {
    return CreateMaybeMessage<Time_round_mod>(nullptr);
  }

  Time_round_mod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Time_round_mod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Time_round_mod& from);
  void MergeFrom(const Time_round_mod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time_round_mod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Time_round_mod";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // uint32 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Time_round_mod)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Nbr_lomb_mod :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nbr_lomb_mod) */ {
 public:
  Nbr_lomb_mod();
  virtual ~Nbr_lomb_mod();

  Nbr_lomb_mod(const Nbr_lomb_mod& from);
  Nbr_lomb_mod(Nbr_lomb_mod&& from) noexcept
    : Nbr_lomb_mod() {
    *this = ::std::move(from);
  }

  inline Nbr_lomb_mod& operator=(const Nbr_lomb_mod& from) {
    CopyFrom(from);
    return *this;
  }
  inline Nbr_lomb_mod& operator=(Nbr_lomb_mod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Nbr_lomb_mod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Nbr_lomb_mod* internal_default_instance() {
    return reinterpret_cast<const Nbr_lomb_mod*>(
               &_Nbr_lomb_mod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Nbr_lomb_mod& a, Nbr_lomb_mod& b) {
    a.Swap(&b);
  }
  inline void Swap(Nbr_lomb_mod* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Nbr_lomb_mod* New() const final {
    return CreateMaybeMessage<Nbr_lomb_mod>(nullptr);
  }

  Nbr_lomb_mod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Nbr_lomb_mod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Nbr_lomb_mod& from);
  void MergeFrom(const Nbr_lomb_mod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Nbr_lomb_mod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nbr_lomb_mod";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNbrLombFieldNumber = 1,
  };
  // uint32 nbr_lomb = 1;
  void clear_nbr_lomb();
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_lomb() const;
  void set_nbr_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nbr_lomb() const;
  void _internal_set_nbr_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Nbr_lomb_mod)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_lomb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Join_groupe_s :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Join_groupe_s) */ {
 public:
  Join_groupe_s();
  virtual ~Join_groupe_s();

  Join_groupe_s(const Join_groupe_s& from);
  Join_groupe_s(Join_groupe_s&& from) noexcept
    : Join_groupe_s() {
    *this = ::std::move(from);
  }

  inline Join_groupe_s& operator=(const Join_groupe_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline Join_groupe_s& operator=(Join_groupe_s&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Join_groupe_s& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Join_groupe_s* internal_default_instance() {
    return reinterpret_cast<const Join_groupe_s*>(
               &_Join_groupe_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Join_groupe_s& a, Join_groupe_s& b) {
    a.Swap(&b);
  }
  inline void Swap(Join_groupe_s* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Join_groupe_s* New() const final {
    return CreateMaybeMessage<Join_groupe_s>(nullptr);
  }

  Join_groupe_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Join_groupe_s>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Join_groupe_s& from);
  void MergeFrom(const Join_groupe_s& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Join_groupe_s* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Join_groupe_s";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Join_groupe_s)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Join_groupe_r :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Join_groupe_r) */ {
 public:
  Join_groupe_r();
  virtual ~Join_groupe_r();

  Join_groupe_r(const Join_groupe_r& from);
  Join_groupe_r(Join_groupe_r&& from) noexcept
    : Join_groupe_r() {
    *this = ::std::move(from);
  }

  inline Join_groupe_r& operator=(const Join_groupe_r& from) {
    CopyFrom(from);
    return *this;
  }
  inline Join_groupe_r& operator=(Join_groupe_r&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Join_groupe_r& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Join_groupe_r* internal_default_instance() {
    return reinterpret_cast<const Join_groupe_r*>(
               &_Join_groupe_r_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Join_groupe_r& a, Join_groupe_r& b) {
    a.Swap(&b);
  }
  inline void Swap(Join_groupe_r* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Join_groupe_r* New() const final {
    return CreateMaybeMessage<Join_groupe_r>(nullptr);
  }

  Join_groupe_r* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Join_groupe_r>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Join_groupe_r& from);
  void MergeFrom(const Join_groupe_r& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Join_groupe_r* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Join_groupe_r";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string pseudo = 1;
  void clear_pseudo();
  const std::string& pseudo() const;
  void set_pseudo(const std::string& value);
  void set_pseudo(std::string&& value);
  void set_pseudo(const char* value);
  void set_pseudo(const char* value, size_t size);
  std::string* mutable_pseudo();
  std::string* release_pseudo();
  void set_allocated_pseudo(std::string* pseudo);
  private:
  const std::string& _internal_pseudo() const;
  void _internal_set_pseudo(const std::string& value);
  std::string* _internal_mutable_pseudo();
  public:

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Join_groupe_r)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Get_history :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Get_history) */ {
 public:
  Get_history();
  virtual ~Get_history();

  Get_history(const Get_history& from);
  Get_history(Get_history&& from) noexcept
    : Get_history() {
    *this = ::std::move(from);
  }

  inline Get_history& operator=(const Get_history& from) {
    CopyFrom(from);
    return *this;
  }
  inline Get_history& operator=(Get_history&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Get_history& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Get_history* internal_default_instance() {
    return reinterpret_cast<const Get_history*>(
               &_Get_history_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Get_history& a, Get_history& b) {
    a.Swap(&b);
  }
  inline void Swap(Get_history* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Get_history* New() const final {
    return CreateMaybeMessage<Get_history>(nullptr);
  }

  Get_history* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Get_history>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Get_history& from);
  void MergeFrom(const Get_history& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Get_history* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Get_history";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoFieldNumber = 1,
    kFirstGameFieldNumber = 2,
    kNbrGameFieldNumber = 3,
  };
  // string pseudo = 1;
  void clear_pseudo();
  const std::string& pseudo() const;
  void set_pseudo(const std::string& value);
  void set_pseudo(std::string&& value);
  void set_pseudo(const char* value);
  void set_pseudo(const char* value, size_t size);
  std::string* mutable_pseudo();
  std::string* release_pseudo();
  void set_allocated_pseudo(std::string* pseudo);
  private:
  const std::string& _internal_pseudo() const;
  void _internal_set_pseudo(const std::string& value);
  std::string* _internal_mutable_pseudo();
  public:

  // uint32 first_game = 2;
  void clear_first_game();
  ::PROTOBUF_NAMESPACE_ID::uint32 first_game() const;
  void set_first_game(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_first_game() const;
  void _internal_set_first_game(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nbr_game = 3;
  void clear_nbr_game();
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_game() const;
  void set_nbr_game(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nbr_game() const;
  void _internal_set_nbr_game(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Get_history)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 first_game_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_game_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class History :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:History) */ {
 public:
  History();
  virtual ~History();

  History(const History& from);
  History(History&& from) noexcept
    : History() {
    *this = ::std::move(from);
  }

  inline History& operator=(const History& from) {
    CopyFrom(from);
    return *this;
  }
  inline History& operator=(History&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const History& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const History* internal_default_instance() {
    return reinterpret_cast<const History*>(
               &_History_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(History& a, History& b) {
    a.Swap(&b);
  }
  inline void Swap(History* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline History* New() const final {
    return CreateMaybeMessage<History>(nullptr);
  }

  History* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<History>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const History& from);
  void MergeFrom(const History& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(History* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "History";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudo1FieldNumber = 1,
    kPseudo2FieldNumber = 2,
    kPseudo3FieldNumber = 3,
    kPseudo4FieldNumber = 4,
    kPouint321FieldNumber = 5,
    kPouint322FieldNumber = 6,
    kPouint323FieldNumber = 7,
    kPouint324FieldNumber = 8,
    kDateFieldNumber = 9,
  };
  // string pseudo_1 = 1;
  void clear_pseudo_1();
  const std::string& pseudo_1() const;
  void set_pseudo_1(const std::string& value);
  void set_pseudo_1(std::string&& value);
  void set_pseudo_1(const char* value);
  void set_pseudo_1(const char* value, size_t size);
  std::string* mutable_pseudo_1();
  std::string* release_pseudo_1();
  void set_allocated_pseudo_1(std::string* pseudo_1);
  private:
  const std::string& _internal_pseudo_1() const;
  void _internal_set_pseudo_1(const std::string& value);
  std::string* _internal_mutable_pseudo_1();
  public:

  // string pseudo_2 = 2;
  void clear_pseudo_2();
  const std::string& pseudo_2() const;
  void set_pseudo_2(const std::string& value);
  void set_pseudo_2(std::string&& value);
  void set_pseudo_2(const char* value);
  void set_pseudo_2(const char* value, size_t size);
  std::string* mutable_pseudo_2();
  std::string* release_pseudo_2();
  void set_allocated_pseudo_2(std::string* pseudo_2);
  private:
  const std::string& _internal_pseudo_2() const;
  void _internal_set_pseudo_2(const std::string& value);
  std::string* _internal_mutable_pseudo_2();
  public:

  // string pseudo_3 = 3;
  void clear_pseudo_3();
  const std::string& pseudo_3() const;
  void set_pseudo_3(const std::string& value);
  void set_pseudo_3(std::string&& value);
  void set_pseudo_3(const char* value);
  void set_pseudo_3(const char* value, size_t size);
  std::string* mutable_pseudo_3();
  std::string* release_pseudo_3();
  void set_allocated_pseudo_3(std::string* pseudo_3);
  private:
  const std::string& _internal_pseudo_3() const;
  void _internal_set_pseudo_3(const std::string& value);
  std::string* _internal_mutable_pseudo_3();
  public:

  // string pseudo_4 = 4;
  void clear_pseudo_4();
  const std::string& pseudo_4() const;
  void set_pseudo_4(const std::string& value);
  void set_pseudo_4(std::string&& value);
  void set_pseudo_4(const char* value);
  void set_pseudo_4(const char* value, size_t size);
  std::string* mutable_pseudo_4();
  std::string* release_pseudo_4();
  void set_allocated_pseudo_4(std::string* pseudo_4);
  private:
  const std::string& _internal_pseudo_4() const;
  void _internal_set_pseudo_4(const std::string& value);
  std::string* _internal_mutable_pseudo_4();
  public:

  // uint32 pouint32_1 = 5;
  void clear_pouint32_1();
  ::PROTOBUF_NAMESPACE_ID::uint32 pouint32_1() const;
  void set_pouint32_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pouint32_1() const;
  void _internal_set_pouint32_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pouint32_2 = 6;
  void clear_pouint32_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 pouint32_2() const;
  void set_pouint32_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pouint32_2() const;
  void _internal_set_pouint32_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pouint32_3 = 7;
  void clear_pouint32_3();
  ::PROTOBUF_NAMESPACE_ID::uint32 pouint32_3() const;
  void set_pouint32_3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pouint32_3() const;
  void _internal_set_pouint32_3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pouint32_4 = 8;
  void clear_pouint32_4();
  ::PROTOBUF_NAMESPACE_ID::uint32 pouint32_4() const;
  void set_pouint32_4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pouint32_4() const;
  void _internal_set_pouint32_4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 date = 9;
  void clear_date();
  ::PROTOBUF_NAMESPACE_ID::uint32 date() const;
  void set_date(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_date() const;
  void _internal_set_date(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:History)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudo_4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pouint32_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pouint32_2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pouint32_3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pouint32_4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class History_r :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:History_r) */ {
 public:
  History_r();
  virtual ~History_r();

  History_r(const History_r& from);
  History_r(History_r&& from) noexcept
    : History_r() {
    *this = ::std::move(from);
  }

  inline History_r& operator=(const History_r& from) {
    CopyFrom(from);
    return *this;
  }
  inline History_r& operator=(History_r&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const History_r& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const History_r* internal_default_instance() {
    return reinterpret_cast<const History_r*>(
               &_History_r_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(History_r& a, History_r& b) {
    a.Swap(&b);
  }
  inline void Swap(History_r* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline History_r* New() const final {
    return CreateMaybeMessage<History_r>(nullptr);
  }

  History_r* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<History_r>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const History_r& from);
  void MergeFrom(const History_r& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(History_r* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "History_r";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoryFieldNumber = 1,
  };
  // repeated .History history = 1;
  int history_size() const;
  private:
  int _internal_history_size() const;
  public:
  void clear_history();
  ::History* mutable_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::History >*
      mutable_history();
  private:
  const ::History& _internal_history(int index) const;
  ::History* _internal_add_history();
  public:
  const ::History& history(int index) const;
  ::History* add_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::History >&
      history() const;

  // @@protoc_insertion_point(class_scope:History_r)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::History > history_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Get_rank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Get_rank) */ {
 public:
  Get_rank();
  virtual ~Get_rank();

  Get_rank(const Get_rank& from);
  Get_rank(Get_rank&& from) noexcept
    : Get_rank() {
    *this = ::std::move(from);
  }

  inline Get_rank& operator=(const Get_rank& from) {
    CopyFrom(from);
    return *this;
  }
  inline Get_rank& operator=(Get_rank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Get_rank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Get_rank* internal_default_instance() {
    return reinterpret_cast<const Get_rank*>(
               &_Get_rank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Get_rank& a, Get_rank& b) {
    a.Swap(&b);
  }
  inline void Swap(Get_rank* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Get_rank* New() const final {
    return CreateMaybeMessage<Get_rank>(nullptr);
  }

  Get_rank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Get_rank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Get_rank& from);
  void MergeFrom(const Get_rank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Get_rank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Get_rank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFirstPlayerFieldNumber = 1,
    kNbrPlayerFieldNumber = 2,
  };
  // uint32 id_first_player = 1;
  void clear_id_first_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 id_first_player() const;
  void set_id_first_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id_first_player() const;
  void _internal_set_id_first_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nbr_player = 2;
  void clear_nbr_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_player() const;
  void set_nbr_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nbr_player() const;
  void _internal_set_nbr_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Get_rank)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_first_player_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nbr_player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Rank_r :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rank_r) */ {
 public:
  Rank_r();
  virtual ~Rank_r();

  Rank_r(const Rank_r& from);
  Rank_r(Rank_r&& from) noexcept
    : Rank_r() {
    *this = ::std::move(from);
  }

  inline Rank_r& operator=(const Rank_r& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rank_r& operator=(Rank_r&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rank_r& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rank_r* internal_default_instance() {
    return reinterpret_cast<const Rank_r*>(
               &_Rank_r_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Rank_r& a, Rank_r& b) {
    a.Swap(&b);
  }
  inline void Swap(Rank_r* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rank_r* New() const final {
    return CreateMaybeMessage<Rank_r>(nullptr);
  }

  Rank_r* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rank_r>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rank_r& from);
  void MergeFrom(const Rank_r& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rank_r* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rank_r";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kPouint32FieldNumber = 2,
  };
  // repeated string user = 1;
  int user_size() const;
  private:
  int _internal_user_size() const;
  public:
  void clear_user();
  const std::string& user(int index) const;
  std::string* mutable_user(int index);
  void set_user(int index, const std::string& value);
  void set_user(int index, std::string&& value);
  void set_user(int index, const char* value);
  void set_user(int index, const char* value, size_t size);
  std::string* add_user();
  void add_user(const std::string& value);
  void add_user(std::string&& value);
  void add_user(const char* value);
  void add_user(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user();
  private:
  const std::string& _internal_user(int index) const;
  std::string* _internal_add_user();
  public:

  // repeated uint32 pouint32 = 2;
  int pouint32_size() const;
  private:
  int _internal_pouint32_size() const;
  public:
  void clear_pouint32();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pouint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_pouint32() const;
  void _internal_add_pouint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_pouint32();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 pouint32(int index) const;
  void set_pouint32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_pouint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      pouint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_pouint32();

  // @@protoc_insertion_point(class_scope:Rank_r)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > pouint32_;
  mutable std::atomic<int> _pouint32_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Fri_add :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Fri_add) */ {
 public:
  Fri_add();
  virtual ~Fri_add();

  Fri_add(const Fri_add& from);
  Fri_add(Fri_add&& from) noexcept
    : Fri_add() {
    *this = ::std::move(from);
  }

  inline Fri_add& operator=(const Fri_add& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fri_add& operator=(Fri_add&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fri_add& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fri_add* internal_default_instance() {
    return reinterpret_cast<const Fri_add*>(
               &_Fri_add_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Fri_add& a, Fri_add& b) {
    a.Swap(&b);
  }
  inline void Swap(Fri_add* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fri_add* New() const final {
    return CreateMaybeMessage<Fri_add>(nullptr);
  }

  Fri_add* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fri_add>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fri_add& from);
  void MergeFrom(const Fri_add& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fri_add* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Fri_add";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // string user = 1;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // @@protoc_insertion_point(class_scope:Fri_add)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Fri_rcv :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Fri_rcv) */ {
 public:
  Fri_rcv();
  virtual ~Fri_rcv();

  Fri_rcv(const Fri_rcv& from);
  Fri_rcv(Fri_rcv&& from) noexcept
    : Fri_rcv() {
    *this = ::std::move(from);
  }

  inline Fri_rcv& operator=(const Fri_rcv& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fri_rcv& operator=(Fri_rcv&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fri_rcv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fri_rcv* internal_default_instance() {
    return reinterpret_cast<const Fri_rcv*>(
               &_Fri_rcv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Fri_rcv& a, Fri_rcv& b) {
    a.Swap(&b);
  }
  inline void Swap(Fri_rcv* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fri_rcv* New() const final {
    return CreateMaybeMessage<Fri_rcv>(nullptr);
  }

  Fri_rcv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fri_rcv>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fri_rcv& from);
  void MergeFrom(const Fri_rcv& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fri_rcv* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Fri_rcv";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // string user = 1;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // @@protoc_insertion_point(class_scope:Fri_rcv)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Fri_accept :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Fri_accept) */ {
 public:
  Fri_accept();
  virtual ~Fri_accept();

  Fri_accept(const Fri_accept& from);
  Fri_accept(Fri_accept&& from) noexcept
    : Fri_accept() {
    *this = ::std::move(from);
  }

  inline Fri_accept& operator=(const Fri_accept& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fri_accept& operator=(Fri_accept&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fri_accept& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fri_accept* internal_default_instance() {
    return reinterpret_cast<const Fri_accept*>(
               &_Fri_accept_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Fri_accept& a, Fri_accept& b) {
    a.Swap(&b);
  }
  inline void Swap(Fri_accept* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fri_accept* New() const final {
    return CreateMaybeMessage<Fri_accept>(nullptr);
  }

  Fri_accept* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fri_accept>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fri_accept& from);
  void MergeFrom(const Fri_accept& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fri_accept* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Fri_accept";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 2,
    kAcceptFieldNumber = 1,
  };
  // string user = 2;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // bool accept = 1;
  void clear_accept();
  bool accept() const;
  void set_accept(bool value);
  private:
  bool _internal_accept() const;
  void _internal_set_accept(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Fri_accept)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  bool accept_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Fri_rmv :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Fri_rmv) */ {
 public:
  Fri_rmv();
  virtual ~Fri_rmv();

  Fri_rmv(const Fri_rmv& from);
  Fri_rmv(Fri_rmv&& from) noexcept
    : Fri_rmv() {
    *this = ::std::move(from);
  }

  inline Fri_rmv& operator=(const Fri_rmv& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fri_rmv& operator=(Fri_rmv&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fri_rmv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fri_rmv* internal_default_instance() {
    return reinterpret_cast<const Fri_rmv*>(
               &_Fri_rmv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Fri_rmv& a, Fri_rmv& b) {
    a.Swap(&b);
  }
  inline void Swap(Fri_rmv* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fri_rmv* New() const final {
    return CreateMaybeMessage<Fri_rmv>(nullptr);
  }

  Fri_rmv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fri_rmv>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fri_rmv& from);
  void MergeFrom(const Fri_rmv& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fri_rmv* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Fri_rmv";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // string user = 1;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // @@protoc_insertion_point(class_scope:Fri_rmv)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Fri_ls_r :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Fri_ls_r) */ {
 public:
  Fri_ls_r();
  virtual ~Fri_ls_r();

  Fri_ls_r(const Fri_ls_r& from);
  Fri_ls_r(Fri_ls_r&& from) noexcept
    : Fri_ls_r() {
    *this = ::std::move(from);
  }

  inline Fri_ls_r& operator=(const Fri_ls_r& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fri_ls_r& operator=(Fri_ls_r&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fri_ls_r& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fri_ls_r* internal_default_instance() {
    return reinterpret_cast<const Fri_ls_r*>(
               &_Fri_ls_r_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Fri_ls_r& a, Fri_ls_r& b) {
    a.Swap(&b);
  }
  inline void Swap(Fri_ls_r* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fri_ls_r* New() const final {
    return CreateMaybeMessage<Fri_ls_r>(nullptr);
  }

  Fri_ls_r* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fri_ls_r>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fri_ls_r& from);
  void MergeFrom(const Fri_ls_r& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fri_ls_r* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Fri_ls_r";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // repeated string user = 1;
  int user_size() const;
  private:
  int _internal_user_size() const;
  public:
  void clear_user();
  const std::string& user(int index) const;
  std::string* mutable_user(int index);
  void set_user(int index, const std::string& value);
  void set_user(int index, std::string&& value);
  void set_user(int index, const char* value);
  void set_user(int index, const char* value, size_t size);
  std::string* add_user();
  void add_user(const std::string& value);
  void add_user(std::string&& value);
  void add_user(const char* value);
  void add_user(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user();
  private:
  const std::string& _internal_user(int index) const;
  std::string* _internal_add_user();
  public:

  // @@protoc_insertion_point(class_scope:Fri_ls_r)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserConnect

// bool isregister = 1;
inline void UserConnect::clear_isregister() {
  isregister_ = false;
}
inline bool UserConnect::_internal_isregister() const {
  return isregister_;
}
inline bool UserConnect::isregister() const {
  // @@protoc_insertion_point(field_get:UserConnect.isregister)
  return _internal_isregister();
}
inline void UserConnect::_internal_set_isregister(bool value) {
  
  isregister_ = value;
}
inline void UserConnect::set_isregister(bool value) {
  _internal_set_isregister(value);
  // @@protoc_insertion_point(field_set:UserConnect.isregister)
}

// string pseudo = 2;
inline void UserConnect::clear_pseudo() {
  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserConnect::pseudo() const {
  // @@protoc_insertion_point(field_get:UserConnect.pseudo)
  return _internal_pseudo();
}
inline void UserConnect::set_pseudo(const std::string& value) {
  _internal_set_pseudo(value);
  // @@protoc_insertion_point(field_set:UserConnect.pseudo)
}
inline std::string* UserConnect::mutable_pseudo() {
  // @@protoc_insertion_point(field_mutable:UserConnect.pseudo)
  return _internal_mutable_pseudo();
}
inline const std::string& UserConnect::_internal_pseudo() const {
  return pseudo_.GetNoArena();
}
inline void UserConnect::_internal_set_pseudo(const std::string& value) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserConnect::set_pseudo(std::string&& value) {
  
  pseudo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserConnect.pseudo)
}
inline void UserConnect::set_pseudo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserConnect.pseudo)
}
inline void UserConnect::set_pseudo(const char* value, size_t size) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserConnect.pseudo)
}
inline std::string* UserConnect::_internal_mutable_pseudo() {
  
  return pseudo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserConnect::release_pseudo() {
  // @@protoc_insertion_point(field_release:UserConnect.pseudo)
  
  return pseudo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserConnect::set_allocated_pseudo(std::string* pseudo) {
  if (pseudo != nullptr) {
    
  } else {
    
  }
  pseudo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo);
  // @@protoc_insertion_point(field_set_allocated:UserConnect.pseudo)
}

// string password = 3;
inline void UserConnect::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserConnect::password() const {
  // @@protoc_insertion_point(field_get:UserConnect.password)
  return _internal_password();
}
inline void UserConnect::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:UserConnect.password)
}
inline std::string* UserConnect::mutable_password() {
  // @@protoc_insertion_point(field_mutable:UserConnect.password)
  return _internal_mutable_password();
}
inline const std::string& UserConnect::_internal_password() const {
  return password_.GetNoArena();
}
inline void UserConnect::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserConnect::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserConnect.password)
}
inline void UserConnect::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserConnect.password)
}
inline void UserConnect::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserConnect.password)
}
inline std::string* UserConnect::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserConnect::release_password() {
  // @@protoc_insertion_point(field_release:UserConnect.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserConnect::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:UserConnect.password)
}

// -------------------------------------------------------------------

// UserRegister

// string pseudo = 1;
inline void UserRegister::clear_pseudo() {
  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserRegister::pseudo() const {
  // @@protoc_insertion_point(field_get:UserRegister.pseudo)
  return _internal_pseudo();
}
inline void UserRegister::set_pseudo(const std::string& value) {
  _internal_set_pseudo(value);
  // @@protoc_insertion_point(field_set:UserRegister.pseudo)
}
inline std::string* UserRegister::mutable_pseudo() {
  // @@protoc_insertion_point(field_mutable:UserRegister.pseudo)
  return _internal_mutable_pseudo();
}
inline const std::string& UserRegister::_internal_pseudo() const {
  return pseudo_.GetNoArena();
}
inline void UserRegister::_internal_set_pseudo(const std::string& value) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserRegister::set_pseudo(std::string&& value) {
  
  pseudo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserRegister.pseudo)
}
inline void UserRegister::set_pseudo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserRegister.pseudo)
}
inline void UserRegister::set_pseudo(const char* value, size_t size) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserRegister.pseudo)
}
inline std::string* UserRegister::_internal_mutable_pseudo() {
  
  return pseudo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserRegister::release_pseudo() {
  // @@protoc_insertion_point(field_release:UserRegister.pseudo)
  
  return pseudo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegister::set_allocated_pseudo(std::string* pseudo) {
  if (pseudo != nullptr) {
    
  } else {
    
  }
  pseudo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo);
  // @@protoc_insertion_point(field_set_allocated:UserRegister.pseudo)
}

// string password = 2;
inline void UserRegister::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserRegister::password() const {
  // @@protoc_insertion_point(field_get:UserRegister.password)
  return _internal_password();
}
inline void UserRegister::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:UserRegister.password)
}
inline std::string* UserRegister::mutable_password() {
  // @@protoc_insertion_point(field_mutable:UserRegister.password)
  return _internal_mutable_password();
}
inline const std::string& UserRegister::_internal_password() const {
  return password_.GetNoArena();
}
inline void UserRegister::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserRegister::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserRegister.password)
}
inline void UserRegister::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserRegister.password)
}
inline void UserRegister::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserRegister.password)
}
inline std::string* UserRegister::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserRegister::release_password() {
  // @@protoc_insertion_point(field_release:UserRegister.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegister::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:UserRegister.password)
}

// -------------------------------------------------------------------

// Chat

// string pseudo = 1;
inline void Chat::clear_pseudo() {
  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chat::pseudo() const {
  // @@protoc_insertion_point(field_get:Chat.pseudo)
  return _internal_pseudo();
}
inline void Chat::set_pseudo(const std::string& value) {
  _internal_set_pseudo(value);
  // @@protoc_insertion_point(field_set:Chat.pseudo)
}
inline std::string* Chat::mutable_pseudo() {
  // @@protoc_insertion_point(field_mutable:Chat.pseudo)
  return _internal_mutable_pseudo();
}
inline const std::string& Chat::_internal_pseudo() const {
  return pseudo_.GetNoArena();
}
inline void Chat::_internal_set_pseudo(const std::string& value) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Chat::set_pseudo(std::string&& value) {
  
  pseudo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.pseudo)
}
inline void Chat::set_pseudo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.pseudo)
}
inline void Chat::set_pseudo(const char* value, size_t size) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.pseudo)
}
inline std::string* Chat::_internal_mutable_pseudo() {
  
  return pseudo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chat::release_pseudo() {
  // @@protoc_insertion_point(field_release:Chat.pseudo)
  
  return pseudo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chat::set_allocated_pseudo(std::string* pseudo) {
  if (pseudo != nullptr) {
    
  } else {
    
  }
  pseudo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo);
  // @@protoc_insertion_point(field_set_allocated:Chat.pseudo)
}

// string msg = 2;
inline void Chat::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chat::msg() const {
  // @@protoc_insertion_point(field_get:Chat.msg)
  return _internal_msg();
}
inline void Chat::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:Chat.msg)
}
inline std::string* Chat::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Chat.msg)
  return _internal_mutable_msg();
}
inline const std::string& Chat::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void Chat::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Chat::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Chat.msg)
}
inline void Chat::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.msg)
}
inline void Chat::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.msg)
}
inline std::string* Chat::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chat::release_msg() {
  // @@protoc_insertion_point(field_release:Chat.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chat::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Chat.msg)
}

// -------------------------------------------------------------------

// Invitation

// string pseudo = 1;
inline void Invitation::clear_pseudo() {
  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Invitation::pseudo() const {
  // @@protoc_insertion_point(field_get:Invitation.pseudo)
  return _internal_pseudo();
}
inline void Invitation::set_pseudo(const std::string& value) {
  _internal_set_pseudo(value);
  // @@protoc_insertion_point(field_set:Invitation.pseudo)
}
inline std::string* Invitation::mutable_pseudo() {
  // @@protoc_insertion_point(field_mutable:Invitation.pseudo)
  return _internal_mutable_pseudo();
}
inline const std::string& Invitation::_internal_pseudo() const {
  return pseudo_.GetNoArena();
}
inline void Invitation::_internal_set_pseudo(const std::string& value) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Invitation::set_pseudo(std::string&& value) {
  
  pseudo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Invitation.pseudo)
}
inline void Invitation::set_pseudo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Invitation.pseudo)
}
inline void Invitation::set_pseudo(const char* value, size_t size) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Invitation.pseudo)
}
inline std::string* Invitation::_internal_mutable_pseudo() {
  
  return pseudo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Invitation::release_pseudo() {
  // @@protoc_insertion_point(field_release:Invitation.pseudo)
  
  return pseudo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Invitation::set_allocated_pseudo(std::string* pseudo) {
  if (pseudo != nullptr) {
    
  } else {
    
  }
  pseudo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo);
  // @@protoc_insertion_point(field_set_allocated:Invitation.pseudo)
}

// -------------------------------------------------------------------

// Join

// string pseudo = 1;
inline void Join::clear_pseudo() {
  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Join::pseudo() const {
  // @@protoc_insertion_point(field_get:Join.pseudo)
  return _internal_pseudo();
}
inline void Join::set_pseudo(const std::string& value) {
  _internal_set_pseudo(value);
  // @@protoc_insertion_point(field_set:Join.pseudo)
}
inline std::string* Join::mutable_pseudo() {
  // @@protoc_insertion_point(field_mutable:Join.pseudo)
  return _internal_mutable_pseudo();
}
inline const std::string& Join::_internal_pseudo() const {
  return pseudo_.GetNoArena();
}
inline void Join::_internal_set_pseudo(const std::string& value) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Join::set_pseudo(std::string&& value) {
  
  pseudo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Join.pseudo)
}
inline void Join::set_pseudo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Join.pseudo)
}
inline void Join::set_pseudo(const char* value, size_t size) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Join.pseudo)
}
inline std::string* Join::_internal_mutable_pseudo() {
  
  return pseudo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Join::release_pseudo() {
  // @@protoc_insertion_point(field_release:Join.pseudo)
  
  return pseudo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Join::set_allocated_pseudo(std::string* pseudo) {
  if (pseudo != nullptr) {
    
  } else {
    
  }
  pseudo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo);
  // @@protoc_insertion_point(field_set_allocated:Join.pseudo)
}

// -------------------------------------------------------------------

// Lomb_r

// string Lomb_1 = 1;
inline void Lomb_r::clear_lomb_1() {
  lomb_1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Lomb_r::lomb_1() const {
  // @@protoc_insertion_point(field_get:Lomb_r.Lomb_1)
  return _internal_lomb_1();
}
inline void Lomb_r::set_lomb_1(const std::string& value) {
  _internal_set_lomb_1(value);
  // @@protoc_insertion_point(field_set:Lomb_r.Lomb_1)
}
inline std::string* Lomb_r::mutable_lomb_1() {
  // @@protoc_insertion_point(field_mutable:Lomb_r.Lomb_1)
  return _internal_mutable_lomb_1();
}
inline const std::string& Lomb_r::_internal_lomb_1() const {
  return lomb_1_.GetNoArena();
}
inline void Lomb_r::_internal_set_lomb_1(const std::string& value) {
  
  lomb_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Lomb_r::set_lomb_1(std::string&& value) {
  
  lomb_1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lomb_r.Lomb_1)
}
inline void Lomb_r::set_lomb_1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lomb_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lomb_r.Lomb_1)
}
inline void Lomb_r::set_lomb_1(const char* value, size_t size) {
  
  lomb_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lomb_r.Lomb_1)
}
inline std::string* Lomb_r::_internal_mutable_lomb_1() {
  
  return lomb_1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Lomb_r::release_lomb_1() {
  // @@protoc_insertion_point(field_release:Lomb_r.Lomb_1)
  
  return lomb_1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Lomb_r::set_allocated_lomb_1(std::string* lomb_1) {
  if (lomb_1 != nullptr) {
    
  } else {
    
  }
  lomb_1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lomb_1);
  // @@protoc_insertion_point(field_set_allocated:Lomb_r.Lomb_1)
}

// string Lomb_2 = 2;
inline void Lomb_r::clear_lomb_2() {
  lomb_2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Lomb_r::lomb_2() const {
  // @@protoc_insertion_point(field_get:Lomb_r.Lomb_2)
  return _internal_lomb_2();
}
inline void Lomb_r::set_lomb_2(const std::string& value) {
  _internal_set_lomb_2(value);
  // @@protoc_insertion_point(field_set:Lomb_r.Lomb_2)
}
inline std::string* Lomb_r::mutable_lomb_2() {
  // @@protoc_insertion_point(field_mutable:Lomb_r.Lomb_2)
  return _internal_mutable_lomb_2();
}
inline const std::string& Lomb_r::_internal_lomb_2() const {
  return lomb_2_.GetNoArena();
}
inline void Lomb_r::_internal_set_lomb_2(const std::string& value) {
  
  lomb_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Lomb_r::set_lomb_2(std::string&& value) {
  
  lomb_2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lomb_r.Lomb_2)
}
inline void Lomb_r::set_lomb_2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lomb_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lomb_r.Lomb_2)
}
inline void Lomb_r::set_lomb_2(const char* value, size_t size) {
  
  lomb_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lomb_r.Lomb_2)
}
inline std::string* Lomb_r::_internal_mutable_lomb_2() {
  
  return lomb_2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Lomb_r::release_lomb_2() {
  // @@protoc_insertion_point(field_release:Lomb_r.Lomb_2)
  
  return lomb_2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Lomb_r::set_allocated_lomb_2(std::string* lomb_2) {
  if (lomb_2 != nullptr) {
    
  } else {
    
  }
  lomb_2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lomb_2);
  // @@protoc_insertion_point(field_set_allocated:Lomb_r.Lomb_2)
}

// string Lomb_3 = 3;
inline void Lomb_r::clear_lomb_3() {
  lomb_3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Lomb_r::lomb_3() const {
  // @@protoc_insertion_point(field_get:Lomb_r.Lomb_3)
  return _internal_lomb_3();
}
inline void Lomb_r::set_lomb_3(const std::string& value) {
  _internal_set_lomb_3(value);
  // @@protoc_insertion_point(field_set:Lomb_r.Lomb_3)
}
inline std::string* Lomb_r::mutable_lomb_3() {
  // @@protoc_insertion_point(field_mutable:Lomb_r.Lomb_3)
  return _internal_mutable_lomb_3();
}
inline const std::string& Lomb_r::_internal_lomb_3() const {
  return lomb_3_.GetNoArena();
}
inline void Lomb_r::_internal_set_lomb_3(const std::string& value) {
  
  lomb_3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Lomb_r::set_lomb_3(std::string&& value) {
  
  lomb_3_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lomb_r.Lomb_3)
}
inline void Lomb_r::set_lomb_3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lomb_3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lomb_r.Lomb_3)
}
inline void Lomb_r::set_lomb_3(const char* value, size_t size) {
  
  lomb_3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lomb_r.Lomb_3)
}
inline std::string* Lomb_r::_internal_mutable_lomb_3() {
  
  return lomb_3_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Lomb_r::release_lomb_3() {
  // @@protoc_insertion_point(field_release:Lomb_r.Lomb_3)
  
  return lomb_3_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Lomb_r::set_allocated_lomb_3(std::string* lomb_3) {
  if (lomb_3 != nullptr) {
    
  } else {
    
  }
  lomb_3_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lomb_3);
  // @@protoc_insertion_point(field_set_allocated:Lomb_r.Lomb_3)
}

// string Lomb_4 = 4;
inline void Lomb_r::clear_lomb_4() {
  lomb_4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Lomb_r::lomb_4() const {
  // @@protoc_insertion_point(field_get:Lomb_r.Lomb_4)
  return _internal_lomb_4();
}
inline void Lomb_r::set_lomb_4(const std::string& value) {
  _internal_set_lomb_4(value);
  // @@protoc_insertion_point(field_set:Lomb_r.Lomb_4)
}
inline std::string* Lomb_r::mutable_lomb_4() {
  // @@protoc_insertion_point(field_mutable:Lomb_r.Lomb_4)
  return _internal_mutable_lomb_4();
}
inline const std::string& Lomb_r::_internal_lomb_4() const {
  return lomb_4_.GetNoArena();
}
inline void Lomb_r::_internal_set_lomb_4(const std::string& value) {
  
  lomb_4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Lomb_r::set_lomb_4(std::string&& value) {
  
  lomb_4_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lomb_r.Lomb_4)
}
inline void Lomb_r::set_lomb_4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lomb_4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lomb_r.Lomb_4)
}
inline void Lomb_r::set_lomb_4(const char* value, size_t size) {
  
  lomb_4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lomb_r.Lomb_4)
}
inline std::string* Lomb_r::_internal_mutable_lomb_4() {
  
  return lomb_4_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Lomb_r::release_lomb_4() {
  // @@protoc_insertion_point(field_release:Lomb_r.Lomb_4)
  
  return lomb_4_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Lomb_r::set_allocated_lomb_4(std::string* lomb_4) {
  if (lomb_4 != nullptr) {
    
  } else {
    
  }
  lomb_4_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lomb_4);
  // @@protoc_insertion_point(field_set_allocated:Lomb_r.Lomb_4)
}

// string Lomb_5 = 5;
inline void Lomb_r::clear_lomb_5() {
  lomb_5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Lomb_r::lomb_5() const {
  // @@protoc_insertion_point(field_get:Lomb_r.Lomb_5)
  return _internal_lomb_5();
}
inline void Lomb_r::set_lomb_5(const std::string& value) {
  _internal_set_lomb_5(value);
  // @@protoc_insertion_point(field_set:Lomb_r.Lomb_5)
}
inline std::string* Lomb_r::mutable_lomb_5() {
  // @@protoc_insertion_point(field_mutable:Lomb_r.Lomb_5)
  return _internal_mutable_lomb_5();
}
inline const std::string& Lomb_r::_internal_lomb_5() const {
  return lomb_5_.GetNoArena();
}
inline void Lomb_r::_internal_set_lomb_5(const std::string& value) {
  
  lomb_5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Lomb_r::set_lomb_5(std::string&& value) {
  
  lomb_5_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lomb_r.Lomb_5)
}
inline void Lomb_r::set_lomb_5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lomb_5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lomb_r.Lomb_5)
}
inline void Lomb_r::set_lomb_5(const char* value, size_t size) {
  
  lomb_5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lomb_r.Lomb_5)
}
inline std::string* Lomb_r::_internal_mutable_lomb_5() {
  
  return lomb_5_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Lomb_r::release_lomb_5() {
  // @@protoc_insertion_point(field_release:Lomb_r.Lomb_5)
  
  return lomb_5_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Lomb_r::set_allocated_lomb_5(std::string* lomb_5) {
  if (lomb_5 != nullptr) {
    
  } else {
    
  }
  lomb_5_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lomb_5);
  // @@protoc_insertion_point(field_set_allocated:Lomb_r.Lomb_5)
}

// string Lomb_6 = 6;
inline void Lomb_r::clear_lomb_6() {
  lomb_6_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Lomb_r::lomb_6() const {
  // @@protoc_insertion_point(field_get:Lomb_r.Lomb_6)
  return _internal_lomb_6();
}
inline void Lomb_r::set_lomb_6(const std::string& value) {
  _internal_set_lomb_6(value);
  // @@protoc_insertion_point(field_set:Lomb_r.Lomb_6)
}
inline std::string* Lomb_r::mutable_lomb_6() {
  // @@protoc_insertion_point(field_mutable:Lomb_r.Lomb_6)
  return _internal_mutable_lomb_6();
}
inline const std::string& Lomb_r::_internal_lomb_6() const {
  return lomb_6_.GetNoArena();
}
inline void Lomb_r::_internal_set_lomb_6(const std::string& value) {
  
  lomb_6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Lomb_r::set_lomb_6(std::string&& value) {
  
  lomb_6_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lomb_r.Lomb_6)
}
inline void Lomb_r::set_lomb_6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lomb_6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lomb_r.Lomb_6)
}
inline void Lomb_r::set_lomb_6(const char* value, size_t size) {
  
  lomb_6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lomb_r.Lomb_6)
}
inline std::string* Lomb_r::_internal_mutable_lomb_6() {
  
  return lomb_6_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Lomb_r::release_lomb_6() {
  // @@protoc_insertion_point(field_release:Lomb_r.Lomb_6)
  
  return lomb_6_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Lomb_r::set_allocated_lomb_6(std::string* lomb_6) {
  if (lomb_6 != nullptr) {
    
  } else {
    
  }
  lomb_6_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lomb_6);
  // @@protoc_insertion_point(field_set_allocated:Lomb_r.Lomb_6)
}

// string Lomb_7 = 7;
inline void Lomb_r::clear_lomb_7() {
  lomb_7_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Lomb_r::lomb_7() const {
  // @@protoc_insertion_point(field_get:Lomb_r.Lomb_7)
  return _internal_lomb_7();
}
inline void Lomb_r::set_lomb_7(const std::string& value) {
  _internal_set_lomb_7(value);
  // @@protoc_insertion_point(field_set:Lomb_r.Lomb_7)
}
inline std::string* Lomb_r::mutable_lomb_7() {
  // @@protoc_insertion_point(field_mutable:Lomb_r.Lomb_7)
  return _internal_mutable_lomb_7();
}
inline const std::string& Lomb_r::_internal_lomb_7() const {
  return lomb_7_.GetNoArena();
}
inline void Lomb_r::_internal_set_lomb_7(const std::string& value) {
  
  lomb_7_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Lomb_r::set_lomb_7(std::string&& value) {
  
  lomb_7_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lomb_r.Lomb_7)
}
inline void Lomb_r::set_lomb_7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lomb_7_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lomb_r.Lomb_7)
}
inline void Lomb_r::set_lomb_7(const char* value, size_t size) {
  
  lomb_7_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lomb_r.Lomb_7)
}
inline std::string* Lomb_r::_internal_mutable_lomb_7() {
  
  return lomb_7_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Lomb_r::release_lomb_7() {
  // @@protoc_insertion_point(field_release:Lomb_r.Lomb_7)
  
  return lomb_7_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Lomb_r::set_allocated_lomb_7(std::string* lomb_7) {
  if (lomb_7 != nullptr) {
    
  } else {
    
  }
  lomb_7_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lomb_7);
  // @@protoc_insertion_point(field_set_allocated:Lomb_r.Lomb_7)
}

// string Lomb_8 = 8;
inline void Lomb_r::clear_lomb_8() {
  lomb_8_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Lomb_r::lomb_8() const {
  // @@protoc_insertion_point(field_get:Lomb_r.Lomb_8)
  return _internal_lomb_8();
}
inline void Lomb_r::set_lomb_8(const std::string& value) {
  _internal_set_lomb_8(value);
  // @@protoc_insertion_point(field_set:Lomb_r.Lomb_8)
}
inline std::string* Lomb_r::mutable_lomb_8() {
  // @@protoc_insertion_point(field_mutable:Lomb_r.Lomb_8)
  return _internal_mutable_lomb_8();
}
inline const std::string& Lomb_r::_internal_lomb_8() const {
  return lomb_8_.GetNoArena();
}
inline void Lomb_r::_internal_set_lomb_8(const std::string& value) {
  
  lomb_8_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Lomb_r::set_lomb_8(std::string&& value) {
  
  lomb_8_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lomb_r.Lomb_8)
}
inline void Lomb_r::set_lomb_8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lomb_8_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lomb_r.Lomb_8)
}
inline void Lomb_r::set_lomb_8(const char* value, size_t size) {
  
  lomb_8_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lomb_r.Lomb_8)
}
inline std::string* Lomb_r::_internal_mutable_lomb_8() {
  
  return lomb_8_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Lomb_r::release_lomb_8() {
  // @@protoc_insertion_point(field_release:Lomb_r.Lomb_8)
  
  return lomb_8_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Lomb_r::set_allocated_lomb_8(std::string* lomb_8) {
  if (lomb_8 != nullptr) {
    
  } else {
    
  }
  lomb_8_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lomb_8);
  // @@protoc_insertion_point(field_set_allocated:Lomb_r.Lomb_8)
}

// -------------------------------------------------------------------

// Lomb_mod

// uint32 id_lomb = 1;
inline void Lomb_mod::clear_id_lomb() {
  id_lomb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lomb_mod::_internal_id_lomb() const {
  return id_lomb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Lomb_mod::id_lomb() const {
  // @@protoc_insertion_point(field_get:Lomb_mod.id_lomb)
  return _internal_id_lomb();
}
inline void Lomb_mod::_internal_set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_lomb_ = value;
}
inline void Lomb_mod::set_id_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id_lomb(value);
  // @@protoc_insertion_point(field_set:Lomb_mod.id_lomb)
}

// string name_Lomb = 2;
inline void Lomb_mod::clear_name_lomb() {
  name_lomb_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Lomb_mod::name_lomb() const {
  // @@protoc_insertion_point(field_get:Lomb_mod.name_Lomb)
  return _internal_name_lomb();
}
inline void Lomb_mod::set_name_lomb(const std::string& value) {
  _internal_set_name_lomb(value);
  // @@protoc_insertion_point(field_set:Lomb_mod.name_Lomb)
}
inline std::string* Lomb_mod::mutable_name_lomb() {
  // @@protoc_insertion_point(field_mutable:Lomb_mod.name_Lomb)
  return _internal_mutable_name_lomb();
}
inline const std::string& Lomb_mod::_internal_name_lomb() const {
  return name_lomb_.GetNoArena();
}
inline void Lomb_mod::_internal_set_name_lomb(const std::string& value) {
  
  name_lomb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Lomb_mod::set_name_lomb(std::string&& value) {
  
  name_lomb_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lomb_mod.name_Lomb)
}
inline void Lomb_mod::set_name_lomb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_lomb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lomb_mod.name_Lomb)
}
inline void Lomb_mod::set_name_lomb(const char* value, size_t size) {
  
  name_lomb_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lomb_mod.name_Lomb)
}
inline std::string* Lomb_mod::_internal_mutable_name_lomb() {
  
  return name_lomb_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Lomb_mod::release_name_lomb() {
  // @@protoc_insertion_point(field_release:Lomb_mod.name_Lomb)
  
  return name_lomb_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Lomb_mod::set_allocated_name_lomb(std::string* name_lomb) {
  if (name_lomb != nullptr) {
    
  } else {
    
  }
  name_lomb_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_lomb);
  // @@protoc_insertion_point(field_set_allocated:Lomb_mod.name_Lomb)
}

// -------------------------------------------------------------------

// Usr_add

// string pseudo = 1;
inline void Usr_add::clear_pseudo() {
  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Usr_add::pseudo() const {
  // @@protoc_insertion_point(field_get:Usr_add.pseudo)
  return _internal_pseudo();
}
inline void Usr_add::set_pseudo(const std::string& value) {
  _internal_set_pseudo(value);
  // @@protoc_insertion_point(field_set:Usr_add.pseudo)
}
inline std::string* Usr_add::mutable_pseudo() {
  // @@protoc_insertion_point(field_mutable:Usr_add.pseudo)
  return _internal_mutable_pseudo();
}
inline const std::string& Usr_add::_internal_pseudo() const {
  return pseudo_.GetNoArena();
}
inline void Usr_add::_internal_set_pseudo(const std::string& value) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Usr_add::set_pseudo(std::string&& value) {
  
  pseudo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Usr_add.pseudo)
}
inline void Usr_add::set_pseudo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Usr_add.pseudo)
}
inline void Usr_add::set_pseudo(const char* value, size_t size) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Usr_add.pseudo)
}
inline std::string* Usr_add::_internal_mutable_pseudo() {
  
  return pseudo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Usr_add::release_pseudo() {
  // @@protoc_insertion_point(field_release:Usr_add.pseudo)
  
  return pseudo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Usr_add::set_allocated_pseudo(std::string* pseudo) {
  if (pseudo != nullptr) {
    
  } else {
    
  }
  pseudo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo);
  // @@protoc_insertion_point(field_set_allocated:Usr_add.pseudo)
}

// -------------------------------------------------------------------

// Map_mod

// uint32 id = 1;
inline void Map_mod::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_mod::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map_mod::id() const {
  // @@protoc_insertion_point(field_get:Map_mod.id)
  return _internal_id();
}
inline void Map_mod::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Map_mod::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Map_mod.id)
}

// -------------------------------------------------------------------

// Time_mod

// uint32 time = 1;
inline void Time_mod::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Time_mod::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Time_mod::time() const {
  // @@protoc_insertion_point(field_get:Time_mod.time)
  return _internal_time();
}
inline void Time_mod::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void Time_mod::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Time_mod.time)
}

// -------------------------------------------------------------------

// Time_round_mod

// uint32 time = 1;
inline void Time_round_mod::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Time_round_mod::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Time_round_mod::time() const {
  // @@protoc_insertion_point(field_get:Time_round_mod.time)
  return _internal_time();
}
inline void Time_round_mod::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void Time_round_mod::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Time_round_mod.time)
}

// -------------------------------------------------------------------

// Nbr_lomb_mod

// uint32 nbr_lomb = 1;
inline void Nbr_lomb_mod::clear_nbr_lomb() {
  nbr_lomb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Nbr_lomb_mod::_internal_nbr_lomb() const {
  return nbr_lomb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Nbr_lomb_mod::nbr_lomb() const {
  // @@protoc_insertion_point(field_get:Nbr_lomb_mod.nbr_lomb)
  return _internal_nbr_lomb();
}
inline void Nbr_lomb_mod::_internal_set_nbr_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nbr_lomb_ = value;
}
inline void Nbr_lomb_mod::set_nbr_lomb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nbr_lomb(value);
  // @@protoc_insertion_point(field_set:Nbr_lomb_mod.nbr_lomb)
}

// -------------------------------------------------------------------

// Join_groupe_s

// uint32 id = 1;
inline void Join_groupe_s::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Join_groupe_s::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Join_groupe_s::id() const {
  // @@protoc_insertion_point(field_get:Join_groupe_s.id)
  return _internal_id();
}
inline void Join_groupe_s::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Join_groupe_s::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Join_groupe_s.id)
}

// -------------------------------------------------------------------

// Join_groupe_r

// string pseudo = 1;
inline void Join_groupe_r::clear_pseudo() {
  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Join_groupe_r::pseudo() const {
  // @@protoc_insertion_point(field_get:Join_groupe_r.pseudo)
  return _internal_pseudo();
}
inline void Join_groupe_r::set_pseudo(const std::string& value) {
  _internal_set_pseudo(value);
  // @@protoc_insertion_point(field_set:Join_groupe_r.pseudo)
}
inline std::string* Join_groupe_r::mutable_pseudo() {
  // @@protoc_insertion_point(field_mutable:Join_groupe_r.pseudo)
  return _internal_mutable_pseudo();
}
inline const std::string& Join_groupe_r::_internal_pseudo() const {
  return pseudo_.GetNoArena();
}
inline void Join_groupe_r::_internal_set_pseudo(const std::string& value) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Join_groupe_r::set_pseudo(std::string&& value) {
  
  pseudo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Join_groupe_r.pseudo)
}
inline void Join_groupe_r::set_pseudo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Join_groupe_r.pseudo)
}
inline void Join_groupe_r::set_pseudo(const char* value, size_t size) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Join_groupe_r.pseudo)
}
inline std::string* Join_groupe_r::_internal_mutable_pseudo() {
  
  return pseudo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Join_groupe_r::release_pseudo() {
  // @@protoc_insertion_point(field_release:Join_groupe_r.pseudo)
  
  return pseudo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Join_groupe_r::set_allocated_pseudo(std::string* pseudo) {
  if (pseudo != nullptr) {
    
  } else {
    
  }
  pseudo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo);
  // @@protoc_insertion_point(field_set_allocated:Join_groupe_r.pseudo)
}

// uint32 id = 2;
inline void Join_groupe_r::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Join_groupe_r::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Join_groupe_r::id() const {
  // @@protoc_insertion_point(field_get:Join_groupe_r.id)
  return _internal_id();
}
inline void Join_groupe_r::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Join_groupe_r::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Join_groupe_r.id)
}

// -------------------------------------------------------------------

// Get_history

// string pseudo = 1;
inline void Get_history::clear_pseudo() {
  pseudo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Get_history::pseudo() const {
  // @@protoc_insertion_point(field_get:Get_history.pseudo)
  return _internal_pseudo();
}
inline void Get_history::set_pseudo(const std::string& value) {
  _internal_set_pseudo(value);
  // @@protoc_insertion_point(field_set:Get_history.pseudo)
}
inline std::string* Get_history::mutable_pseudo() {
  // @@protoc_insertion_point(field_mutable:Get_history.pseudo)
  return _internal_mutable_pseudo();
}
inline const std::string& Get_history::_internal_pseudo() const {
  return pseudo_.GetNoArena();
}
inline void Get_history::_internal_set_pseudo(const std::string& value) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Get_history::set_pseudo(std::string&& value) {
  
  pseudo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Get_history.pseudo)
}
inline void Get_history::set_pseudo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Get_history.pseudo)
}
inline void Get_history::set_pseudo(const char* value, size_t size) {
  
  pseudo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Get_history.pseudo)
}
inline std::string* Get_history::_internal_mutable_pseudo() {
  
  return pseudo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Get_history::release_pseudo() {
  // @@protoc_insertion_point(field_release:Get_history.pseudo)
  
  return pseudo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Get_history::set_allocated_pseudo(std::string* pseudo) {
  if (pseudo != nullptr) {
    
  } else {
    
  }
  pseudo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo);
  // @@protoc_insertion_point(field_set_allocated:Get_history.pseudo)
}

// uint32 first_game = 2;
inline void Get_history::clear_first_game() {
  first_game_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Get_history::_internal_first_game() const {
  return first_game_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Get_history::first_game() const {
  // @@protoc_insertion_point(field_get:Get_history.first_game)
  return _internal_first_game();
}
inline void Get_history::_internal_set_first_game(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  first_game_ = value;
}
inline void Get_history::set_first_game(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_first_game(value);
  // @@protoc_insertion_point(field_set:Get_history.first_game)
}

// uint32 nbr_game = 3;
inline void Get_history::clear_nbr_game() {
  nbr_game_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Get_history::_internal_nbr_game() const {
  return nbr_game_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Get_history::nbr_game() const {
  // @@protoc_insertion_point(field_get:Get_history.nbr_game)
  return _internal_nbr_game();
}
inline void Get_history::_internal_set_nbr_game(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nbr_game_ = value;
}
inline void Get_history::set_nbr_game(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nbr_game(value);
  // @@protoc_insertion_point(field_set:Get_history.nbr_game)
}

// -------------------------------------------------------------------

// History

// string pseudo_1 = 1;
inline void History::clear_pseudo_1() {
  pseudo_1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& History::pseudo_1() const {
  // @@protoc_insertion_point(field_get:History.pseudo_1)
  return _internal_pseudo_1();
}
inline void History::set_pseudo_1(const std::string& value) {
  _internal_set_pseudo_1(value);
  // @@protoc_insertion_point(field_set:History.pseudo_1)
}
inline std::string* History::mutable_pseudo_1() {
  // @@protoc_insertion_point(field_mutable:History.pseudo_1)
  return _internal_mutable_pseudo_1();
}
inline const std::string& History::_internal_pseudo_1() const {
  return pseudo_1_.GetNoArena();
}
inline void History::_internal_set_pseudo_1(const std::string& value) {
  
  pseudo_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void History::set_pseudo_1(std::string&& value) {
  
  pseudo_1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:History.pseudo_1)
}
inline void History::set_pseudo_1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:History.pseudo_1)
}
inline void History::set_pseudo_1(const char* value, size_t size) {
  
  pseudo_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:History.pseudo_1)
}
inline std::string* History::_internal_mutable_pseudo_1() {
  
  return pseudo_1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* History::release_pseudo_1() {
  // @@protoc_insertion_point(field_release:History.pseudo_1)
  
  return pseudo_1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void History::set_allocated_pseudo_1(std::string* pseudo_1) {
  if (pseudo_1 != nullptr) {
    
  } else {
    
  }
  pseudo_1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo_1);
  // @@protoc_insertion_point(field_set_allocated:History.pseudo_1)
}

// string pseudo_2 = 2;
inline void History::clear_pseudo_2() {
  pseudo_2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& History::pseudo_2() const {
  // @@protoc_insertion_point(field_get:History.pseudo_2)
  return _internal_pseudo_2();
}
inline void History::set_pseudo_2(const std::string& value) {
  _internal_set_pseudo_2(value);
  // @@protoc_insertion_point(field_set:History.pseudo_2)
}
inline std::string* History::mutable_pseudo_2() {
  // @@protoc_insertion_point(field_mutable:History.pseudo_2)
  return _internal_mutable_pseudo_2();
}
inline const std::string& History::_internal_pseudo_2() const {
  return pseudo_2_.GetNoArena();
}
inline void History::_internal_set_pseudo_2(const std::string& value) {
  
  pseudo_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void History::set_pseudo_2(std::string&& value) {
  
  pseudo_2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:History.pseudo_2)
}
inline void History::set_pseudo_2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:History.pseudo_2)
}
inline void History::set_pseudo_2(const char* value, size_t size) {
  
  pseudo_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:History.pseudo_2)
}
inline std::string* History::_internal_mutable_pseudo_2() {
  
  return pseudo_2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* History::release_pseudo_2() {
  // @@protoc_insertion_point(field_release:History.pseudo_2)
  
  return pseudo_2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void History::set_allocated_pseudo_2(std::string* pseudo_2) {
  if (pseudo_2 != nullptr) {
    
  } else {
    
  }
  pseudo_2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo_2);
  // @@protoc_insertion_point(field_set_allocated:History.pseudo_2)
}

// string pseudo_3 = 3;
inline void History::clear_pseudo_3() {
  pseudo_3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& History::pseudo_3() const {
  // @@protoc_insertion_point(field_get:History.pseudo_3)
  return _internal_pseudo_3();
}
inline void History::set_pseudo_3(const std::string& value) {
  _internal_set_pseudo_3(value);
  // @@protoc_insertion_point(field_set:History.pseudo_3)
}
inline std::string* History::mutable_pseudo_3() {
  // @@protoc_insertion_point(field_mutable:History.pseudo_3)
  return _internal_mutable_pseudo_3();
}
inline const std::string& History::_internal_pseudo_3() const {
  return pseudo_3_.GetNoArena();
}
inline void History::_internal_set_pseudo_3(const std::string& value) {
  
  pseudo_3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void History::set_pseudo_3(std::string&& value) {
  
  pseudo_3_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:History.pseudo_3)
}
inline void History::set_pseudo_3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:History.pseudo_3)
}
inline void History::set_pseudo_3(const char* value, size_t size) {
  
  pseudo_3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:History.pseudo_3)
}
inline std::string* History::_internal_mutable_pseudo_3() {
  
  return pseudo_3_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* History::release_pseudo_3() {
  // @@protoc_insertion_point(field_release:History.pseudo_3)
  
  return pseudo_3_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void History::set_allocated_pseudo_3(std::string* pseudo_3) {
  if (pseudo_3 != nullptr) {
    
  } else {
    
  }
  pseudo_3_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo_3);
  // @@protoc_insertion_point(field_set_allocated:History.pseudo_3)
}

// string pseudo_4 = 4;
inline void History::clear_pseudo_4() {
  pseudo_4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& History::pseudo_4() const {
  // @@protoc_insertion_point(field_get:History.pseudo_4)
  return _internal_pseudo_4();
}
inline void History::set_pseudo_4(const std::string& value) {
  _internal_set_pseudo_4(value);
  // @@protoc_insertion_point(field_set:History.pseudo_4)
}
inline std::string* History::mutable_pseudo_4() {
  // @@protoc_insertion_point(field_mutable:History.pseudo_4)
  return _internal_mutable_pseudo_4();
}
inline const std::string& History::_internal_pseudo_4() const {
  return pseudo_4_.GetNoArena();
}
inline void History::_internal_set_pseudo_4(const std::string& value) {
  
  pseudo_4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void History::set_pseudo_4(std::string&& value) {
  
  pseudo_4_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:History.pseudo_4)
}
inline void History::set_pseudo_4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:History.pseudo_4)
}
inline void History::set_pseudo_4(const char* value, size_t size) {
  
  pseudo_4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:History.pseudo_4)
}
inline std::string* History::_internal_mutable_pseudo_4() {
  
  return pseudo_4_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* History::release_pseudo_4() {
  // @@protoc_insertion_point(field_release:History.pseudo_4)
  
  return pseudo_4_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void History::set_allocated_pseudo_4(std::string* pseudo_4) {
  if (pseudo_4 != nullptr) {
    
  } else {
    
  }
  pseudo_4_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudo_4);
  // @@protoc_insertion_point(field_set_allocated:History.pseudo_4)
}

// uint32 pouint32_1 = 5;
inline void History::clear_pouint32_1() {
  pouint32_1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::_internal_pouint32_1() const {
  return pouint32_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::pouint32_1() const {
  // @@protoc_insertion_point(field_get:History.pouint32_1)
  return _internal_pouint32_1();
}
inline void History::_internal_set_pouint32_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pouint32_1_ = value;
}
inline void History::set_pouint32_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pouint32_1(value);
  // @@protoc_insertion_point(field_set:History.pouint32_1)
}

// uint32 pouint32_2 = 6;
inline void History::clear_pouint32_2() {
  pouint32_2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::_internal_pouint32_2() const {
  return pouint32_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::pouint32_2() const {
  // @@protoc_insertion_point(field_get:History.pouint32_2)
  return _internal_pouint32_2();
}
inline void History::_internal_set_pouint32_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pouint32_2_ = value;
}
inline void History::set_pouint32_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pouint32_2(value);
  // @@protoc_insertion_point(field_set:History.pouint32_2)
}

// uint32 pouint32_3 = 7;
inline void History::clear_pouint32_3() {
  pouint32_3_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::_internal_pouint32_3() const {
  return pouint32_3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::pouint32_3() const {
  // @@protoc_insertion_point(field_get:History.pouint32_3)
  return _internal_pouint32_3();
}
inline void History::_internal_set_pouint32_3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pouint32_3_ = value;
}
inline void History::set_pouint32_3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pouint32_3(value);
  // @@protoc_insertion_point(field_set:History.pouint32_3)
}

// uint32 pouint32_4 = 8;
inline void History::clear_pouint32_4() {
  pouint32_4_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::_internal_pouint32_4() const {
  return pouint32_4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::pouint32_4() const {
  // @@protoc_insertion_point(field_get:History.pouint32_4)
  return _internal_pouint32_4();
}
inline void History::_internal_set_pouint32_4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pouint32_4_ = value;
}
inline void History::set_pouint32_4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pouint32_4(value);
  // @@protoc_insertion_point(field_set:History.pouint32_4)
}

// uint32 date = 9;
inline void History::clear_date() {
  date_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::_internal_date() const {
  return date_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 History::date() const {
  // @@protoc_insertion_point(field_get:History.date)
  return _internal_date();
}
inline void History::_internal_set_date(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  date_ = value;
}
inline void History::set_date(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:History.date)
}

// -------------------------------------------------------------------

// History_r

// repeated .History history = 1;
inline int History_r::_internal_history_size() const {
  return history_.size();
}
inline int History_r::history_size() const {
  return _internal_history_size();
}
inline void History_r::clear_history() {
  history_.Clear();
}
inline ::History* History_r::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:History_r.history)
  return history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::History >*
History_r::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:History_r.history)
  return &history_;
}
inline const ::History& History_r::_internal_history(int index) const {
  return history_.Get(index);
}
inline const ::History& History_r::history(int index) const {
  // @@protoc_insertion_point(field_get:History_r.history)
  return _internal_history(index);
}
inline ::History* History_r::_internal_add_history() {
  return history_.Add();
}
inline ::History* History_r::add_history() {
  // @@protoc_insertion_point(field_add:History_r.history)
  return _internal_add_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::History >&
History_r::history() const {
  // @@protoc_insertion_point(field_list:History_r.history)
  return history_;
}

// -------------------------------------------------------------------

// Get_rank

// uint32 id_first_player = 1;
inline void Get_rank::clear_id_first_player() {
  id_first_player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Get_rank::_internal_id_first_player() const {
  return id_first_player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Get_rank::id_first_player() const {
  // @@protoc_insertion_point(field_get:Get_rank.id_first_player)
  return _internal_id_first_player();
}
inline void Get_rank::_internal_set_id_first_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_first_player_ = value;
}
inline void Get_rank::set_id_first_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id_first_player(value);
  // @@protoc_insertion_point(field_set:Get_rank.id_first_player)
}

// uint32 nbr_player = 2;
inline void Get_rank::clear_nbr_player() {
  nbr_player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Get_rank::_internal_nbr_player() const {
  return nbr_player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Get_rank::nbr_player() const {
  // @@protoc_insertion_point(field_get:Get_rank.nbr_player)
  return _internal_nbr_player();
}
inline void Get_rank::_internal_set_nbr_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nbr_player_ = value;
}
inline void Get_rank::set_nbr_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nbr_player(value);
  // @@protoc_insertion_point(field_set:Get_rank.nbr_player)
}

// -------------------------------------------------------------------

// Rank_r

// repeated string user = 1;
inline int Rank_r::_internal_user_size() const {
  return user_.size();
}
inline int Rank_r::user_size() const {
  return _internal_user_size();
}
inline void Rank_r::clear_user() {
  user_.Clear();
}
inline std::string* Rank_r::add_user() {
  // @@protoc_insertion_point(field_add_mutable:Rank_r.user)
  return _internal_add_user();
}
inline const std::string& Rank_r::_internal_user(int index) const {
  return user_.Get(index);
}
inline const std::string& Rank_r::user(int index) const {
  // @@protoc_insertion_point(field_get:Rank_r.user)
  return _internal_user(index);
}
inline std::string* Rank_r::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:Rank_r.user)
  return user_.Mutable(index);
}
inline void Rank_r::set_user(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Rank_r.user)
  user_.Mutable(index)->assign(value);
}
inline void Rank_r::set_user(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Rank_r.user)
  user_.Mutable(index)->assign(std::move(value));
}
inline void Rank_r::set_user(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Rank_r.user)
}
inline void Rank_r::set_user(int index, const char* value, size_t size) {
  user_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Rank_r.user)
}
inline std::string* Rank_r::_internal_add_user() {
  return user_.Add();
}
inline void Rank_r::add_user(const std::string& value) {
  user_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Rank_r.user)
}
inline void Rank_r::add_user(std::string&& value) {
  user_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Rank_r.user)
}
inline void Rank_r::add_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Rank_r.user)
}
inline void Rank_r::add_user(const char* value, size_t size) {
  user_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Rank_r.user)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Rank_r::user() const {
  // @@protoc_insertion_point(field_list:Rank_r.user)
  return user_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Rank_r::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:Rank_r.user)
  return &user_;
}

// repeated uint32 pouint32 = 2;
inline int Rank_r::_internal_pouint32_size() const {
  return pouint32_.size();
}
inline int Rank_r::pouint32_size() const {
  return _internal_pouint32_size();
}
inline void Rank_r::clear_pouint32() {
  pouint32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rank_r::_internal_pouint32(int index) const {
  return pouint32_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rank_r::pouint32(int index) const {
  // @@protoc_insertion_point(field_get:Rank_r.pouint32)
  return _internal_pouint32(index);
}
inline void Rank_r::set_pouint32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  pouint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Rank_r.pouint32)
}
inline void Rank_r::_internal_add_pouint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  pouint32_.Add(value);
}
inline void Rank_r::add_pouint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_pouint32(value);
  // @@protoc_insertion_point(field_add:Rank_r.pouint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Rank_r::_internal_pouint32() const {
  return pouint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Rank_r::pouint32() const {
  // @@protoc_insertion_point(field_list:Rank_r.pouint32)
  return _internal_pouint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Rank_r::_internal_mutable_pouint32() {
  return &pouint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Rank_r::mutable_pouint32() {
  // @@protoc_insertion_point(field_mutable_list:Rank_r.pouint32)
  return _internal_mutable_pouint32();
}

// -------------------------------------------------------------------

// Fri_add

// string user = 1;
inline void Fri_add::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Fri_add::user() const {
  // @@protoc_insertion_point(field_get:Fri_add.user)
  return _internal_user();
}
inline void Fri_add::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:Fri_add.user)
}
inline std::string* Fri_add::mutable_user() {
  // @@protoc_insertion_point(field_mutable:Fri_add.user)
  return _internal_mutable_user();
}
inline const std::string& Fri_add::_internal_user() const {
  return user_.GetNoArena();
}
inline void Fri_add::_internal_set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Fri_add::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Fri_add.user)
}
inline void Fri_add::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Fri_add.user)
}
inline void Fri_add::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Fri_add.user)
}
inline std::string* Fri_add::_internal_mutable_user() {
  
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Fri_add::release_user() {
  // @@protoc_insertion_point(field_release:Fri_add.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Fri_add::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:Fri_add.user)
}

// -------------------------------------------------------------------

// Fri_rcv

// string user = 1;
inline void Fri_rcv::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Fri_rcv::user() const {
  // @@protoc_insertion_point(field_get:Fri_rcv.user)
  return _internal_user();
}
inline void Fri_rcv::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:Fri_rcv.user)
}
inline std::string* Fri_rcv::mutable_user() {
  // @@protoc_insertion_point(field_mutable:Fri_rcv.user)
  return _internal_mutable_user();
}
inline const std::string& Fri_rcv::_internal_user() const {
  return user_.GetNoArena();
}
inline void Fri_rcv::_internal_set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Fri_rcv::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Fri_rcv.user)
}
inline void Fri_rcv::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Fri_rcv.user)
}
inline void Fri_rcv::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Fri_rcv.user)
}
inline std::string* Fri_rcv::_internal_mutable_user() {
  
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Fri_rcv::release_user() {
  // @@protoc_insertion_point(field_release:Fri_rcv.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Fri_rcv::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:Fri_rcv.user)
}

// -------------------------------------------------------------------

// Fri_accept

// bool accept = 1;
inline void Fri_accept::clear_accept() {
  accept_ = false;
}
inline bool Fri_accept::_internal_accept() const {
  return accept_;
}
inline bool Fri_accept::accept() const {
  // @@protoc_insertion_point(field_get:Fri_accept.accept)
  return _internal_accept();
}
inline void Fri_accept::_internal_set_accept(bool value) {
  
  accept_ = value;
}
inline void Fri_accept::set_accept(bool value) {
  _internal_set_accept(value);
  // @@protoc_insertion_point(field_set:Fri_accept.accept)
}

// string user = 2;
inline void Fri_accept::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Fri_accept::user() const {
  // @@protoc_insertion_point(field_get:Fri_accept.user)
  return _internal_user();
}
inline void Fri_accept::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:Fri_accept.user)
}
inline std::string* Fri_accept::mutable_user() {
  // @@protoc_insertion_point(field_mutable:Fri_accept.user)
  return _internal_mutable_user();
}
inline const std::string& Fri_accept::_internal_user() const {
  return user_.GetNoArena();
}
inline void Fri_accept::_internal_set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Fri_accept::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Fri_accept.user)
}
inline void Fri_accept::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Fri_accept.user)
}
inline void Fri_accept::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Fri_accept.user)
}
inline std::string* Fri_accept::_internal_mutable_user() {
  
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Fri_accept::release_user() {
  // @@protoc_insertion_point(field_release:Fri_accept.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Fri_accept::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:Fri_accept.user)
}

// -------------------------------------------------------------------

// Fri_rmv

// string user = 1;
inline void Fri_rmv::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Fri_rmv::user() const {
  // @@protoc_insertion_point(field_get:Fri_rmv.user)
  return _internal_user();
}
inline void Fri_rmv::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:Fri_rmv.user)
}
inline std::string* Fri_rmv::mutable_user() {
  // @@protoc_insertion_point(field_mutable:Fri_rmv.user)
  return _internal_mutable_user();
}
inline const std::string& Fri_rmv::_internal_user() const {
  return user_.GetNoArena();
}
inline void Fri_rmv::_internal_set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Fri_rmv::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Fri_rmv.user)
}
inline void Fri_rmv::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Fri_rmv.user)
}
inline void Fri_rmv::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Fri_rmv.user)
}
inline std::string* Fri_rmv::_internal_mutable_user() {
  
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Fri_rmv::release_user() {
  // @@protoc_insertion_point(field_release:Fri_rmv.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Fri_rmv::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:Fri_rmv.user)
}

// -------------------------------------------------------------------

// Fri_ls_r

// repeated string user = 1;
inline int Fri_ls_r::_internal_user_size() const {
  return user_.size();
}
inline int Fri_ls_r::user_size() const {
  return _internal_user_size();
}
inline void Fri_ls_r::clear_user() {
  user_.Clear();
}
inline std::string* Fri_ls_r::add_user() {
  // @@protoc_insertion_point(field_add_mutable:Fri_ls_r.user)
  return _internal_add_user();
}
inline const std::string& Fri_ls_r::_internal_user(int index) const {
  return user_.Get(index);
}
inline const std::string& Fri_ls_r::user(int index) const {
  // @@protoc_insertion_point(field_get:Fri_ls_r.user)
  return _internal_user(index);
}
inline std::string* Fri_ls_r::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:Fri_ls_r.user)
  return user_.Mutable(index);
}
inline void Fri_ls_r::set_user(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Fri_ls_r.user)
  user_.Mutable(index)->assign(value);
}
inline void Fri_ls_r::set_user(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Fri_ls_r.user)
  user_.Mutable(index)->assign(std::move(value));
}
inline void Fri_ls_r::set_user(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Fri_ls_r.user)
}
inline void Fri_ls_r::set_user(int index, const char* value, size_t size) {
  user_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Fri_ls_r.user)
}
inline std::string* Fri_ls_r::_internal_add_user() {
  return user_.Add();
}
inline void Fri_ls_r::add_user(const std::string& value) {
  user_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Fri_ls_r.user)
}
inline void Fri_ls_r::add_user(std::string&& value) {
  user_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Fri_ls_r.user)
}
inline void Fri_ls_r::add_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Fri_ls_r.user)
}
inline void Fri_ls_r::add_user(const char* value, size_t size) {
  user_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Fri_ls_r.user)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Fri_ls_r::user() const {
  // @@protoc_insertion_point(field_list:Fri_ls_r.user)
  return user_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Fri_ls_r::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:Fri_ls_r.user)
  return &user_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_2eproto
